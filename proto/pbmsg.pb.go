// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: pbmsg.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgId int32

const (
	MsgId_INVALID_ID MsgId = 0
	// 用户登陆
	MsgId_USERLOGIN       MsgId = 220
	MsgId_USERLOGIN_REPLY MsgId = 221
	// 握手
	MsgId_HANDSHAKE MsgId = 222
	// 时间设置
	MsgId_DATE_SET       MsgId = 223
	MsgId_DATE_SET_REPLY MsgId = 224
	// 获取网络信息
	MsgId_NET_CFG_GET       MsgId = 225
	MsgId_NET_CFG_GET_REPLY MsgId = 226
	// 设置网络信息
	MsgId_NET_CFG_SET       MsgId = 227
	MsgId_NET_CFG_SET_REPLY MsgId = 228
	// 获取设备信息
	MsgId_DEVICE_INFO_GET       MsgId = 229
	MsgId_DEVICE_INFO_GET_REPLY MsgId = 230
	// 任务开始
	MsgId_TASK_START       MsgId = 231
	MsgId_TASK_START_REPLY MsgId = 232
	// 任务结束
	MsgId_TASK_STOP       MsgId = 233
	MsgId_TASK_STOP_REPLY MsgId = 234
	// 获取任务列表
	MsgId_TASK_GET       MsgId = 235
	MsgId_TASK_GET_REPLY MsgId = 236
	// 添加任务
	MsgId_TASK_ADD       MsgId = 237
	MsgId_TASK_ADD_REPLY MsgId = 238
	// 编辑任务
	MsgId_TASK_EDIT       MsgId = 239
	MsgId_TASK_EDIT_REPLY MsgId = 240
	// 删除任务
	MsgId_TASK_DELETE       MsgId = 241
	MsgId_TASK_DELETE_REPLY MsgId = 242
	// 忽略任务执行
	MsgId_TASK_IGNORE       MsgId = 243
	MsgId_TASK_IGNORE_REPLY MsgId = 244
	// 获取任务忽略执行的时间点
	MsgId_TASK_IGNORE_DATE_GET       MsgId = 245
	MsgId_TASK_IGNORE_DATE_GET_REPLY MsgId = 246
	// 获取任务执行日志
	MsgId_GET_LOG       MsgId = 247
	MsgId_GET_LOG_REPLY MsgId = 248
	// 获取歌曲列表
	MsgId_SONG_GET       MsgId = 255
	MsgId_SONG_GET_REPLY MsgId = 256
	// 文件上传
	MsgId_FILE_UPLOAD       MsgId = 257
	MsgId_FILE_UPLOAD_REPLY MsgId = 258
	// 删除歌曲
	MsgId_SONG_DELETE       MsgId = 259
	MsgId_SONG_DELETE_REPLY MsgId = 260
	// 获取u盘歌曲列表
	MsgId_UDISK_SONG_GET       MsgId = 261
	MsgId_UDISK_SONG_GET_REPLY MsgId = 262
	// 获取输出通道列表
	MsgId_OUT_CHANNEL_GET       MsgId = 263
	MsgId_OUT_CHANNEL_GET_REPLY MsgId = 264
	// 输出通道编辑
	MsgId_OUT_CHANNEL_EDIT       MsgId = 265
	MsgId_OUT_CHANNEL_EDIT_REPLY MsgId = 266
	// 获取输入通道列表
	MsgId_IN_CHANNEL_GET       MsgId = 267
	MsgId_IN_CHANNEL_GET_REPLY MsgId = 268
	// 输入通道编辑
	MsgId_IN_CHANNEL_EDIT       MsgId = 269
	MsgId_IN_CHANNEL_EDIT_REPLY MsgId = 270
	// 调音台任务控制
	MsgId_SOUND_CONSOLE_TASK_CONTROL       MsgId = 275
	MsgId_SOUND_CONSOLE_TASK_CONTROL_REPLY MsgId = 276
	// 调音台任务反馈
	MsgId_SOUND_CONSOLE_TASK_FEEDBACK MsgId = 277
	// 获取电台列表
	MsgId_RADIO_FREQ_GET       MsgId = 294
	MsgId_RADIO_FREQ_GET_REPLY MsgId = 295
	// 添加电台
	MsgId_RADIO_FREQ_ADD       MsgId = 296
	MsgId_RADIO_FREQ_ADD_REPLY MsgId = 297
	// 设置电台
	MsgId_RADIO_FREQ_SET       MsgId = 298
	MsgId_RADIO_FREQ_SET_REPLY MsgId = 299
	// 删除电台
	MsgId_RADIO_FREQ_DELETE       MsgId = 300
	MsgId_RADIO_FREQ_DELETE_REPLY MsgId = 301
	// 设置设备信息
	MsgId_DEVICE_INFO_SET               MsgId = 302
	MsgId_DEVICE_INFO_SET_REPLY         MsgId = 303
	MsgId_DEVICE_RESTORE                MsgId = 304
	MsgId_DEVICE_RESTORE_REPLY          MsgId = 305
	MsgId_DEVICE_UPGRADE                MsgId = 306
	MsgId_DEVICE_UPGRADE_REPLY          MsgId = 307
	MsgId_DEVICE_POWER_GET              MsgId = 308
	MsgId_DEVICE_POWER_GET_REPLY        MsgId = 309
	MsgId_DEVICE_POWER_SET              MsgId = 310
	MsgId_DEVICE_POWER_SET_REPLY        MsgId = 311
	MsgId_TASK_SYNC                     MsgId = 312
	MsgId_TASK_SYNC_REPLY               MsgId = 313
	MsgId_TASK_STATUS_GET               MsgId = 314
	MsgId_TASK_STATUS_GET_REPLY         MsgId = 315
	MsgId_SUBSCRIBE_PUBLISH             MsgId = 316
	MsgId_SUBSCRIBE_PUBLISH_REPLY       MsgId = 317
	MsgId_FORCE_SYNC                    MsgId = 318
	MsgId_FORCE_SYNC_REPLY              MsgId = 319
	MsgId_IDENTITY_SEND                 MsgId = 320
	MsgId_IDENTITY_SEND_REPLY           MsgId = 321
	MsgId_TASK_ADD_OUT_CHANNEL          MsgId = 322
	MsgId_TASK_ADD_OUT_CHANNEL_REPLY    MsgId = 323
	MsgId_TASK_DELETE_OUT_CHANNEL       MsgId = 324
	MsgId_TASK_DELETE_OUT_CHANNEL_REPLY MsgId = 325
	// 下载媒体文件
	MsgId_SONG_DOWNLOAD                    MsgId = 326
	MsgId_SONG_DOWNLOAD_REPLY              MsgId = 327
	MsgId_SONG_DOWNLOAD_STATUS             MsgId = 328
	MsgId_STEREO_CFG_SET                   MsgId = 329
	MsgId_STEREO_CFG_SET_REPLY             MsgId = 330
	MsgId_DEVICE_ALIASE_SET                MsgId = 331
	MsgId_DEVICE_ALIASE_SET_REPLY          MsgId = 332
	MsgId_TASK_SYNC_STATUS_GET             MsgId = 333
	MsgId_TASK_SYNC_STATUS_GET_REPLY       MsgId = 334
	MsgId_UPGRADE_COMPLETE                 MsgId = 335
	MsgId_LED_CFG_SET                      MsgId = 336
	MsgId_LED_CFG_SET_REPLY                MsgId = 337
	MsgId_SPEECH_CFG_GET                   MsgId = 338
	MsgId_SPEECH_CFG_GET_REPLY             MsgId = 339
	MsgId_SPEECH_CFG_SET                   MsgId = 340
	MsgId_SPEECH_CFG_SET_REPLY             MsgId = 341
	MsgId_MISC_CFG_GET                     MsgId = 342
	MsgId_MISC_CFG_GET_REPLY               MsgId = 343
	MsgId_AMP_CHECK_CFG_SET                MsgId = 344
	MsgId_AMP_CHECK_CFG_SET_REPLY          MsgId = 345
	MsgId_BLUETOOTH_CFG_GET                MsgId = 346
	MsgId_BLUETOOTH_CFG_GET_REPLY          MsgId = 347
	MsgId_BLUETOOTH_CFG_SET                MsgId = 348
	MsgId_BLUETOOTH_CFG_SET_REPLY          MsgId = 349
	MsgId_BLUETOOTH_WHITELIST_GET          MsgId = 350
	MsgId_BLUETOOTH_WHITELIST_GET_REPLY    MsgId = 351
	MsgId_BLUETOOTH_WHITELIST_ADD          MsgId = 352
	MsgId_BLUETOOTH_WHITELIST_ADD_REPLY    MsgId = 353
	MsgId_BLUETOOTH_WHITELIST_DELETE       MsgId = 354
	MsgId_BLUETOOTH_WHITELIST_DELETE_REPLY MsgId = 355
	MsgId_TASK_PRESET_SWITCH               MsgId = 356
	MsgId_TASK_PRESET_SWITCH_REPLY         MsgId = 357
	MsgId_APP_LOGIN                        MsgId = 358
	MsgId_DEVICE_REBOOT                    MsgId = 359
	MsgId_DEVICE_REBOOT_REPLY              MsgId = 360
	MsgId_TENANT_EXIT                      MsgId = 361
	MsgId_DEVICE_LOGIN                     MsgId = 362
	MsgId_DEVICE_INFO_UPDATE               MsgId = 363
	MsgId_KEY_PRESS                        MsgId = 364
	MsgId_WRITE_SN                         MsgId = 365
	MsgId_WRITE_SN_REPLY                   MsgId = 366
	MsgId_LED_BOARD_CONTROL                MsgId = 367
	MsgId_LED_BOARD_CONTROL_REPLY          MsgId = 368
	MsgId_APP_ID_BOND                      MsgId = 369
	MsgId_APP_ID_BOND_REPLY                MsgId = 370
	MsgId_AUDIO_MATRIX_CFG_GET             MsgId = 371
	MsgId_AUDIO_MATRIX_CFG_GET_REPLY       MsgId = 372
	MsgId_AUDIO_MATRIX_CFG_SET             MsgId = 373
	MsgId_AUDIO_MATRIX_CFG_SET_REPLY       MsgId = 374
	MsgId_WIRELESS_CFG_SET                 MsgId = 375
	MsgId_WIRELESS_CFG_SET_REPLY           MsgId = 376
	MsgId_DATE_GET                         MsgId = 377
	MsgId_DATE_GET_REPLY                   MsgId = 378
	MsgId_DEVICE_ADVERTISE                 MsgId = 379
	MsgId_DEVICE_ADVERTISE_REPLY           MsgId = 380
	// 获取扩展板列表
	MsgId_EXTEND_BOARD_GET       MsgId = 381
	MsgId_EXTEND_BOARD_GET_REPLY MsgId = 382
	// 编辑扩展板
	MsgId_EXTEND_BOARD_SET                 MsgId = 383
	MsgId_EXTEND_BOARD_SET_REPLY           MsgId = 384
	MsgId_JOIN_TENANT                      MsgId = 385
	MsgId_JOIN_TENANT_REPLY                MsgId = 386
	MsgId_ALARM_OUT_CFG_GET                MsgId = 387
	MsgId_ALARM_OUT_CFG_GET_REPLY          MsgId = 388
	MsgId_ALARM_OUT_CFG_SET                MsgId = 389
	MsgId_ALARM_OUT_CFG_SET_REPLY          MsgId = 390
	MsgId_SPEAKER_VOLUME_SET               MsgId = 391
	MsgId_SPEAKER_VOLUME_SET_REPLY         MsgId = 392
	MsgId_SPEAKER_VOLUME_GET               MsgId = 393
	MsgId_SPEAKER_VOLUME_GET_REPLY         MsgId = 394
	MsgId_EQ_CFG_SET                       MsgId = 395
	MsgId_EQ_CFG_SET_REPLY                 MsgId = 396
	MsgId_U_CHANNEL_SET                    MsgId = 397
	MsgId_U_CHANNEL_SET_REPLY              MsgId = 398
	MsgId_HOWLING_SUPPRESSION_SET          MsgId = 399
	MsgId_HOWLING_SUPPRESSION_SET_REPLY    MsgId = 400
	MsgId_AUDIO_MIX_SET                    MsgId = 401
	MsgId_AUDIO_MIX_SET_REPLY              MsgId = 402
	MsgId_FIRMWARE_DOWNLOAD_PROGRESS       MsgId = 403
	MsgId_AUDIO_SUPPRESSION_SET            MsgId = 404
	MsgId_AUDIO_SUPPRESSION_SET_REPLY      MsgId = 405
	MsgId_NCS_CFG_SET                      MsgId = 406
	MsgId_NCS_CFG_SET_REPLY                MsgId = 407
	MsgId_SPEAKER_CHANNEL_STATUS_GET       MsgId = 408
	MsgId_SPEAKER_CHANNEL_STATUS_GET_REPLY MsgId = 409
	MsgId_SPEAKER_CHANNEL_STATUS           MsgId = 410
	MsgId_PA_REINIT_SET                    MsgId = 411
	MsgId_PA_REINIT_SET_REPLY              MsgId = 412
	MsgId_LOW_SHELF_SET                    MsgId = 413
	MsgId_LOW_SHELF_SET_REPLY              MsgId = 414
	MsgId_TRANSFER_SERVER_SET              MsgId = 415
	MsgId_TRANSFER_SERVER_SET_REPLY        MsgId = 416
	MsgId_SONG_DOWNLOAD_COMPLETE           MsgId = 417
	MsgId_FACTORY_TEST                     MsgId = 500
	MsgId_FACTORY_TEST_REPLY               MsgId = 501
	MsgId_IOT_MESSAGE_TEST                 MsgId = 502
	MsgId_DEBUG_CONNECTION_CFG_SET         MsgId = 503
	MsgId_DEBUG_CONNECTION_CFG_SET_REPLY   MsgId = 504
)

// Enum value maps for MsgId.
var (
	MsgId_name = map[int32]string{
		0:   "INVALID_ID",
		220: "USERLOGIN",
		221: "USERLOGIN_REPLY",
		222: "HANDSHAKE",
		223: "DATE_SET",
		224: "DATE_SET_REPLY",
		225: "NET_CFG_GET",
		226: "NET_CFG_GET_REPLY",
		227: "NET_CFG_SET",
		228: "NET_CFG_SET_REPLY",
		229: "DEVICE_INFO_GET",
		230: "DEVICE_INFO_GET_REPLY",
		231: "TASK_START",
		232: "TASK_START_REPLY",
		233: "TASK_STOP",
		234: "TASK_STOP_REPLY",
		235: "TASK_GET",
		236: "TASK_GET_REPLY",
		237: "TASK_ADD",
		238: "TASK_ADD_REPLY",
		239: "TASK_EDIT",
		240: "TASK_EDIT_REPLY",
		241: "TASK_DELETE",
		242: "TASK_DELETE_REPLY",
		243: "TASK_IGNORE",
		244: "TASK_IGNORE_REPLY",
		245: "TASK_IGNORE_DATE_GET",
		246: "TASK_IGNORE_DATE_GET_REPLY",
		247: "GET_LOG",
		248: "GET_LOG_REPLY",
		255: "SONG_GET",
		256: "SONG_GET_REPLY",
		257: "FILE_UPLOAD",
		258: "FILE_UPLOAD_REPLY",
		259: "SONG_DELETE",
		260: "SONG_DELETE_REPLY",
		261: "UDISK_SONG_GET",
		262: "UDISK_SONG_GET_REPLY",
		263: "OUT_CHANNEL_GET",
		264: "OUT_CHANNEL_GET_REPLY",
		265: "OUT_CHANNEL_EDIT",
		266: "OUT_CHANNEL_EDIT_REPLY",
		267: "IN_CHANNEL_GET",
		268: "IN_CHANNEL_GET_REPLY",
		269: "IN_CHANNEL_EDIT",
		270: "IN_CHANNEL_EDIT_REPLY",
		275: "SOUND_CONSOLE_TASK_CONTROL",
		276: "SOUND_CONSOLE_TASK_CONTROL_REPLY",
		277: "SOUND_CONSOLE_TASK_FEEDBACK",
		294: "RADIO_FREQ_GET",
		295: "RADIO_FREQ_GET_REPLY",
		296: "RADIO_FREQ_ADD",
		297: "RADIO_FREQ_ADD_REPLY",
		298: "RADIO_FREQ_SET",
		299: "RADIO_FREQ_SET_REPLY",
		300: "RADIO_FREQ_DELETE",
		301: "RADIO_FREQ_DELETE_REPLY",
		302: "DEVICE_INFO_SET",
		303: "DEVICE_INFO_SET_REPLY",
		304: "DEVICE_RESTORE",
		305: "DEVICE_RESTORE_REPLY",
		306: "DEVICE_UPGRADE",
		307: "DEVICE_UPGRADE_REPLY",
		308: "DEVICE_POWER_GET",
		309: "DEVICE_POWER_GET_REPLY",
		310: "DEVICE_POWER_SET",
		311: "DEVICE_POWER_SET_REPLY",
		312: "TASK_SYNC",
		313: "TASK_SYNC_REPLY",
		314: "TASK_STATUS_GET",
		315: "TASK_STATUS_GET_REPLY",
		316: "SUBSCRIBE_PUBLISH",
		317: "SUBSCRIBE_PUBLISH_REPLY",
		318: "FORCE_SYNC",
		319: "FORCE_SYNC_REPLY",
		320: "IDENTITY_SEND",
		321: "IDENTITY_SEND_REPLY",
		322: "TASK_ADD_OUT_CHANNEL",
		323: "TASK_ADD_OUT_CHANNEL_REPLY",
		324: "TASK_DELETE_OUT_CHANNEL",
		325: "TASK_DELETE_OUT_CHANNEL_REPLY",
		326: "SONG_DOWNLOAD",
		327: "SONG_DOWNLOAD_REPLY",
		328: "SONG_DOWNLOAD_STATUS",
		329: "STEREO_CFG_SET",
		330: "STEREO_CFG_SET_REPLY",
		331: "DEVICE_ALIASE_SET",
		332: "DEVICE_ALIASE_SET_REPLY",
		333: "TASK_SYNC_STATUS_GET",
		334: "TASK_SYNC_STATUS_GET_REPLY",
		335: "UPGRADE_COMPLETE",
		336: "LED_CFG_SET",
		337: "LED_CFG_SET_REPLY",
		338: "SPEECH_CFG_GET",
		339: "SPEECH_CFG_GET_REPLY",
		340: "SPEECH_CFG_SET",
		341: "SPEECH_CFG_SET_REPLY",
		342: "MISC_CFG_GET",
		343: "MISC_CFG_GET_REPLY",
		344: "AMP_CHECK_CFG_SET",
		345: "AMP_CHECK_CFG_SET_REPLY",
		346: "BLUETOOTH_CFG_GET",
		347: "BLUETOOTH_CFG_GET_REPLY",
		348: "BLUETOOTH_CFG_SET",
		349: "BLUETOOTH_CFG_SET_REPLY",
		350: "BLUETOOTH_WHITELIST_GET",
		351: "BLUETOOTH_WHITELIST_GET_REPLY",
		352: "BLUETOOTH_WHITELIST_ADD",
		353: "BLUETOOTH_WHITELIST_ADD_REPLY",
		354: "BLUETOOTH_WHITELIST_DELETE",
		355: "BLUETOOTH_WHITELIST_DELETE_REPLY",
		356: "TASK_PRESET_SWITCH",
		357: "TASK_PRESET_SWITCH_REPLY",
		358: "APP_LOGIN",
		359: "DEVICE_REBOOT",
		360: "DEVICE_REBOOT_REPLY",
		361: "TENANT_EXIT",
		362: "DEVICE_LOGIN",
		363: "DEVICE_INFO_UPDATE",
		364: "KEY_PRESS",
		365: "WRITE_SN",
		366: "WRITE_SN_REPLY",
		367: "LED_BOARD_CONTROL",
		368: "LED_BOARD_CONTROL_REPLY",
		369: "APP_ID_BOND",
		370: "APP_ID_BOND_REPLY",
		371: "AUDIO_MATRIX_CFG_GET",
		372: "AUDIO_MATRIX_CFG_GET_REPLY",
		373: "AUDIO_MATRIX_CFG_SET",
		374: "AUDIO_MATRIX_CFG_SET_REPLY",
		375: "WIRELESS_CFG_SET",
		376: "WIRELESS_CFG_SET_REPLY",
		377: "DATE_GET",
		378: "DATE_GET_REPLY",
		379: "DEVICE_ADVERTISE",
		380: "DEVICE_ADVERTISE_REPLY",
		381: "EXTEND_BOARD_GET",
		382: "EXTEND_BOARD_GET_REPLY",
		383: "EXTEND_BOARD_SET",
		384: "EXTEND_BOARD_SET_REPLY",
		385: "JOIN_TENANT",
		386: "JOIN_TENANT_REPLY",
		387: "ALARM_OUT_CFG_GET",
		388: "ALARM_OUT_CFG_GET_REPLY",
		389: "ALARM_OUT_CFG_SET",
		390: "ALARM_OUT_CFG_SET_REPLY",
		391: "SPEAKER_VOLUME_SET",
		392: "SPEAKER_VOLUME_SET_REPLY",
		393: "SPEAKER_VOLUME_GET",
		394: "SPEAKER_VOLUME_GET_REPLY",
		395: "EQ_CFG_SET",
		396: "EQ_CFG_SET_REPLY",
		397: "U_CHANNEL_SET",
		398: "U_CHANNEL_SET_REPLY",
		399: "HOWLING_SUPPRESSION_SET",
		400: "HOWLING_SUPPRESSION_SET_REPLY",
		401: "AUDIO_MIX_SET",
		402: "AUDIO_MIX_SET_REPLY",
		403: "FIRMWARE_DOWNLOAD_PROGRESS",
		404: "AUDIO_SUPPRESSION_SET",
		405: "AUDIO_SUPPRESSION_SET_REPLY",
		406: "NCS_CFG_SET",
		407: "NCS_CFG_SET_REPLY",
		408: "SPEAKER_CHANNEL_STATUS_GET",
		409: "SPEAKER_CHANNEL_STATUS_GET_REPLY",
		410: "SPEAKER_CHANNEL_STATUS",
		411: "PA_REINIT_SET",
		412: "PA_REINIT_SET_REPLY",
		413: "LOW_SHELF_SET",
		414: "LOW_SHELF_SET_REPLY",
		415: "TRANSFER_SERVER_SET",
		416: "TRANSFER_SERVER_SET_REPLY",
		417: "SONG_DOWNLOAD_COMPLETE",
		500: "FACTORY_TEST",
		501: "FACTORY_TEST_REPLY",
		502: "IOT_MESSAGE_TEST",
		503: "DEBUG_CONNECTION_CFG_SET",
		504: "DEBUG_CONNECTION_CFG_SET_REPLY",
	}
	MsgId_value = map[string]int32{
		"INVALID_ID":                       0,
		"USERLOGIN":                        220,
		"USERLOGIN_REPLY":                  221,
		"HANDSHAKE":                        222,
		"DATE_SET":                         223,
		"DATE_SET_REPLY":                   224,
		"NET_CFG_GET":                      225,
		"NET_CFG_GET_REPLY":                226,
		"NET_CFG_SET":                      227,
		"NET_CFG_SET_REPLY":                228,
		"DEVICE_INFO_GET":                  229,
		"DEVICE_INFO_GET_REPLY":            230,
		"TASK_START":                       231,
		"TASK_START_REPLY":                 232,
		"TASK_STOP":                        233,
		"TASK_STOP_REPLY":                  234,
		"TASK_GET":                         235,
		"TASK_GET_REPLY":                   236,
		"TASK_ADD":                         237,
		"TASK_ADD_REPLY":                   238,
		"TASK_EDIT":                        239,
		"TASK_EDIT_REPLY":                  240,
		"TASK_DELETE":                      241,
		"TASK_DELETE_REPLY":                242,
		"TASK_IGNORE":                      243,
		"TASK_IGNORE_REPLY":                244,
		"TASK_IGNORE_DATE_GET":             245,
		"TASK_IGNORE_DATE_GET_REPLY":       246,
		"GET_LOG":                          247,
		"GET_LOG_REPLY":                    248,
		"SONG_GET":                         255,
		"SONG_GET_REPLY":                   256,
		"FILE_UPLOAD":                      257,
		"FILE_UPLOAD_REPLY":                258,
		"SONG_DELETE":                      259,
		"SONG_DELETE_REPLY":                260,
		"UDISK_SONG_GET":                   261,
		"UDISK_SONG_GET_REPLY":             262,
		"OUT_CHANNEL_GET":                  263,
		"OUT_CHANNEL_GET_REPLY":            264,
		"OUT_CHANNEL_EDIT":                 265,
		"OUT_CHANNEL_EDIT_REPLY":           266,
		"IN_CHANNEL_GET":                   267,
		"IN_CHANNEL_GET_REPLY":             268,
		"IN_CHANNEL_EDIT":                  269,
		"IN_CHANNEL_EDIT_REPLY":            270,
		"SOUND_CONSOLE_TASK_CONTROL":       275,
		"SOUND_CONSOLE_TASK_CONTROL_REPLY": 276,
		"SOUND_CONSOLE_TASK_FEEDBACK":      277,
		"RADIO_FREQ_GET":                   294,
		"RADIO_FREQ_GET_REPLY":             295,
		"RADIO_FREQ_ADD":                   296,
		"RADIO_FREQ_ADD_REPLY":             297,
		"RADIO_FREQ_SET":                   298,
		"RADIO_FREQ_SET_REPLY":             299,
		"RADIO_FREQ_DELETE":                300,
		"RADIO_FREQ_DELETE_REPLY":          301,
		"DEVICE_INFO_SET":                  302,
		"DEVICE_INFO_SET_REPLY":            303,
		"DEVICE_RESTORE":                   304,
		"DEVICE_RESTORE_REPLY":             305,
		"DEVICE_UPGRADE":                   306,
		"DEVICE_UPGRADE_REPLY":             307,
		"DEVICE_POWER_GET":                 308,
		"DEVICE_POWER_GET_REPLY":           309,
		"DEVICE_POWER_SET":                 310,
		"DEVICE_POWER_SET_REPLY":           311,
		"TASK_SYNC":                        312,
		"TASK_SYNC_REPLY":                  313,
		"TASK_STATUS_GET":                  314,
		"TASK_STATUS_GET_REPLY":            315,
		"SUBSCRIBE_PUBLISH":                316,
		"SUBSCRIBE_PUBLISH_REPLY":          317,
		"FORCE_SYNC":                       318,
		"FORCE_SYNC_REPLY":                 319,
		"IDENTITY_SEND":                    320,
		"IDENTITY_SEND_REPLY":              321,
		"TASK_ADD_OUT_CHANNEL":             322,
		"TASK_ADD_OUT_CHANNEL_REPLY":       323,
		"TASK_DELETE_OUT_CHANNEL":          324,
		"TASK_DELETE_OUT_CHANNEL_REPLY":    325,
		"SONG_DOWNLOAD":                    326,
		"SONG_DOWNLOAD_REPLY":              327,
		"SONG_DOWNLOAD_STATUS":             328,
		"STEREO_CFG_SET":                   329,
		"STEREO_CFG_SET_REPLY":             330,
		"DEVICE_ALIASE_SET":                331,
		"DEVICE_ALIASE_SET_REPLY":          332,
		"TASK_SYNC_STATUS_GET":             333,
		"TASK_SYNC_STATUS_GET_REPLY":       334,
		"UPGRADE_COMPLETE":                 335,
		"LED_CFG_SET":                      336,
		"LED_CFG_SET_REPLY":                337,
		"SPEECH_CFG_GET":                   338,
		"SPEECH_CFG_GET_REPLY":             339,
		"SPEECH_CFG_SET":                   340,
		"SPEECH_CFG_SET_REPLY":             341,
		"MISC_CFG_GET":                     342,
		"MISC_CFG_GET_REPLY":               343,
		"AMP_CHECK_CFG_SET":                344,
		"AMP_CHECK_CFG_SET_REPLY":          345,
		"BLUETOOTH_CFG_GET":                346,
		"BLUETOOTH_CFG_GET_REPLY":          347,
		"BLUETOOTH_CFG_SET":                348,
		"BLUETOOTH_CFG_SET_REPLY":          349,
		"BLUETOOTH_WHITELIST_GET":          350,
		"BLUETOOTH_WHITELIST_GET_REPLY":    351,
		"BLUETOOTH_WHITELIST_ADD":          352,
		"BLUETOOTH_WHITELIST_ADD_REPLY":    353,
		"BLUETOOTH_WHITELIST_DELETE":       354,
		"BLUETOOTH_WHITELIST_DELETE_REPLY": 355,
		"TASK_PRESET_SWITCH":               356,
		"TASK_PRESET_SWITCH_REPLY":         357,
		"APP_LOGIN":                        358,
		"DEVICE_REBOOT":                    359,
		"DEVICE_REBOOT_REPLY":              360,
		"TENANT_EXIT":                      361,
		"DEVICE_LOGIN":                     362,
		"DEVICE_INFO_UPDATE":               363,
		"KEY_PRESS":                        364,
		"WRITE_SN":                         365,
		"WRITE_SN_REPLY":                   366,
		"LED_BOARD_CONTROL":                367,
		"LED_BOARD_CONTROL_REPLY":          368,
		"APP_ID_BOND":                      369,
		"APP_ID_BOND_REPLY":                370,
		"AUDIO_MATRIX_CFG_GET":             371,
		"AUDIO_MATRIX_CFG_GET_REPLY":       372,
		"AUDIO_MATRIX_CFG_SET":             373,
		"AUDIO_MATRIX_CFG_SET_REPLY":       374,
		"WIRELESS_CFG_SET":                 375,
		"WIRELESS_CFG_SET_REPLY":           376,
		"DATE_GET":                         377,
		"DATE_GET_REPLY":                   378,
		"DEVICE_ADVERTISE":                 379,
		"DEVICE_ADVERTISE_REPLY":           380,
		"EXTEND_BOARD_GET":                 381,
		"EXTEND_BOARD_GET_REPLY":           382,
		"EXTEND_BOARD_SET":                 383,
		"EXTEND_BOARD_SET_REPLY":           384,
		"JOIN_TENANT":                      385,
		"JOIN_TENANT_REPLY":                386,
		"ALARM_OUT_CFG_GET":                387,
		"ALARM_OUT_CFG_GET_REPLY":          388,
		"ALARM_OUT_CFG_SET":                389,
		"ALARM_OUT_CFG_SET_REPLY":          390,
		"SPEAKER_VOLUME_SET":               391,
		"SPEAKER_VOLUME_SET_REPLY":         392,
		"SPEAKER_VOLUME_GET":               393,
		"SPEAKER_VOLUME_GET_REPLY":         394,
		"EQ_CFG_SET":                       395,
		"EQ_CFG_SET_REPLY":                 396,
		"U_CHANNEL_SET":                    397,
		"U_CHANNEL_SET_REPLY":              398,
		"HOWLING_SUPPRESSION_SET":          399,
		"HOWLING_SUPPRESSION_SET_REPLY":    400,
		"AUDIO_MIX_SET":                    401,
		"AUDIO_MIX_SET_REPLY":              402,
		"FIRMWARE_DOWNLOAD_PROGRESS":       403,
		"AUDIO_SUPPRESSION_SET":            404,
		"AUDIO_SUPPRESSION_SET_REPLY":      405,
		"NCS_CFG_SET":                      406,
		"NCS_CFG_SET_REPLY":                407,
		"SPEAKER_CHANNEL_STATUS_GET":       408,
		"SPEAKER_CHANNEL_STATUS_GET_REPLY": 409,
		"SPEAKER_CHANNEL_STATUS":           410,
		"PA_REINIT_SET":                    411,
		"PA_REINIT_SET_REPLY":              412,
		"LOW_SHELF_SET":                    413,
		"LOW_SHELF_SET_REPLY":              414,
		"TRANSFER_SERVER_SET":              415,
		"TRANSFER_SERVER_SET_REPLY":        416,
		"SONG_DOWNLOAD_COMPLETE":           417,
		"FACTORY_TEST":                     500,
		"FACTORY_TEST_REPLY":               501,
		"IOT_MESSAGE_TEST":                 502,
		"DEBUG_CONNECTION_CFG_SET":         503,
		"DEBUG_CONNECTION_CFG_SET_REPLY":   504,
	}
)

func (x MsgId) Enum() *MsgId {
	p := new(MsgId)
	*p = x
	return p
}

func (x MsgId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgId) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[0].Descriptor()
}

func (MsgId) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[0]
}

func (x MsgId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgId.Descriptor instead.
func (MsgId) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{0}
}

// 操作执行的状态返回
type Status int32

const (
	Status_SUCCEED        Status = 0
	Status_FAILED         Status = -1
	Status_TASK_NOT_FOUND Status = -2
	Status_TASK_RUNNING   Status = -3
	Status_TASK_STOPPED   Status = -4
	Status_ARG_ERROR      Status = -5
	Status_FORBIDDEN      Status = -6
	// 磁盘满了
	Status_DISK_FULL     Status = -7
	Status_SONG_EXIST    Status = -8
	Status_SYSTEM_BUSY   Status = -9
	Status_UDISK_UNMOUNT Status = -10
	Status_TASK_EXIST    Status = -11
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:   "SUCCEED",
		-1:  "FAILED",
		-2:  "TASK_NOT_FOUND",
		-3:  "TASK_RUNNING",
		-4:  "TASK_STOPPED",
		-5:  "ARG_ERROR",
		-6:  "FORBIDDEN",
		-7:  "DISK_FULL",
		-8:  "SONG_EXIST",
		-9:  "SYSTEM_BUSY",
		-10: "UDISK_UNMOUNT",
		-11: "TASK_EXIST",
	}
	Status_value = map[string]int32{
		"SUCCEED":        0,
		"FAILED":         -1,
		"TASK_NOT_FOUND": -2,
		"TASK_RUNNING":   -3,
		"TASK_STOPPED":   -4,
		"ARG_ERROR":      -5,
		"FORBIDDEN":      -6,
		"DISK_FULL":      -7,
		"SONG_EXIST":     -8,
		"SYSTEM_BUSY":    -9,
		"UDISK_UNMOUNT":  -10,
		"TASK_EXIST":     -11,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{1}
}

type BoardBtnType int32

const (
	BoardBtnType_DEPT    BoardBtnType = 0 //分区
	BoardBtnType_CHANNEL BoardBtnType = 1 //通道
)

// Enum value maps for BoardBtnType.
var (
	BoardBtnType_name = map[int32]string{
		0: "DEPT",
		1: "CHANNEL",
	}
	BoardBtnType_value = map[string]int32{
		"DEPT":    0,
		"CHANNEL": 1,
	}
)

func (x BoardBtnType) Enum() *BoardBtnType {
	p := new(BoardBtnType)
	*p = x
	return p
}

func (x BoardBtnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoardBtnType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[2].Descriptor()
}

func (BoardBtnType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[2]
}

func (x BoardBtnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoardBtnType.Descriptor instead.
func (BoardBtnType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{2}
}

// 报警输入状态
type AlarmInStatus int32

const (
	// 闭合
	AlarmInStatus_CLOSE AlarmInStatus = 0
	// 开路
	AlarmInStatus_OPEN AlarmInStatus = 1
)

// Enum value maps for AlarmInStatus.
var (
	AlarmInStatus_name = map[int32]string{
		0: "CLOSE",
		1: "OPEN",
	}
	AlarmInStatus_value = map[string]int32{
		"CLOSE": 0,
		"OPEN":  1,
	}
)

func (x AlarmInStatus) Enum() *AlarmInStatus {
	p := new(AlarmInStatus)
	*p = x
	return p
}

func (x AlarmInStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmInStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[3].Descriptor()
}

func (AlarmInStatus) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[3]
}

func (x AlarmInStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmInStatus.Descriptor instead.
func (AlarmInStatus) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{3}
}

// 报警输入触发方式
type AlarmInTriggerMethod int32

const (
	// 边沿触发
	AlarmInTriggerMethod_EDGE AlarmInTriggerMethod = 0
	// 电平触发
	AlarmInTriggerMethod_LEVEL AlarmInTriggerMethod = 1
)

// Enum value maps for AlarmInTriggerMethod.
var (
	AlarmInTriggerMethod_name = map[int32]string{
		0: "EDGE",
		1: "LEVEL",
	}
	AlarmInTriggerMethod_value = map[string]int32{
		"EDGE":  0,
		"LEVEL": 1,
	}
)

func (x AlarmInTriggerMethod) Enum() *AlarmInTriggerMethod {
	p := new(AlarmInTriggerMethod)
	*p = x
	return p
}

func (x AlarmInTriggerMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmInTriggerMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[4].Descriptor()
}

func (AlarmInTriggerMethod) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[4]
}

func (x AlarmInTriggerMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmInTriggerMethod.Descriptor instead.
func (AlarmInTriggerMethod) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{4}
}

type ChannelPower int32

const (
	ChannelPower_POWER_125W    ChannelPower = 0
	ChannelPower_POWER_250W    ChannelPower = 1
	ChannelPower_POWER_360W    ChannelPower = 2
	ChannelPower_POWER_500W    ChannelPower = 3
	ChannelPower_POWER_720W    ChannelPower = 4
	ChannelPower_POWER_1000W   ChannelPower = 5
	ChannelPower_POWER_1500W   ChannelPower = 6
	ChannelPower_POWER_UNKNOWN ChannelPower = 255
)

// Enum value maps for ChannelPower.
var (
	ChannelPower_name = map[int32]string{
		0:   "POWER_125W",
		1:   "POWER_250W",
		2:   "POWER_360W",
		3:   "POWER_500W",
		4:   "POWER_720W",
		5:   "POWER_1000W",
		6:   "POWER_1500W",
		255: "POWER_UNKNOWN",
	}
	ChannelPower_value = map[string]int32{
		"POWER_125W":    0,
		"POWER_250W":    1,
		"POWER_360W":    2,
		"POWER_500W":    3,
		"POWER_720W":    4,
		"POWER_1000W":   5,
		"POWER_1500W":   6,
		"POWER_UNKNOWN": 255,
	}
)

func (x ChannelPower) Enum() *ChannelPower {
	p := new(ChannelPower)
	*p = x
	return p
}

func (x ChannelPower) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelPower) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[5].Descriptor()
}

func (ChannelPower) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[5]
}

func (x ChannelPower) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelPower.Descriptor instead.
func (ChannelPower) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{5}
}

// 任务重复方式
type RepeatType int32

const (
	// 单次
	RepeatType_REPEAT_NONE RepeatType = 0
	// 日重复
	RepeatType_REPEAT_DAY RepeatType = 1
	// 周重复
	RepeatType_REPEAT_WEEK RepeatType = 2
	// 月重复
	RepeatType_REPEAT_MONTH RepeatType = 3
	// 年重复
	RepeatType_REPEAT_YEAR RepeatType = 4
)

// Enum value maps for RepeatType.
var (
	RepeatType_name = map[int32]string{
		0: "REPEAT_NONE",
		1: "REPEAT_DAY",
		2: "REPEAT_WEEK",
		3: "REPEAT_MONTH",
		4: "REPEAT_YEAR",
	}
	RepeatType_value = map[string]int32{
		"REPEAT_NONE":  0,
		"REPEAT_DAY":   1,
		"REPEAT_WEEK":  2,
		"REPEAT_MONTH": 3,
		"REPEAT_YEAR":  4,
	}
)

func (x RepeatType) Enum() *RepeatType {
	p := new(RepeatType)
	*p = x
	return p
}

func (x RepeatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepeatType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[6].Descriptor()
}

func (RepeatType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[6]
}

func (x RepeatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepeatType.Descriptor instead.
func (RepeatType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{6}
}

// 音源
type AudioSource int32

const (
	// 音频
	AudioSource_SONG AudioSource = 0
	// 输入通道
	AudioSource_IN_CHANNEL AudioSource = 1
	// 组合通道
	AudioSource_MIX AudioSource = 2
	// 收音机
	AudioSource_RADIO AudioSource = 3
	// 网络流
	AudioSource_STREAM         AudioSource = 4
	AudioSource_INVALID_SOURCE AudioSource = 255
)

// Enum value maps for AudioSource.
var (
	AudioSource_name = map[int32]string{
		0:   "SONG",
		1:   "IN_CHANNEL",
		2:   "MIX",
		3:   "RADIO",
		4:   "STREAM",
		255: "INVALID_SOURCE",
	}
	AudioSource_value = map[string]int32{
		"SONG":           0,
		"IN_CHANNEL":     1,
		"MIX":            2,
		"RADIO":          3,
		"STREAM":         4,
		"INVALID_SOURCE": 255,
	}
)

func (x AudioSource) Enum() *AudioSource {
	p := new(AudioSource)
	*p = x
	return p
}

func (x AudioSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioSource) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[7].Descriptor()
}

func (AudioSource) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[7]
}

func (x AudioSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioSource.Descriptor instead.
func (AudioSource) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{7}
}

type TaskType int32

const (
	// 计划
	TaskType_SCHEDULE_TASK TaskType = 0
	// 语音实时
	TaskType_VOICE_REALTIME_TASK TaskType = 1
	// 语音文件实时
	TaskType_VOICE_SONG_REALTIME_TASK TaskType = 2
	// 音频文件实时
	TaskType_SONG_REALTIME_TASK TaskType = 3
	// 文本实时
	TaskType_TEXT_REALTIME_TASK TaskType = 5
	// 报警输入触发任务
	TaskType_ALARM_IN_TASK                    TaskType = 6
	TaskType_SOUND_CONSOLE_REALTIME_RECV_TASK TaskType = 10
	TaskType_SOUND_CONSOLE_REALTIME_SEND_TASK TaskType = 11
	TaskType_XC9000_BROADCAST_RECV_TASK       TaskType = 12
	TaskType_XC9000_BROADCAST_SEND_TASK       TaskType = 13
	TaskType_MONITOR_TASK                     TaskType = 14
	TaskType_PINK_NOISE_TASK                  TaskType = 15
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "SCHEDULE_TASK",
		1:  "VOICE_REALTIME_TASK",
		2:  "VOICE_SONG_REALTIME_TASK",
		3:  "SONG_REALTIME_TASK",
		5:  "TEXT_REALTIME_TASK",
		6:  "ALARM_IN_TASK",
		10: "SOUND_CONSOLE_REALTIME_RECV_TASK",
		11: "SOUND_CONSOLE_REALTIME_SEND_TASK",
		12: "XC9000_BROADCAST_RECV_TASK",
		13: "XC9000_BROADCAST_SEND_TASK",
		14: "MONITOR_TASK",
		15: "PINK_NOISE_TASK",
	}
	TaskType_value = map[string]int32{
		"SCHEDULE_TASK":                    0,
		"VOICE_REALTIME_TASK":              1,
		"VOICE_SONG_REALTIME_TASK":         2,
		"SONG_REALTIME_TASK":               3,
		"TEXT_REALTIME_TASK":               5,
		"ALARM_IN_TASK":                    6,
		"SOUND_CONSOLE_REALTIME_RECV_TASK": 10,
		"SOUND_CONSOLE_REALTIME_SEND_TASK": 11,
		"XC9000_BROADCAST_RECV_TASK":       12,
		"XC9000_BROADCAST_SEND_TASK":       13,
		"MONITOR_TASK":                     14,
		"PINK_NOISE_TASK":                  15,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[8].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[8]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{8}
}

type TEXT_DISPLAY_STYLE int32

const (
	// 静止
	TEXT_DISPLAY_STYLE_STATIC TEXT_DISPLAY_STYLE = 0
	// 向左移动
	TEXT_DISPLAY_STYLE_MOVE_LEFT TEXT_DISPLAY_STYLE = 1
	// 向上移动
	TEXT_DISPLAY_STYLE_MOVE_UP TEXT_DISPLAY_STYLE = 2
)

// Enum value maps for TEXT_DISPLAY_STYLE.
var (
	TEXT_DISPLAY_STYLE_name = map[int32]string{
		0: "STATIC",
		1: "MOVE_LEFT",
		2: "MOVE_UP",
	}
	TEXT_DISPLAY_STYLE_value = map[string]int32{
		"STATIC":    0,
		"MOVE_LEFT": 1,
		"MOVE_UP":   2,
	}
)

func (x TEXT_DISPLAY_STYLE) Enum() *TEXT_DISPLAY_STYLE {
	p := new(TEXT_DISPLAY_STYLE)
	*p = x
	return p
}

func (x TEXT_DISPLAY_STYLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TEXT_DISPLAY_STYLE) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[9].Descriptor()
}

func (TEXT_DISPLAY_STYLE) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[9]
}

func (x TEXT_DISPLAY_STYLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TEXT_DISPLAY_STYLE.Descriptor instead.
func (TEXT_DISPLAY_STYLE) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{9}
}

type TEXT_DISPLAY_SPEED int32

const (
	TEXT_DISPLAY_SPEED_LOW    TEXT_DISPLAY_SPEED = 0
	TEXT_DISPLAY_SPEED_MIDDLE TEXT_DISPLAY_SPEED = 1
	TEXT_DISPLAY_SPEED_HIGH   TEXT_DISPLAY_SPEED = 2
)

// Enum value maps for TEXT_DISPLAY_SPEED.
var (
	TEXT_DISPLAY_SPEED_name = map[int32]string{
		0: "LOW",
		1: "MIDDLE",
		2: "HIGH",
	}
	TEXT_DISPLAY_SPEED_value = map[string]int32{
		"LOW":    0,
		"MIDDLE": 1,
		"HIGH":   2,
	}
)

func (x TEXT_DISPLAY_SPEED) Enum() *TEXT_DISPLAY_SPEED {
	p := new(TEXT_DISPLAY_SPEED)
	*p = x
	return p
}

func (x TEXT_DISPLAY_SPEED) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TEXT_DISPLAY_SPEED) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[10].Descriptor()
}

func (TEXT_DISPLAY_SPEED) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[10]
}

func (x TEXT_DISPLAY_SPEED) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TEXT_DISPLAY_SPEED.Descriptor instead.
func (TEXT_DISPLAY_SPEED) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{10}
}

type SongPlayType int32

const (
	SongPlayType_ORDER_PLAY      SongPlayType = 0
	SongPlayType_SHUFFLE_PLAY    SongPlayType = 1
	SongPlayType_ORDER_PLAY_ONCE SongPlayType = 2
)

// Enum value maps for SongPlayType.
var (
	SongPlayType_name = map[int32]string{
		0: "ORDER_PLAY",
		1: "SHUFFLE_PLAY",
		2: "ORDER_PLAY_ONCE",
	}
	SongPlayType_value = map[string]int32{
		"ORDER_PLAY":      0,
		"SHUFFLE_PLAY":    1,
		"ORDER_PLAY_ONCE": 2,
	}
)

func (x SongPlayType) Enum() *SongPlayType {
	p := new(SongPlayType)
	*p = x
	return p
}

func (x SongPlayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SongPlayType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[11].Descriptor()
}

func (SongPlayType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[11]
}

func (x SongPlayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SongPlayType.Descriptor instead.
func (SongPlayType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{11}
}

// 日志类型
type LogType int32

const (
	// 所有
	LogType_ALL LogType = 0
	// 任务
	LogType_TASK LogType = 1
	// 系统
	LogType_SYSTEM LogType = 2
	// 错误
	LogType_ERROR LogType = 3
)

// Enum value maps for LogType.
var (
	LogType_name = map[int32]string{
		0: "ALL",
		1: "TASK",
		2: "SYSTEM",
		3: "ERROR",
	}
	LogType_value = map[string]int32{
		"ALL":    0,
		"TASK":   1,
		"SYSTEM": 2,
		"ERROR":  3,
	}
)

func (x LogType) Enum() *LogType {
	p := new(LogType)
	*p = x
	return p
}

func (x LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[12].Descriptor()
}

func (LogType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[12]
}

func (x LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogType.Descriptor instead.
func (LogType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{12}
}

type FileType int32

const (
	FileType_FILE_SONG     FileType = 0
	FileType_FILE_FIRMWARE FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FILE_SONG",
		1: "FILE_FIRMWARE",
	}
	FileType_value = map[string]int32{
		"FILE_SONG":     0,
		"FILE_FIRMWARE": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[13].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[13]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{13}
}

// 广播流类型
type PaStreamType int32

const (
	// 本地，低码率，低带宽
	PaStreamType_LOCAL_LOW PaStreamType = 0
	// 本地，中码率，中带宽
	PaStreamType_LOCAL_MIDDLE PaStreamType = 1
	// 本地，高码率，高带宽
	PaStreamType_LOCAL_HIGH PaStreamType = 2
	// 互联网
	PaStreamType_INTERNET PaStreamType = 3
)

// Enum value maps for PaStreamType.
var (
	PaStreamType_name = map[int32]string{
		0: "LOCAL_LOW",
		1: "LOCAL_MIDDLE",
		2: "LOCAL_HIGH",
		3: "INTERNET",
	}
	PaStreamType_value = map[string]int32{
		"LOCAL_LOW":    0,
		"LOCAL_MIDDLE": 1,
		"LOCAL_HIGH":   2,
		"INTERNET":     3,
	}
)

func (x PaStreamType) Enum() *PaStreamType {
	p := new(PaStreamType)
	*p = x
	return p
}

func (x PaStreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaStreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[14].Descriptor()
}

func (PaStreamType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[14]
}

func (x PaStreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaStreamType.Descriptor instead.
func (PaStreamType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{14}
}

type VolumeType int32

const (
	VolumeType_IN_1_VOLUME  VolumeType = 0
	VolumeType_IN_2_VOLUME  VolumeType = 1
	VolumeType_IN_3_VOLUME  VolumeType = 2
	VolumeType_IN_4_VOLUME  VolumeType = 3
	VolumeType_SONG_VOLUME  VolumeType = 4
	VolumeType_VOICE_VOLUME VolumeType = 5
	// 话筒杆音量
	VolumeType_MICROPHONE_VOLUME VolumeType = 6
	// 总音量
	VolumeType_MASTER_VOLUME VolumeType = 7
	VolumeType_IN_5_VOLUME   VolumeType = 8
	VolumeType_IN_6_VOLUME   VolumeType = 9
)

// Enum value maps for VolumeType.
var (
	VolumeType_name = map[int32]string{
		0: "IN_1_VOLUME",
		1: "IN_2_VOLUME",
		2: "IN_3_VOLUME",
		3: "IN_4_VOLUME",
		4: "SONG_VOLUME",
		5: "VOICE_VOLUME",
		6: "MICROPHONE_VOLUME",
		7: "MASTER_VOLUME",
		8: "IN_5_VOLUME",
		9: "IN_6_VOLUME",
	}
	VolumeType_value = map[string]int32{
		"IN_1_VOLUME":       0,
		"IN_2_VOLUME":       1,
		"IN_3_VOLUME":       2,
		"IN_4_VOLUME":       3,
		"SONG_VOLUME":       4,
		"VOICE_VOLUME":      5,
		"MICROPHONE_VOLUME": 6,
		"MASTER_VOLUME":     7,
		"IN_5_VOLUME":       8,
		"IN_6_VOLUME":       9,
	}
)

func (x VolumeType) Enum() *VolumeType {
	p := new(VolumeType)
	*p = x
	return p
}

func (x VolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[15].Descriptor()
}

func (VolumeType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[15]
}

func (x VolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeType.Descriptor instead.
func (VolumeType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{15}
}

// 调音台任务控制命令
type SoundConsoleTaskControlCommand int32

const (
	SoundConsoleTaskControlCommand_INVALID_COMMAND SoundConsoleTaskControlCommand = 0
	// 歌曲切换
	SoundConsoleTaskControlCommand_SONG_SWITCH SoundConsoleTaskControlCommand = 1
	// 歌曲暂停
	SoundConsoleTaskControlCommand_SONG_PAUSE SoundConsoleTaskControlCommand = 2
	// 歌曲播放
	SoundConsoleTaskControlCommand_SONG_PLAY SoundConsoleTaskControlCommand = 3
	// 下一首
	SoundConsoleTaskControlCommand_SONG_NEXT SoundConsoleTaskControlCommand = 4
	// 上一首
	SoundConsoleTaskControlCommand_SONG_PREV SoundConsoleTaskControlCommand = 5
	// 定点播放
	SoundConsoleTaskControlCommand_SONG_POSITION SoundConsoleTaskControlCommand = 6
	// 音量控制
	SoundConsoleTaskControlCommand_VOLUME_CONTROL SoundConsoleTaskControlCommand = 7
	// 握手
	SoundConsoleTaskControlCommand_KEEPALIVE SoundConsoleTaskControlCommand = 8
)

// Enum value maps for SoundConsoleTaskControlCommand.
var (
	SoundConsoleTaskControlCommand_name = map[int32]string{
		0: "INVALID_COMMAND",
		1: "SONG_SWITCH",
		2: "SONG_PAUSE",
		3: "SONG_PLAY",
		4: "SONG_NEXT",
		5: "SONG_PREV",
		6: "SONG_POSITION",
		7: "VOLUME_CONTROL",
		8: "KEEPALIVE",
	}
	SoundConsoleTaskControlCommand_value = map[string]int32{
		"INVALID_COMMAND": 0,
		"SONG_SWITCH":     1,
		"SONG_PAUSE":      2,
		"SONG_PLAY":       3,
		"SONG_NEXT":       4,
		"SONG_PREV":       5,
		"SONG_POSITION":   6,
		"VOLUME_CONTROL":  7,
		"KEEPALIVE":       8,
	}
)

func (x SoundConsoleTaskControlCommand) Enum() *SoundConsoleTaskControlCommand {
	p := new(SoundConsoleTaskControlCommand)
	*p = x
	return p
}

func (x SoundConsoleTaskControlCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoundConsoleTaskControlCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[16].Descriptor()
}

func (SoundConsoleTaskControlCommand) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[16]
}

func (x SoundConsoleTaskControlCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoundConsoleTaskControlCommand.Descriptor instead.
func (SoundConsoleTaskControlCommand) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{16}
}

type DevicePower int32

const (
	DevicePower_W_0        DevicePower = 0
	DevicePower_W_EIGHTH   DevicePower = 1
	DevicePower_W_QUARTERN DevicePower = 2
	DevicePower_W_HALF     DevicePower = 3
	DevicePower_W_1        DevicePower = 4
)

// Enum value maps for DevicePower.
var (
	DevicePower_name = map[int32]string{
		0: "W_0",
		1: "W_EIGHTH",
		2: "W_QUARTERN",
		3: "W_HALF",
		4: "W_1",
	}
	DevicePower_value = map[string]int32{
		"W_0":        0,
		"W_EIGHTH":   1,
		"W_QUARTERN": 2,
		"W_HALF":     3,
		"W_1":        4,
	}
)

func (x DevicePower) Enum() *DevicePower {
	p := new(DevicePower)
	*p = x
	return p
}

func (x DevicePower) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevicePower) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[17].Descriptor()
}

func (DevicePower) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[17]
}

func (x DevicePower) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevicePower.Descriptor instead.
func (DevicePower) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{17}
}

type TaskSyncType int32

const (
	TaskSyncType_ADD    TaskSyncType = 0
	TaskSyncType_DELETE TaskSyncType = 1
	TaskSyncType_EDIT   TaskSyncType = 2
)

// Enum value maps for TaskSyncType.
var (
	TaskSyncType_name = map[int32]string{
		0: "ADD",
		1: "DELETE",
		2: "EDIT",
	}
	TaskSyncType_value = map[string]int32{
		"ADD":    0,
		"DELETE": 1,
		"EDIT":   2,
	}
)

func (x TaskSyncType) Enum() *TaskSyncType {
	p := new(TaskSyncType)
	*p = x
	return p
}

func (x TaskSyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskSyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[18].Descriptor()
}

func (TaskSyncType) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[18]
}

func (x TaskSyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSyncType.Descriptor instead.
func (TaskSyncType) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{18}
}

type TaskSyncStatus int32

const (
	// 同步完成
	TaskSyncStatus_SYNC_DONE TaskSyncStatus = 0
	// 正在同步
	TaskSyncStatus_SYNC_DOING TaskSyncStatus = 1
	// 同步失败
	TaskSyncStatus_SYNC_FAILED TaskSyncStatus = 2
)

// Enum value maps for TaskSyncStatus.
var (
	TaskSyncStatus_name = map[int32]string{
		0: "SYNC_DONE",
		1: "SYNC_DOING",
		2: "SYNC_FAILED",
	}
	TaskSyncStatus_value = map[string]int32{
		"SYNC_DONE":   0,
		"SYNC_DOING":  1,
		"SYNC_FAILED": 2,
	}
)

func (x TaskSyncStatus) Enum() *TaskSyncStatus {
	p := new(TaskSyncStatus)
	*p = x
	return p
}

func (x TaskSyncStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskSyncStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[19].Descriptor()
}

func (TaskSyncStatus) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[19]
}

func (x TaskSyncStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSyncStatus.Descriptor instead.
func (TaskSyncStatus) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{19}
}

type Key int32

const (
	Key_KEY_PAGING          Key = 0
	Key_KEY_VOLUME_DEC      Key = 1
	Key_KEY_MUTE            Key = 2
	Key_KEY_VOLUME_INC      Key = 3
	Key_KEY_RESTORE_FACTORY Key = 4
)

// Enum value maps for Key.
var (
	Key_name = map[int32]string{
		0: "KEY_PAGING",
		1: "KEY_VOLUME_DEC",
		2: "KEY_MUTE",
		3: "KEY_VOLUME_INC",
		4: "KEY_RESTORE_FACTORY",
	}
	Key_value = map[string]int32{
		"KEY_PAGING":          0,
		"KEY_VOLUME_DEC":      1,
		"KEY_MUTE":            2,
		"KEY_VOLUME_INC":      3,
		"KEY_RESTORE_FACTORY": 4,
	}
)

func (x Key) Enum() *Key {
	p := new(Key)
	*p = x
	return p
}

func (x Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Key) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[20].Descriptor()
}

func (Key) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[20]
}

func (x Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Key.Descriptor instead.
func (Key) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{20}
}

type LedBoardControlId int32

const (
	LedBoardControlId_UPGRADE         LedBoardControlId = 0
	LedBoardControlId_DISPLAY_VERSION LedBoardControlId = 1
)

// Enum value maps for LedBoardControlId.
var (
	LedBoardControlId_name = map[int32]string{
		0: "UPGRADE",
		1: "DISPLAY_VERSION",
	}
	LedBoardControlId_value = map[string]int32{
		"UPGRADE":         0,
		"DISPLAY_VERSION": 1,
	}
)

func (x LedBoardControlId) Enum() *LedBoardControlId {
	p := new(LedBoardControlId)
	*p = x
	return p
}

func (x LedBoardControlId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedBoardControlId) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[21].Descriptor()
}

func (LedBoardControlId) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[21]
}

func (x LedBoardControlId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedBoardControlId.Descriptor instead.
func (LedBoardControlId) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{21}
}

type FactoryTestId int32

const (
	FactoryTestId_LAN_TEST                    FactoryTestId = 0
	FactoryTestId_CHANNEL_1_TEST              FactoryTestId = 1
	FactoryTestId_CHANNEL_2_TEST              FactoryTestId = 2
	FactoryTestId_CHANNEL_3_TEST              FactoryTestId = 3
	FactoryTestId_CHANNEL_4_TEST              FactoryTestId = 4
	FactoryTestId_CHANNEL_MIC_TEST            FactoryTestId = 5
	FactoryTestId_ALARM_1_TEST                FactoryTestId = 6
	FactoryTestId_ALARM_2_TEST                FactoryTestId = 7
	FactoryTestId_ALARM_3_TEST                FactoryTestId = 8
	FactoryTestId_ALARM_4_TEST                FactoryTestId = 9
	FactoryTestId_RADIO_TEST                  FactoryTestId = 10
	FactoryTestId_UDISK_TEST                  FactoryTestId = 11
	FactoryTestId_RTC_TEST                    FactoryTestId = 12
	FactoryTestId_BACKUP_CHANNEL_1_TEST       FactoryTestId = 13
	FactoryTestId_BACKUP_CHANNEL_2_TEST       FactoryTestId = 14
	FactoryTestId_BACKUP_CHANNEL_3_TEST       FactoryTestId = 15
	FactoryTestId_BACKUP_CHANNEL_4_TEST       FactoryTestId = 16
	FactoryTestId_SWITCH_CHIP_TEST            FactoryTestId = 17
	FactoryTestId_PREPARE_TEST                FactoryTestId = 18
	FactoryTestId_LED_RED_TEST                FactoryTestId = 19
	FactoryTestId_LED_GREEN_TEST              FactoryTestId = 20
	FactoryTestId_LED_BLUE_TEST               FactoryTestId = 21
	FactoryTestId_LINEIN_TEST                 FactoryTestId = 22
	FactoryTestId_ENCRYPT_CHIP_TEST           FactoryTestId = 23
	FactoryTestId_UP_ETH_LINKED_TEST          FactoryTestId = 24
	FactoryTestId_DOWN_ETH_LINKED_TEST        FactoryTestId = 25
	FactoryTestId_IN_CHANNEL_1_TEST           FactoryTestId = 26
	FactoryTestId_IN_CHANNEL_2_TEST           FactoryTestId = 27
	FactoryTestId_IN_CHANNEL_3_TEST           FactoryTestId = 28
	FactoryTestId_IN_CHANNEL_4_TEST           FactoryTestId = 29
	FactoryTestId_IN_ALARM_1_TEST             FactoryTestId = 30
	FactoryTestId_IN_ALARM_2_TEST             FactoryTestId = 31
	FactoryTestId_IN_ALARM_3_TEST             FactoryTestId = 32
	FactoryTestId_IN_ALARM_4_TEST             FactoryTestId = 33
	FactoryTestId_FAN_TEST                    FactoryTestId = 34
	FactoryTestId_OUT_POWER_TEST              FactoryTestId = 35
	FactoryTestId_LED_BOARD_LIGHT_TEST        FactoryTestId = 36
	FactoryTestId_LED_BOARD_DISPLAY_TEXT_TEST FactoryTestId = 37
	FactoryTestId_SPEAKER_TEST                FactoryTestId = 38
	FactoryTestId_MICROPHONE_LED_TEST         FactoryTestId = 39
)

// Enum value maps for FactoryTestId.
var (
	FactoryTestId_name = map[int32]string{
		0:  "LAN_TEST",
		1:  "CHANNEL_1_TEST",
		2:  "CHANNEL_2_TEST",
		3:  "CHANNEL_3_TEST",
		4:  "CHANNEL_4_TEST",
		5:  "CHANNEL_MIC_TEST",
		6:  "ALARM_1_TEST",
		7:  "ALARM_2_TEST",
		8:  "ALARM_3_TEST",
		9:  "ALARM_4_TEST",
		10: "RADIO_TEST",
		11: "UDISK_TEST",
		12: "RTC_TEST",
		13: "BACKUP_CHANNEL_1_TEST",
		14: "BACKUP_CHANNEL_2_TEST",
		15: "BACKUP_CHANNEL_3_TEST",
		16: "BACKUP_CHANNEL_4_TEST",
		17: "SWITCH_CHIP_TEST",
		18: "PREPARE_TEST",
		19: "LED_RED_TEST",
		20: "LED_GREEN_TEST",
		21: "LED_BLUE_TEST",
		22: "LINEIN_TEST",
		23: "ENCRYPT_CHIP_TEST",
		24: "UP_ETH_LINKED_TEST",
		25: "DOWN_ETH_LINKED_TEST",
		26: "IN_CHANNEL_1_TEST",
		27: "IN_CHANNEL_2_TEST",
		28: "IN_CHANNEL_3_TEST",
		29: "IN_CHANNEL_4_TEST",
		30: "IN_ALARM_1_TEST",
		31: "IN_ALARM_2_TEST",
		32: "IN_ALARM_3_TEST",
		33: "IN_ALARM_4_TEST",
		34: "FAN_TEST",
		35: "OUT_POWER_TEST",
		36: "LED_BOARD_LIGHT_TEST",
		37: "LED_BOARD_DISPLAY_TEXT_TEST",
		38: "SPEAKER_TEST",
		39: "MICROPHONE_LED_TEST",
	}
	FactoryTestId_value = map[string]int32{
		"LAN_TEST":                    0,
		"CHANNEL_1_TEST":              1,
		"CHANNEL_2_TEST":              2,
		"CHANNEL_3_TEST":              3,
		"CHANNEL_4_TEST":              4,
		"CHANNEL_MIC_TEST":            5,
		"ALARM_1_TEST":                6,
		"ALARM_2_TEST":                7,
		"ALARM_3_TEST":                8,
		"ALARM_4_TEST":                9,
		"RADIO_TEST":                  10,
		"UDISK_TEST":                  11,
		"RTC_TEST":                    12,
		"BACKUP_CHANNEL_1_TEST":       13,
		"BACKUP_CHANNEL_2_TEST":       14,
		"BACKUP_CHANNEL_3_TEST":       15,
		"BACKUP_CHANNEL_4_TEST":       16,
		"SWITCH_CHIP_TEST":            17,
		"PREPARE_TEST":                18,
		"LED_RED_TEST":                19,
		"LED_GREEN_TEST":              20,
		"LED_BLUE_TEST":               21,
		"LINEIN_TEST":                 22,
		"ENCRYPT_CHIP_TEST":           23,
		"UP_ETH_LINKED_TEST":          24,
		"DOWN_ETH_LINKED_TEST":        25,
		"IN_CHANNEL_1_TEST":           26,
		"IN_CHANNEL_2_TEST":           27,
		"IN_CHANNEL_3_TEST":           28,
		"IN_CHANNEL_4_TEST":           29,
		"IN_ALARM_1_TEST":             30,
		"IN_ALARM_2_TEST":             31,
		"IN_ALARM_3_TEST":             32,
		"IN_ALARM_4_TEST":             33,
		"FAN_TEST":                    34,
		"OUT_POWER_TEST":              35,
		"LED_BOARD_LIGHT_TEST":        36,
		"LED_BOARD_DISPLAY_TEXT_TEST": 37,
		"SPEAKER_TEST":                38,
		"MICROPHONE_LED_TEST":         39,
	}
)

func (x FactoryTestId) Enum() *FactoryTestId {
	p := new(FactoryTestId)
	*p = x
	return p
}

func (x FactoryTestId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FactoryTestId) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmsg_proto_enumTypes[22].Descriptor()
}

func (FactoryTestId) Type() protoreflect.EnumType {
	return &file_pbmsg_proto_enumTypes[22]
}

func (x FactoryTestId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FactoryTestId.Descriptor instead.
func (FactoryTestId) EnumDescriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{22}
}

// 用户登陆
type UserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserLogin) Reset() {
	*x = UserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogin) ProtoMessage() {}

func (x *UserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogin.ProtoReflect.Descriptor instead.
func (*UserLogin) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{0}
}

func (x *UserLogin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 用户登陆返回
type UserLoginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	// 是否管理员
	Administrator bool `protobuf:"varint,2,opt,name=administrator,proto3" json:"administrator,omitempty"`
	// 分配给此用户的输出通道
	OutChannel string `protobuf:"bytes,3,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
}

func (x *UserLoginReply) Reset() {
	*x = UserLoginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginReply) ProtoMessage() {}

func (x *UserLoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginReply.ProtoReflect.Descriptor instead.
func (*UserLoginReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{1}
}

func (x *UserLoginReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *UserLoginReply) GetAdministrator() bool {
	if x != nil {
		return x.Administrator
	}
	return false
}

func (x *UserLoginReply) GetOutChannel() string {
	if x != nil {
		return x.OutChannel
	}
	return ""
}

// 时间设置
type DateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 时间格式：2019-8-28 11:30:00
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	// ntp 服务器
	NtpServer string `protobuf:"bytes,3,opt,name=ntp_server,json=ntpServer,proto3" json:"ntp_server,omitempty"`
}

func (x *DateSet) Reset() {
	*x = DateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateSet) ProtoMessage() {}

func (x *DateSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateSet.ProtoReflect.Descriptor instead.
func (*DateSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{2}
}

func (x *DateSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DateSet) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DateSet) GetNtpServer() string {
	if x != nil {
		return x.NtpServer
	}
	return ""
}

type DateSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DateSetReply) Reset() {
	*x = DateSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateSetReply) ProtoMessage() {}

func (x *DateSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateSetReply.ProtoReflect.Descriptor instead.
func (*DateSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{3}
}

func (x *DateSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 时间设置
type DateGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *DateGet) Reset() {
	*x = DateGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateGet) ProtoMessage() {}

func (x *DateGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateGet.ProtoReflect.Descriptor instead.
func (*DateGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{4}
}

func (x *DateGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DateGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	// 时间格式：2019-8-28 11:30:00
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	// ntp 服务器
	NtpServer string `protobuf:"bytes,3,opt,name=ntp_server,json=ntpServer,proto3" json:"ntp_server,omitempty"`
}

func (x *DateGetReply) Reset() {
	*x = DateGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateGetReply) ProtoMessage() {}

func (x *DateGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateGetReply.ProtoReflect.Descriptor instead.
func (*DateGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{5}
}

func (x *DateGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *DateGetReply) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DateGetReply) GetNtpServer() string {
	if x != nil {
		return x.NtpServer
	}
	return ""
}

type NcsCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminalId       uint32 `protobuf:"varint,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	TerminalPort     uint32 `protobuf:"varint,2,opt,name=terminal_port,json=terminalPort,proto3" json:"terminal_port,omitempty"`
	MainServerIp     string `protobuf:"bytes,3,opt,name=main_server_ip,json=mainServerIp,proto3" json:"main_server_ip,omitempty"`
	MainServerPort   uint32 `protobuf:"varint,4,opt,name=main_server_port,json=mainServerPort,proto3" json:"main_server_port,omitempty"`
	BackupServerIp   string `protobuf:"bytes,5,opt,name=backup_server_ip,json=backupServerIp,proto3" json:"backup_server_ip,omitempty"`
	BackupServerPort uint32 `protobuf:"varint,6,opt,name=backup_server_port,json=backupServerPort,proto3" json:"backup_server_port,omitempty"`
	Delay            uint32 `protobuf:"varint,7,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *NcsCfg) Reset() {
	*x = NcsCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NcsCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NcsCfg) ProtoMessage() {}

func (x *NcsCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NcsCfg.ProtoReflect.Descriptor instead.
func (*NcsCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{6}
}

func (x *NcsCfg) GetTerminalId() uint32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

func (x *NcsCfg) GetTerminalPort() uint32 {
	if x != nil {
		return x.TerminalPort
	}
	return 0
}

func (x *NcsCfg) GetMainServerIp() string {
	if x != nil {
		return x.MainServerIp
	}
	return ""
}

func (x *NcsCfg) GetMainServerPort() uint32 {
	if x != nil {
		return x.MainServerPort
	}
	return 0
}

func (x *NcsCfg) GetBackupServerIp() string {
	if x != nil {
		return x.BackupServerIp
	}
	return ""
}

func (x *NcsCfg) GetBackupServerPort() uint32 {
	if x != nil {
		return x.BackupServerPort
	}
	return 0
}

func (x *NcsCfg) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type SipCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port     uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SipCfg) Reset() {
	*x = SipCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipCfg) ProtoMessage() {}

func (x *SipCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipCfg.ProtoReflect.Descriptor instead.
func (*SipCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{7}
}

func (x *SipCfg) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SipCfg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SipCfg) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SipCfg) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 网络配置
type NetCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 手动配置的ip
	StaticIp string `protobuf:"bytes,1,opt,name=static_ip,json=staticIp,proto3" json:"static_ip,omitempty"`
	// 手动配置的网关
	StaticGateway string `protobuf:"bytes,2,opt,name=static_gateway,json=staticGateway,proto3" json:"static_gateway,omitempty"`
	// 手动配置的子网掩码
	StaticNetmask string `protobuf:"bytes,3,opt,name=static_netmask,json=staticNetmask,proto3" json:"static_netmask,omitempty"`
	// 手动配置的主dns
	StaticDns1 string `protobuf:"bytes,4,opt,name=static_dns1,json=staticDns1,proto3" json:"static_dns1,omitempty"`
	// 手动配置的备用dns
	StaticDns2 string `protobuf:"bytes,5,opt,name=static_dns2,json=staticDns2,proto3" json:"static_dns2,omitempty"`
	// zmq通讯端口，消息推送端口为通讯端口+1
	ServicePort uint32 `protobuf:"varint,6,opt,name=service_port,json=servicePort,proto3" json:"service_port,omitempty"`
	// 以太网mac地址
	EthMacAddr string `protobuf:"bytes,7,opt,name=eth_mac_addr,json=ethMacAddr,proto3" json:"eth_mac_addr,omitempty"`
	// ntp 服务器
	NtpServer  string `protobuf:"bytes,8,opt,name=ntp_server,json=ntpServer,proto3" json:"ntp_server,omitempty"`
	DhcpEnable bool   `protobuf:"varint,9,opt,name=dhcp_enable,json=dhcpEnable,proto3" json:"dhcp_enable,omitempty"`
	// dhcp分配的ip
	DhcpIp string `protobuf:"bytes,10,opt,name=dhcp_ip,json=dhcpIp,proto3" json:"dhcp_ip,omitempty"`
	// dhcp分配的网关
	DhcpGateway string `protobuf:"bytes,11,opt,name=dhcp_gateway,json=dhcpGateway,proto3" json:"dhcp_gateway,omitempty"`
	// dhcp分配的子网掩码
	DhcpNetmask string `protobuf:"bytes,12,opt,name=dhcp_netmask,json=dhcpNetmask,proto3" json:"dhcp_netmask,omitempty"`
	// dhcp分配的主dns
	DhcpDns1 string `protobuf:"bytes,13,opt,name=dhcp_dns1,json=dhcpDns1,proto3" json:"dhcp_dns1,omitempty"`
	// dhcp分配的备用dns
	DhcpDns2 string `protobuf:"bytes,14,opt,name=dhcp_dns2,json=dhcpDns2,proto3" json:"dhcp_dns2,omitempty"`
	// wifi mac地址
	WifiMacAddr string `protobuf:"bytes,15,opt,name=wifi_mac_addr,json=wifiMacAddr,proto3" json:"wifi_mac_addr,omitempty"`
	// 蓝牙mac地址
	BluetoothMacAddr string `protobuf:"bytes,16,opt,name=bluetooth_mac_addr,json=bluetoothMacAddr,proto3" json:"bluetooth_mac_addr,omitempty"`
	// wifi热点使能
	WifiApEnable bool   `protobuf:"varint,17,opt,name=wifi_ap_enable,json=wifiApEnable,proto3" json:"wifi_ap_enable,omitempty"`
	WifiSsid     string `protobuf:"bytes,18,opt,name=wifi_ssid,json=wifiSsid,proto3" json:"wifi_ssid,omitempty"`
	WifiPassword string `protobuf:"bytes,19,opt,name=wifi_password,json=wifiPassword,proto3" json:"wifi_password,omitempty"`
	// 设备作为ap时的ip
	WifiApIp string `protobuf:"bytes,20,opt,name=wifi_ap_ip,json=wifiApIp,proto3" json:"wifi_ap_ip,omitempty"`
	// 设备作为ap时的子网掩码
	WifiApNetmask string `protobuf:"bytes,21,opt,name=wifi_ap_netmask,json=wifiApNetmask,proto3" json:"wifi_ap_netmask,omitempty"`
	WifiIp        string `protobuf:"bytes,22,opt,name=wifi_ip,json=wifiIp,proto3" json:"wifi_ip,omitempty"`
	WifiGateway   string `protobuf:"bytes,23,opt,name=wifi_gateway,json=wifiGateway,proto3" json:"wifi_gateway,omitempty"`
	WifiNetmask   string `protobuf:"bytes,24,opt,name=wifi_netmask,json=wifiNetmask,proto3" json:"wifi_netmask,omitempty"`
	WifiDns1      string `protobuf:"bytes,25,opt,name=wifi_dns1,json=wifiDns1,proto3" json:"wifi_dns1,omitempty"`
	WifiDns2      string `protobuf:"bytes,26,opt,name=wifi_dns2,json=wifiDns2,proto3" json:"wifi_dns2,omitempty"`
	ServiceIp     string `protobuf:"bytes,27,opt,name=service_ip,json=serviceIp,proto3" json:"service_ip,omitempty"`
	RtspPort      uint32 `protobuf:"varint,28,opt,name=rtsp_port,json=rtspPort,proto3" json:"rtsp_port,omitempty"`
	// mqtt私服地址
	MqttServer string `protobuf:"bytes,29,opt,name=mqtt_server,json=mqttServer,proto3" json:"mqtt_server,omitempty"`
	// oss私服地址
	OssServer string  `protobuf:"bytes,30,opt,name=oss_server,json=ossServer,proto3" json:"oss_server,omitempty"`
	Ncscfg    *NcsCfg `protobuf:"bytes,31,opt,name=ncscfg,proto3" json:"ncscfg,omitempty"`
	Sipcfg    *SipCfg `protobuf:"bytes,32,opt,name=sipcfg,proto3" json:"sipcfg,omitempty"`
}

func (x *NetCfg) Reset() {
	*x = NetCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfg) ProtoMessage() {}

func (x *NetCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfg.ProtoReflect.Descriptor instead.
func (*NetCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{8}
}

func (x *NetCfg) GetStaticIp() string {
	if x != nil {
		return x.StaticIp
	}
	return ""
}

func (x *NetCfg) GetStaticGateway() string {
	if x != nil {
		return x.StaticGateway
	}
	return ""
}

func (x *NetCfg) GetStaticNetmask() string {
	if x != nil {
		return x.StaticNetmask
	}
	return ""
}

func (x *NetCfg) GetStaticDns1() string {
	if x != nil {
		return x.StaticDns1
	}
	return ""
}

func (x *NetCfg) GetStaticDns2() string {
	if x != nil {
		return x.StaticDns2
	}
	return ""
}

func (x *NetCfg) GetServicePort() uint32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

func (x *NetCfg) GetEthMacAddr() string {
	if x != nil {
		return x.EthMacAddr
	}
	return ""
}

func (x *NetCfg) GetNtpServer() string {
	if x != nil {
		return x.NtpServer
	}
	return ""
}

func (x *NetCfg) GetDhcpEnable() bool {
	if x != nil {
		return x.DhcpEnable
	}
	return false
}

func (x *NetCfg) GetDhcpIp() string {
	if x != nil {
		return x.DhcpIp
	}
	return ""
}

func (x *NetCfg) GetDhcpGateway() string {
	if x != nil {
		return x.DhcpGateway
	}
	return ""
}

func (x *NetCfg) GetDhcpNetmask() string {
	if x != nil {
		return x.DhcpNetmask
	}
	return ""
}

func (x *NetCfg) GetDhcpDns1() string {
	if x != nil {
		return x.DhcpDns1
	}
	return ""
}

func (x *NetCfg) GetDhcpDns2() string {
	if x != nil {
		return x.DhcpDns2
	}
	return ""
}

func (x *NetCfg) GetWifiMacAddr() string {
	if x != nil {
		return x.WifiMacAddr
	}
	return ""
}

func (x *NetCfg) GetBluetoothMacAddr() string {
	if x != nil {
		return x.BluetoothMacAddr
	}
	return ""
}

func (x *NetCfg) GetWifiApEnable() bool {
	if x != nil {
		return x.WifiApEnable
	}
	return false
}

func (x *NetCfg) GetWifiSsid() string {
	if x != nil {
		return x.WifiSsid
	}
	return ""
}

func (x *NetCfg) GetWifiPassword() string {
	if x != nil {
		return x.WifiPassword
	}
	return ""
}

func (x *NetCfg) GetWifiApIp() string {
	if x != nil {
		return x.WifiApIp
	}
	return ""
}

func (x *NetCfg) GetWifiApNetmask() string {
	if x != nil {
		return x.WifiApNetmask
	}
	return ""
}

func (x *NetCfg) GetWifiIp() string {
	if x != nil {
		return x.WifiIp
	}
	return ""
}

func (x *NetCfg) GetWifiGateway() string {
	if x != nil {
		return x.WifiGateway
	}
	return ""
}

func (x *NetCfg) GetWifiNetmask() string {
	if x != nil {
		return x.WifiNetmask
	}
	return ""
}

func (x *NetCfg) GetWifiDns1() string {
	if x != nil {
		return x.WifiDns1
	}
	return ""
}

func (x *NetCfg) GetWifiDns2() string {
	if x != nil {
		return x.WifiDns2
	}
	return ""
}

func (x *NetCfg) GetServiceIp() string {
	if x != nil {
		return x.ServiceIp
	}
	return ""
}

func (x *NetCfg) GetRtspPort() uint32 {
	if x != nil {
		return x.RtspPort
	}
	return 0
}

func (x *NetCfg) GetMqttServer() string {
	if x != nil {
		return x.MqttServer
	}
	return ""
}

func (x *NetCfg) GetOssServer() string {
	if x != nil {
		return x.OssServer
	}
	return ""
}

func (x *NetCfg) GetNcscfg() *NcsCfg {
	if x != nil {
		return x.Ncscfg
	}
	return nil
}

func (x *NetCfg) GetSipcfg() *SipCfg {
	if x != nil {
		return x.Sipcfg
	}
	return nil
}

// 获取设备网络配置信息
type NetCfgGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *NetCfgGet) Reset() {
	*x = NetCfgGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfgGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfgGet) ProtoMessage() {}

func (x *NetCfgGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfgGet.ProtoReflect.Descriptor instead.
func (*NetCfgGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{9}
}

func (x *NetCfgGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type NetCfgGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status  `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Cfg    *NetCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *NetCfgGetReply) Reset() {
	*x = NetCfgGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfgGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfgGetReply) ProtoMessage() {}

func (x *NetCfgGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfgGetReply.ProtoReflect.Descriptor instead.
func (*NetCfgGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{10}
}

func (x *NetCfgGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *NetCfgGetReply) GetCfg() *NetCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

// 设置网络配置信息
type NetCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Cfg      *NetCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *NetCfgSet) Reset() {
	*x = NetCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfgSet) ProtoMessage() {}

func (x *NetCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfgSet.ProtoReflect.Descriptor instead.
func (*NetCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{11}
}

func (x *NetCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NetCfgSet) GetCfg() *NetCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type NetCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *NetCfgSetReply) Reset() {
	*x = NetCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfgSetReply) ProtoMessage() {}

func (x *NetCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfgSetReply.ProtoReflect.Descriptor instead.
func (*NetCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{12}
}

func (x *NetCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type NcsCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Cfg      *NcsCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *NcsCfgSet) Reset() {
	*x = NcsCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NcsCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NcsCfgSet) ProtoMessage() {}

func (x *NcsCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NcsCfgSet.ProtoReflect.Descriptor instead.
func (*NcsCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{13}
}

func (x *NcsCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NcsCfgSet) GetCfg() *NcsCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type NcsCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *NcsCfgSetReply) Reset() {
	*x = NcsCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NcsCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NcsCfgSetReply) ProtoMessage() {}

func (x *NcsCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NcsCfgSetReply.ProtoReflect.Descriptor instead.
func (*NcsCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{14}
}

func (x *NcsCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type ExtendBoardPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtendBoard []*ExtendBoard `protobuf:"bytes,1,rep,name=extend_board,json=extendBoard,proto3" json:"extend_board,omitempty"`
}

func (x *ExtendBoardPack) Reset() {
	*x = ExtendBoardPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendBoardPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendBoardPack) ProtoMessage() {}

func (x *ExtendBoardPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendBoardPack.ProtoReflect.Descriptor instead.
func (*ExtendBoardPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{15}
}

func (x *ExtendBoardPack) GetExtendBoard() []*ExtendBoard {
	if x != nil {
		return x.ExtendBoard
	}
	return nil
}

type ExtendBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Board []*BoardAttr `protobuf:"bytes,2,rep,name=board,proto3" json:"board,omitempty"`
}

func (x *ExtendBoard) Reset() {
	*x = ExtendBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendBoard) ProtoMessage() {}

func (x *ExtendBoard) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendBoard.ProtoReflect.Descriptor instead.
func (*ExtendBoard) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{16}
}

func (x *ExtendBoard) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExtendBoard) GetBoard() []*BoardAttr {
	if x != nil {
		return x.Board
	}
	return nil
}

type BoardAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置类型
	Type BoardBtnType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.BoardBtnType" json:"type,omitempty"`
	// 配置内容，分区id或通道标识
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *BoardAttr) Reset() {
	*x = BoardAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardAttr) ProtoMessage() {}

func (x *BoardAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardAttr.ProtoReflect.Descriptor instead.
func (*BoardAttr) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{17}
}

func (x *BoardAttr) GetType() BoardBtnType {
	if x != nil {
		return x.Type
	}
	return BoardBtnType_DEPT
}

func (x *BoardAttr) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ExtendBoardGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ExtendBoardGet) Reset() {
	*x = ExtendBoardGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendBoardGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendBoardGet) ProtoMessage() {}

func (x *ExtendBoardGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendBoardGet.ProtoReflect.Descriptor instead.
func (*ExtendBoardGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{18}
}

func (x *ExtendBoardGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type ExtendBoardGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       Status           `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	ExtendBoards *ExtendBoardPack `protobuf:"bytes,2,opt,name=extend_boards,json=extendBoards,proto3" json:"extend_boards,omitempty"`
}

func (x *ExtendBoardGetReply) Reset() {
	*x = ExtendBoardGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendBoardGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendBoardGetReply) ProtoMessage() {}

func (x *ExtendBoardGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendBoardGetReply.ProtoReflect.Descriptor instead.
func (*ExtendBoardGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{19}
}

func (x *ExtendBoardGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *ExtendBoardGetReply) GetExtendBoards() *ExtendBoardPack {
	if x != nil {
		return x.ExtendBoards
	}
	return nil
}

type ExtendBoardSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string           `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	ExtendBoards *ExtendBoardPack `protobuf:"bytes,2,opt,name=extend_boards,json=extendBoards,proto3" json:"extend_boards,omitempty"`
}

func (x *ExtendBoardSet) Reset() {
	*x = ExtendBoardSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendBoardSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendBoardSet) ProtoMessage() {}

func (x *ExtendBoardSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendBoardSet.ProtoReflect.Descriptor instead.
func (*ExtendBoardSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{20}
}

func (x *ExtendBoardSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ExtendBoardSet) GetExtendBoards() *ExtendBoardPack {
	if x != nil {
		return x.ExtendBoards
	}
	return nil
}

type ExtendBoardSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *ExtendBoardSetReply) Reset() {
	*x = ExtendBoardSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendBoardSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendBoardSetReply) ProtoMessage() {}

func (x *ExtendBoardSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendBoardSetReply.ProtoReflect.Descriptor instead.
func (*ExtendBoardSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{21}
}

func (x *ExtendBoardSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type ChannelPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*ChannelAttr `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelPack) Reset() {
	*x = ChannelPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPack) ProtoMessage() {}

func (x *ChannelPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPack.ProtoReflect.Descriptor instead.
func (*ChannelPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{22}
}

func (x *ChannelPack) GetChannel() []*ChannelAttr {
	if x != nil {
		return x.Channel
	}
	return nil
}

type SoundConsoleScenePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene []*SoundConsoleScene `protobuf:"bytes,1,rep,name=scene,proto3" json:"scene,omitempty"`
}

func (x *SoundConsoleScenePack) Reset() {
	*x = SoundConsoleScenePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundConsoleScenePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundConsoleScenePack) ProtoMessage() {}

func (x *SoundConsoleScenePack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundConsoleScenePack.ProtoReflect.Descriptor instead.
func (*SoundConsoleScenePack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{23}
}

func (x *SoundConsoleScenePack) GetScene() []*SoundConsoleScene {
	if x != nil {
		return x.Scene
	}
	return nil
}

type RadioFreqPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rf []*RadioFreq `protobuf:"bytes,1,rep,name=rf,proto3" json:"rf,omitempty"`
}

func (x *RadioFreqPack) Reset() {
	*x = RadioFreqPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqPack) ProtoMessage() {}

func (x *RadioFreqPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqPack.ProtoReflect.Descriptor instead.
func (*RadioFreqPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{24}
}

func (x *RadioFreqPack) GetRf() []*RadioFreq {
	if x != nil {
		return x.Rf
	}
	return nil
}

type SongPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Songs []*Song `protobuf:"bytes,1,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *SongPack) Reset() {
	*x = SongPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongPack) ProtoMessage() {}

func (x *SongPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongPack.ProtoReflect.Descriptor instead.
func (*SongPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{25}
}

func (x *SongPack) GetSongs() []*Song {
	if x != nil {
		return x.Songs
	}
	return nil
}

// 本地扩声配置
type SpeechCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 使能
	SpeechEnable bool `protobuf:"varint,1,opt,name=speech_enable,json=speechEnable,proto3" json:"speech_enable,omitempty"`
	// 本地扩声区域
	LocalSpeechArea string `protobuf:"bytes,2,opt,name=local_speech_area,json=localSpeechArea,proto3" json:"local_speech_area,omitempty"`
	// 触发阈值 (0~15)
	TriggerThreshold uint32 `protobuf:"varint,3,opt,name=trigger_threshold,json=triggerThreshold,proto3" json:"trigger_threshold,omitempty"`
	// 本地扩声音量
	Volume uint32 `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`
	// 网络扩声区域
	NetworkSpeechArea string `protobuf:"bytes,5,opt,name=network_speech_area,json=networkSpeechArea,proto3" json:"network_speech_area,omitempty"`
}

func (x *SpeechCfg) Reset() {
	*x = SpeechCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechCfg) ProtoMessage() {}

func (x *SpeechCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechCfg.ProtoReflect.Descriptor instead.
func (*SpeechCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{26}
}

func (x *SpeechCfg) GetSpeechEnable() bool {
	if x != nil {
		return x.SpeechEnable
	}
	return false
}

func (x *SpeechCfg) GetLocalSpeechArea() string {
	if x != nil {
		return x.LocalSpeechArea
	}
	return ""
}

func (x *SpeechCfg) GetTriggerThreshold() uint32 {
	if x != nil {
		return x.TriggerThreshold
	}
	return 0
}

func (x *SpeechCfg) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SpeechCfg) GetNetworkSpeechArea() string {
	if x != nil {
		return x.NetworkSpeechArea
	}
	return ""
}

type MiscCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NXT2102立体声使能
	StereoEnable bool `protobuf:"varint,1,opt,name=stereo_enable,json=stereoEnable,proto3" json:"stereo_enable,omitempty"`
	// NXT2102状态灯使能
	LedEnable bool `protobuf:"varint,2,opt,name=led_enable,json=ledEnable,proto3" json:"led_enable,omitempty"`
	// 功放检测
	AmpCheckEnable bool `protobuf:"varint,3,opt,name=amp_check_enable,json=ampCheckEnable,proto3" json:"amp_check_enable,omitempty"`
	// 计划任务预案目录
	TaskPresetDirectory string `protobuf:"bytes,4,opt,name=task_preset_directory,json=taskPresetDirectory,proto3" json:"task_preset_directory,omitempty"`
	// 无线模块使能
	WirelessDisable bool `protobuf:"varint,5,opt,name=wireless_disable,json=wirelessDisable,proto3" json:"wireless_disable,omitempty"`
	// 时区设置
	Timezone string `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// NXT3602的6组扬声器音量
	SpeakerVolume *SpeakerVolume `protobuf:"bytes,7,opt,name=speaker_volume,json=speakerVolume,proto3" json:"speaker_volume,omitempty"`
	// NXT3602的eq配置
	EqCfg *EqCfg `protobuf:"bytes,8,opt,name=eq_cfg,json=eqCfg,proto3" json:"eq_cfg,omitempty"`
	// NXT3602的U段通道配置，0~39，0表示不是固定通道
	UChannel int32 `protobuf:"varint,9,opt,name=u_channel,json=uChannel,proto3" json:"u_channel,omitempty"`
	// 啸叫抑制使能
	HowlingSuppression bool `protobuf:"varint,10,opt,name=howling_suppression,json=howlingSuppression,proto3" json:"howling_suppression,omitempty"`
	// 移频百分比 0~100
	HowlingFreqShift int32 `protobuf:"varint,11,opt,name=howling_freq_shift,json=howlingFreqShift,proto3" json:"howling_freq_shift,omitempty"`
	// 混音
	AudioMix bool `protobuf:"varint,12,opt,name=audio_mix,json=audioMix,proto3" json:"audio_mix,omitempty"`
	// 音频压制
	AudioSuppression bool `protobuf:"varint,13,opt,name=audio_suppression,json=audioSuppression,proto3" json:"audio_suppression,omitempty"`
	// 功放定期初始化
	PaReinit       bool            `protobuf:"varint,14,opt,name=pa_reinit,json=paReinit,proto3" json:"pa_reinit,omitempty"`
	LowShelfCfg    *LowShelfCfg    `protobuf:"bytes,15,opt,name=low_shelf_cfg,json=lowShelfCfg,proto3" json:"low_shelf_cfg,omitempty"`
	TransferServer *TransferServer `protobuf:"bytes,16,opt,name=transfer_server,json=transferServer,proto3" json:"transfer_server,omitempty"`
}

func (x *MiscCfg) Reset() {
	*x = MiscCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscCfg) ProtoMessage() {}

func (x *MiscCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscCfg.ProtoReflect.Descriptor instead.
func (*MiscCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{27}
}

func (x *MiscCfg) GetStereoEnable() bool {
	if x != nil {
		return x.StereoEnable
	}
	return false
}

func (x *MiscCfg) GetLedEnable() bool {
	if x != nil {
		return x.LedEnable
	}
	return false
}

func (x *MiscCfg) GetAmpCheckEnable() bool {
	if x != nil {
		return x.AmpCheckEnable
	}
	return false
}

func (x *MiscCfg) GetTaskPresetDirectory() string {
	if x != nil {
		return x.TaskPresetDirectory
	}
	return ""
}

func (x *MiscCfg) GetWirelessDisable() bool {
	if x != nil {
		return x.WirelessDisable
	}
	return false
}

func (x *MiscCfg) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *MiscCfg) GetSpeakerVolume() *SpeakerVolume {
	if x != nil {
		return x.SpeakerVolume
	}
	return nil
}

func (x *MiscCfg) GetEqCfg() *EqCfg {
	if x != nil {
		return x.EqCfg
	}
	return nil
}

func (x *MiscCfg) GetUChannel() int32 {
	if x != nil {
		return x.UChannel
	}
	return 0
}

func (x *MiscCfg) GetHowlingSuppression() bool {
	if x != nil {
		return x.HowlingSuppression
	}
	return false
}

func (x *MiscCfg) GetHowlingFreqShift() int32 {
	if x != nil {
		return x.HowlingFreqShift
	}
	return 0
}

func (x *MiscCfg) GetAudioMix() bool {
	if x != nil {
		return x.AudioMix
	}
	return false
}

func (x *MiscCfg) GetAudioSuppression() bool {
	if x != nil {
		return x.AudioSuppression
	}
	return false
}

func (x *MiscCfg) GetPaReinit() bool {
	if x != nil {
		return x.PaReinit
	}
	return false
}

func (x *MiscCfg) GetLowShelfCfg() *LowShelfCfg {
	if x != nil {
		return x.LowShelfCfg
	}
	return nil
}

func (x *MiscCfg) GetTransferServer() *TransferServer {
	if x != nil {
		return x.TransferServer
	}
	return nil
}

type AlarmIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备名称
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 报警输入编号
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// 触发状态
	TriggerStatus AlarmInStatus `protobuf:"varint,3,opt,name=trigger_status,json=triggerStatus,proto3,enum=proto.AlarmInStatus" json:"trigger_status,omitempty"`
	// 触发方式
	TriggerMethod AlarmInTriggerMethod `protobuf:"varint,4,opt,name=trigger_method,json=triggerMethod,proto3,enum=proto.AlarmInTriggerMethod" json:"trigger_method,omitempty"`
	// 触发任务uuid
	TaskUuid string `protobuf:"bytes,5,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
}

func (x *AlarmIn) Reset() {
	*x = AlarmIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmIn) ProtoMessage() {}

func (x *AlarmIn) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmIn.ProtoReflect.Descriptor instead.
func (*AlarmIn) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{28}
}

func (x *AlarmIn) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AlarmIn) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AlarmIn) GetTriggerStatus() AlarmInStatus {
	if x != nil {
		return x.TriggerStatus
	}
	return AlarmInStatus_CLOSE
}

func (x *AlarmIn) GetTriggerMethod() AlarmInTriggerMethod {
	if x != nil {
		return x.TriggerMethod
	}
	return AlarmInTriggerMethod_EDGE
}

func (x *AlarmIn) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

type AlarmOutCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 恢复时间：0表示持续至任务结束，大于0的数表示多少秒后恢复
	Duration uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *AlarmOutCfg) Reset() {
	*x = AlarmOutCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmOutCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmOutCfg) ProtoMessage() {}

func (x *AlarmOutCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmOutCfg.ProtoReflect.Descriptor instead.
func (*AlarmOutCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{29}
}

func (x *AlarmOutCfg) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AlarmOutCfg) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type AlarmOutCfgGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AlarmOutCfgGet) Reset() {
	*x = AlarmOutCfgGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmOutCfgGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmOutCfgGet) ProtoMessage() {}

func (x *AlarmOutCfgGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmOutCfgGet.ProtoReflect.Descriptor instead.
func (*AlarmOutCfgGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{30}
}

func (x *AlarmOutCfgGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type AlarmOutCfgGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status       `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Cfg    *AlarmOutCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *AlarmOutCfgGetReply) Reset() {
	*x = AlarmOutCfgGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmOutCfgGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmOutCfgGetReply) ProtoMessage() {}

func (x *AlarmOutCfgGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmOutCfgGetReply.ProtoReflect.Descriptor instead.
func (*AlarmOutCfgGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{31}
}

func (x *AlarmOutCfgGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *AlarmOutCfgGetReply) GetCfg() *AlarmOutCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type AlarmOutCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Cfg      *AlarmOutCfg `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *AlarmOutCfgSet) Reset() {
	*x = AlarmOutCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmOutCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmOutCfgSet) ProtoMessage() {}

func (x *AlarmOutCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmOutCfgSet.ProtoReflect.Descriptor instead.
func (*AlarmOutCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{32}
}

func (x *AlarmOutCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AlarmOutCfgSet) GetCfg() *AlarmOutCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type AlarmOutCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *AlarmOutCfgSetReply) Reset() {
	*x = AlarmOutCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmOutCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmOutCfgSetReply) ProtoMessage() {}

func (x *AlarmOutCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmOutCfgSetReply.ProtoReflect.Descriptor instead.
func (*AlarmOutCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{33}
}

func (x *AlarmOutCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type AudioRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InChannel  string `protobuf:"bytes,1,opt,name=in_channel,json=inChannel,proto3" json:"in_channel,omitempty"`
	OutChannel string `protobuf:"bytes,2,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
}

func (x *AudioRoute) Reset() {
	*x = AudioRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRoute) ProtoMessage() {}

func (x *AudioRoute) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRoute.ProtoReflect.Descriptor instead.
func (*AudioRoute) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{34}
}

func (x *AudioRoute) GetInChannel() string {
	if x != nil {
		return x.InChannel
	}
	return ""
}

func (x *AudioRoute) GetOutChannel() string {
	if x != nil {
		return x.OutChannel
	}
	return ""
}

type AudioMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     bool          `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	AudioRoute []*AudioRoute `protobuf:"bytes,2,rep,name=audio_route,json=audioRoute,proto3" json:"audio_route,omitempty"`
}

func (x *AudioMatrix) Reset() {
	*x = AudioMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMatrix) ProtoMessage() {}

func (x *AudioMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMatrix.ProtoReflect.Descriptor instead.
func (*AudioMatrix) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{35}
}

func (x *AudioMatrix) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AudioMatrix) GetAudioRoute() []*AudioRoute {
	if x != nil {
		return x.AudioRoute
	}
	return nil
}

type AudioMatrixCfgGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AudioMatrixCfgGet) Reset() {
	*x = AudioMatrixCfgGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMatrixCfgGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMatrixCfgGet) ProtoMessage() {}

func (x *AudioMatrixCfgGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMatrixCfgGet.ProtoReflect.Descriptor instead.
func (*AudioMatrixCfgGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{36}
}

func (x *AudioMatrixCfgGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type AudioMatrixCfgGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      Status       `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	AudioMatrix *AudioMatrix `protobuf:"bytes,2,opt,name=audio_matrix,json=audioMatrix,proto3" json:"audio_matrix,omitempty"`
}

func (x *AudioMatrixCfgGetReply) Reset() {
	*x = AudioMatrixCfgGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMatrixCfgGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMatrixCfgGetReply) ProtoMessage() {}

func (x *AudioMatrixCfgGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMatrixCfgGetReply.ProtoReflect.Descriptor instead.
func (*AudioMatrixCfgGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{37}
}

func (x *AudioMatrixCfgGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *AudioMatrixCfgGetReply) GetAudioMatrix() *AudioMatrix {
	if x != nil {
		return x.AudioMatrix
	}
	return nil
}

type AudioMatrixCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AudioMatrix *AudioMatrix `protobuf:"bytes,2,opt,name=audio_matrix,json=audioMatrix,proto3" json:"audio_matrix,omitempty"`
}

func (x *AudioMatrixCfgSet) Reset() {
	*x = AudioMatrixCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMatrixCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMatrixCfgSet) ProtoMessage() {}

func (x *AudioMatrixCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMatrixCfgSet.ProtoReflect.Descriptor instead.
func (*AudioMatrixCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{38}
}

func (x *AudioMatrixCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AudioMatrixCfgSet) GetAudioMatrix() *AudioMatrix {
	if x != nil {
		return x.AudioMatrix
	}
	return nil
}

type AudioMatrixCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *AudioMatrixCfgSetReply) Reset() {
	*x = AudioMatrixCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMatrixCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMatrixCfgSetReply) ProtoMessage() {}

func (x *AudioMatrixCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMatrixCfgSetReply.ProtoReflect.Descriptor instead.
func (*AudioMatrixCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{39}
}

func (x *AudioMatrixCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DeviceFeatureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// 短路输入
	HasAlarmIn    bool `protobuf:"varint,2,opt,name=has_alarm_in,json=hasAlarmIn,proto3" json:"has_alarm_in,omitempty"`
	AlarmInEnable bool `protobuf:"varint,3,opt,name=alarm_in_enable,json=alarmInEnable,proto3" json:"alarm_in_enable,omitempty"`
	// 短路输出
	HasAlarmOut    bool `protobuf:"varint,4,opt,name=has_alarm_out,json=hasAlarmOut,proto3" json:"has_alarm_out,omitempty"`
	AlarmOutEnable bool `protobuf:"varint,5,opt,name=alarm_out_enable,json=alarmOutEnable,proto3" json:"alarm_out_enable,omitempty"`
	// 本地扩声
	HasLocalSpeech    bool `protobuf:"varint,6,opt,name=has_local_speech,json=hasLocalSpeech,proto3" json:"has_local_speech,omitempty"`
	LocalSpeechEnable bool `protobuf:"varint,7,opt,name=local_speech_enable,json=localSpeechEnable,proto3" json:"local_speech_enable,omitempty"`
	// 蓝牙播放
	HasBluetoothPlayer    bool `protobuf:"varint,8,opt,name=has_bluetooth_player,json=hasBluetoothPlayer,proto3" json:"has_bluetooth_player,omitempty"`
	BluetoothPlayerEnable bool `protobuf:"varint,9,opt,name=bluetooth_player_enable,json=bluetoothPlayerEnable,proto3" json:"bluetooth_player_enable,omitempty"`
	// 立体声
	HasStereo    bool `protobuf:"varint,10,opt,name=has_stereo,json=hasStereo,proto3" json:"has_stereo,omitempty"`
	StereoEnable bool `protobuf:"varint,11,opt,name=stereo_enable,json=stereoEnable,proto3" json:"stereo_enable,omitempty"`
	// 状态灯
	HasStatusLed    bool `protobuf:"varint,12,opt,name=has_status_led,json=hasStatusLed,proto3" json:"has_status_led,omitempty"`
	StatusLedEnable bool `protobuf:"varint,13,opt,name=status_led_enable,json=statusLedEnable,proto3" json:"status_led_enable,omitempty"`
	// 音频矩阵
	HasAudioMatrix    bool `protobuf:"varint,14,opt,name=has_audio_matrix,json=hasAudioMatrix,proto3" json:"has_audio_matrix,omitempty"`
	AudioMatrixEnable bool `protobuf:"varint,15,opt,name=audio_matrix_enable,json=audioMatrixEnable,proto3" json:"audio_matrix_enable,omitempty"`
	// 功放检测
	HasAmpCheck    bool `protobuf:"varint,16,opt,name=has_amp_check,json=hasAmpCheck,proto3" json:"has_amp_check,omitempty"`
	AmpCheckEnable bool `protobuf:"varint,17,opt,name=amp_check_enable,json=ampCheckEnable,proto3" json:"amp_check_enable,omitempty"`
	// 收音机
	HasRadio    bool `protobuf:"varint,18,opt,name=has_radio,json=hasRadio,proto3" json:"has_radio,omitempty"`
	RadioEnable bool `protobuf:"varint,19,opt,name=radio_enable,json=radioEnable,proto3" json:"radio_enable,omitempty"`
	// 功率配置
	HasDevicePowerCfg    bool `protobuf:"varint,20,opt,name=has_device_power_cfg,json=hasDevicePowerCfg,proto3" json:"has_device_power_cfg,omitempty"`
	DevicePowerCfgEnable bool `protobuf:"varint,21,opt,name=device_power_cfg_enable,json=devicePowerCfgEnable,proto3" json:"device_power_cfg_enable,omitempty"`
	// 文字推送
	HasTextPush    bool `protobuf:"varint,22,opt,name=has_text_push,json=hasTextPush,proto3" json:"has_text_push,omitempty"`
	TextPushEnable bool `protobuf:"varint,23,opt,name=text_push_enable,json=textPushEnable,proto3" json:"text_push_enable,omitempty"`
	// 调音台
	HasSoundConsole    bool `protobuf:"varint,24,opt,name=has_sound_console,json=hasSoundConsole,proto3" json:"has_sound_console,omitempty"`
	SoundConsoleEnable bool `protobuf:"varint,25,opt,name=sound_console_enable,json=soundConsoleEnable,proto3" json:"sound_console_enable,omitempty"`
	// 广播按键配置
	HasPagingKeyCfg    bool `protobuf:"varint,26,opt,name=has_paging_key_cfg,json=hasPagingKeyCfg,proto3" json:"has_paging_key_cfg,omitempty"`
	PagingKeyCfgEnable bool `protobuf:"varint,27,opt,name=paging_key_cfg_enable,json=pagingKeyCfgEnable,proto3" json:"paging_key_cfg_enable,omitempty"`
	// 是否支持mqtt
	HasMqtt    bool `protobuf:"varint,28,opt,name=has_mqtt,json=hasMqtt,proto3" json:"has_mqtt,omitempty"`
	MqttEnable bool `protobuf:"varint,29,opt,name=mqtt_enable,json=mqttEnable,proto3" json:"mqtt_enable,omitempty"`
}

func (x *DeviceFeatureList) Reset() {
	*x = DeviceFeatureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceFeatureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceFeatureList) ProtoMessage() {}

func (x *DeviceFeatureList) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceFeatureList.ProtoReflect.Descriptor instead.
func (*DeviceFeatureList) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{40}
}

func (x *DeviceFeatureList) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceFeatureList) GetHasAlarmIn() bool {
	if x != nil {
		return x.HasAlarmIn
	}
	return false
}

func (x *DeviceFeatureList) GetAlarmInEnable() bool {
	if x != nil {
		return x.AlarmInEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasAlarmOut() bool {
	if x != nil {
		return x.HasAlarmOut
	}
	return false
}

func (x *DeviceFeatureList) GetAlarmOutEnable() bool {
	if x != nil {
		return x.AlarmOutEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasLocalSpeech() bool {
	if x != nil {
		return x.HasLocalSpeech
	}
	return false
}

func (x *DeviceFeatureList) GetLocalSpeechEnable() bool {
	if x != nil {
		return x.LocalSpeechEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasBluetoothPlayer() bool {
	if x != nil {
		return x.HasBluetoothPlayer
	}
	return false
}

func (x *DeviceFeatureList) GetBluetoothPlayerEnable() bool {
	if x != nil {
		return x.BluetoothPlayerEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasStereo() bool {
	if x != nil {
		return x.HasStereo
	}
	return false
}

func (x *DeviceFeatureList) GetStereoEnable() bool {
	if x != nil {
		return x.StereoEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasStatusLed() bool {
	if x != nil {
		return x.HasStatusLed
	}
	return false
}

func (x *DeviceFeatureList) GetStatusLedEnable() bool {
	if x != nil {
		return x.StatusLedEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasAudioMatrix() bool {
	if x != nil {
		return x.HasAudioMatrix
	}
	return false
}

func (x *DeviceFeatureList) GetAudioMatrixEnable() bool {
	if x != nil {
		return x.AudioMatrixEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasAmpCheck() bool {
	if x != nil {
		return x.HasAmpCheck
	}
	return false
}

func (x *DeviceFeatureList) GetAmpCheckEnable() bool {
	if x != nil {
		return x.AmpCheckEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasRadio() bool {
	if x != nil {
		return x.HasRadio
	}
	return false
}

func (x *DeviceFeatureList) GetRadioEnable() bool {
	if x != nil {
		return x.RadioEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasDevicePowerCfg() bool {
	if x != nil {
		return x.HasDevicePowerCfg
	}
	return false
}

func (x *DeviceFeatureList) GetDevicePowerCfgEnable() bool {
	if x != nil {
		return x.DevicePowerCfgEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasTextPush() bool {
	if x != nil {
		return x.HasTextPush
	}
	return false
}

func (x *DeviceFeatureList) GetTextPushEnable() bool {
	if x != nil {
		return x.TextPushEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasSoundConsole() bool {
	if x != nil {
		return x.HasSoundConsole
	}
	return false
}

func (x *DeviceFeatureList) GetSoundConsoleEnable() bool {
	if x != nil {
		return x.SoundConsoleEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasPagingKeyCfg() bool {
	if x != nil {
		return x.HasPagingKeyCfg
	}
	return false
}

func (x *DeviceFeatureList) GetPagingKeyCfgEnable() bool {
	if x != nil {
		return x.PagingKeyCfgEnable
	}
	return false
}

func (x *DeviceFeatureList) GetHasMqtt() bool {
	if x != nil {
		return x.HasMqtt
	}
	return false
}

func (x *DeviceFeatureList) GetMqttEnable() bool {
	if x != nil {
		return x.MqttEnable
	}
	return false
}

type SpeakerVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume1        int32 `protobuf:"varint,1,opt,name=volume1,proto3" json:"volume1,omitempty"`
	Volume2        int32 `protobuf:"varint,2,opt,name=volume2,proto3" json:"volume2,omitempty"`
	Volume3        int32 `protobuf:"varint,3,opt,name=volume3,proto3" json:"volume3,omitempty"`
	Volume4        int32 `protobuf:"varint,4,opt,name=volume4,proto3" json:"volume4,omitempty"`
	Volume5        int32 `protobuf:"varint,5,opt,name=volume5,proto3" json:"volume5,omitempty"`
	Volume6        int32 `protobuf:"varint,6,opt,name=volume6,proto3" json:"volume6,omitempty"`
	MasterVolume   int32 `protobuf:"varint,7,opt,name=master_volume,json=masterVolume,proto3" json:"master_volume,omitempty"`
	LineinVolume   int32 `protobuf:"varint,8,opt,name=linein_volume,json=lineinVolume,proto3" json:"linein_volume,omitempty"`
	MicVolume      int32 `protobuf:"varint,9,opt,name=mic_volume,json=micVolume,proto3" json:"mic_volume,omitempty"`
	Lineout1Volume int32 `protobuf:"varint,10,opt,name=lineout1_volume,json=lineout1Volume,proto3" json:"lineout1_volume,omitempty"`
	Lineout2Volume int32 `protobuf:"varint,11,opt,name=lineout2_volume,json=lineout2Volume,proto3" json:"lineout2_volume,omitempty"`
}

func (x *SpeakerVolume) Reset() {
	*x = SpeakerVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerVolume) ProtoMessage() {}

func (x *SpeakerVolume) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerVolume.ProtoReflect.Descriptor instead.
func (*SpeakerVolume) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{41}
}

func (x *SpeakerVolume) GetVolume1() int32 {
	if x != nil {
		return x.Volume1
	}
	return 0
}

func (x *SpeakerVolume) GetVolume2() int32 {
	if x != nil {
		return x.Volume2
	}
	return 0
}

func (x *SpeakerVolume) GetVolume3() int32 {
	if x != nil {
		return x.Volume3
	}
	return 0
}

func (x *SpeakerVolume) GetVolume4() int32 {
	if x != nil {
		return x.Volume4
	}
	return 0
}

func (x *SpeakerVolume) GetVolume5() int32 {
	if x != nil {
		return x.Volume5
	}
	return 0
}

func (x *SpeakerVolume) GetVolume6() int32 {
	if x != nil {
		return x.Volume6
	}
	return 0
}

func (x *SpeakerVolume) GetMasterVolume() int32 {
	if x != nil {
		return x.MasterVolume
	}
	return 0
}

func (x *SpeakerVolume) GetLineinVolume() int32 {
	if x != nil {
		return x.LineinVolume
	}
	return 0
}

func (x *SpeakerVolume) GetMicVolume() int32 {
	if x != nil {
		return x.MicVolume
	}
	return 0
}

func (x *SpeakerVolume) GetLineout1Volume() int32 {
	if x != nil {
		return x.Lineout1Volume
	}
	return 0
}

func (x *SpeakerVolume) GetLineout2Volume() int32 {
	if x != nil {
		return x.Lineout2Volume
	}
	return 0
}

type EqCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq_75   int32 `protobuf:"varint,1,opt,name=eq_75,json=eq75,proto3" json:"eq_75,omitempty"`
	Eq_125  int32 `protobuf:"varint,2,opt,name=eq_125,json=eq125,proto3" json:"eq_125,omitempty"`
	Eq_250  int32 `protobuf:"varint,3,opt,name=eq_250,json=eq250,proto3" json:"eq_250,omitempty"`
	Eq_500  int32 `protobuf:"varint,4,opt,name=eq_500,json=eq500,proto3" json:"eq_500,omitempty"`
	Eq_1000 int32 `protobuf:"varint,5,opt,name=eq_1000,json=eq1000,proto3" json:"eq_1000,omitempty"`
	Eq_2000 int32 `protobuf:"varint,6,opt,name=eq_2000,json=eq2000,proto3" json:"eq_2000,omitempty"`
	Eq_4000 int32 `protobuf:"varint,7,opt,name=eq_4000,json=eq4000,proto3" json:"eq_4000,omitempty"`
	Eq_8000 int32 `protobuf:"varint,8,opt,name=eq_8000,json=eq8000,proto3" json:"eq_8000,omitempty"`
}

func (x *EqCfg) Reset() {
	*x = EqCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqCfg) ProtoMessage() {}

func (x *EqCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqCfg.ProtoReflect.Descriptor instead.
func (*EqCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{42}
}

func (x *EqCfg) GetEq_75() int32 {
	if x != nil {
		return x.Eq_75
	}
	return 0
}

func (x *EqCfg) GetEq_125() int32 {
	if x != nil {
		return x.Eq_125
	}
	return 0
}

func (x *EqCfg) GetEq_250() int32 {
	if x != nil {
		return x.Eq_250
	}
	return 0
}

func (x *EqCfg) GetEq_500() int32 {
	if x != nil {
		return x.Eq_500
	}
	return 0
}

func (x *EqCfg) GetEq_1000() int32 {
	if x != nil {
		return x.Eq_1000
	}
	return 0
}

func (x *EqCfg) GetEq_2000() int32 {
	if x != nil {
		return x.Eq_2000
	}
	return 0
}

func (x *EqCfg) GetEq_4000() int32 {
	if x != nil {
		return x.Eq_4000
	}
	return 0
}

func (x *EqCfg) GetEq_8000() int32 {
	if x != nil {
		return x.Eq_8000
	}
	return 0
}

// 设备信息
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 制造商
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// 产品名
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// 产品序列号
	ProductSerial string `protobuf:"bytes,3,opt,name=product_serial,json=productSerial,proto3" json:"product_serial,omitempty"`
	// 软件版本号
	SwVersion string `protobuf:"bytes,4,opt,name=sw_version,json=swVersion,proto3" json:"sw_version,omitempty"`
	// 功放类型（现用于保存单通道功率）
	PaType uint32 `protobuf:"varint,5,opt,name=pa_type,json=paType,proto3" json:"pa_type,omitempty"`
	// 设备温度
	Temperature uint32 `protobuf:"varint,6,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 总容量 (MB)
	TotalCapacity uint32 `protobuf:"varint,7,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	// 可用容量 (MB)
	AvailableCapacity uint32 `protobuf:"varint,8,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"`
	// 以太网mac地址
	EthMacAddr string `protobuf:"bytes,9,opt,name=eth_mac_addr,json=ethMacAddr,proto3" json:"eth_mac_addr,omitempty"`
	// wifi mac地址
	WifiMacAddr string `protobuf:"bytes,10,opt,name=wifi_mac_addr,json=wifiMacAddr,proto3" json:"wifi_mac_addr,omitempty"`
	// 设备名
	DeviceName string `protobuf:"bytes,11,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 设备别名
	DeviceAliase string `protobuf:"bytes,12,opt,name=device_aliase,json=deviceAliase,proto3" json:"device_aliase,omitempty"`
	// 设备是否上云
	LoginClound bool `protobuf:"varint,13,opt,name=login_clound,json=loginClound,proto3" json:"login_clound,omitempty"`
	// 网络配置信息
	Netcfg *NetCfg `protobuf:"bytes,14,opt,name=netcfg,proto3" json:"netcfg,omitempty"`
	// 输入通道
	InChannel *ChannelPack `protobuf:"bytes,15,opt,name=in_channel,json=inChannel,proto3" json:"in_channel,omitempty"`
	// 输出通道
	OutChannel *ChannelPack `protobuf:"bytes,16,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
	// 收音机频道
	RadioFreq *RadioFreqPack `protobuf:"bytes,19,opt,name=radio_freq,json=radioFreq,proto3" json:"radio_freq,omitempty"`
	// 绑定标志
	Bonded bool `protobuf:"varint,20,opt,name=bonded,proto3" json:"bonded,omitempty"`
	// 设备拥有者
	DeviceOwner string `protobuf:"bytes,21,opt,name=device_owner,json=deviceOwner,proto3" json:"device_owner,omitempty"`
	// 设备功率
	DevicePower *DevicePowerPack `protobuf:"bytes,22,opt,name=device_power,json=devicePower,proto3" json:"device_power,omitempty"`
	// 设备所属租户
	TenantId string `protobuf:"bytes,23,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 登录设备的用户名
	Username string `protobuf:"bytes,24,opt,name=username,proto3" json:"username,omitempty"`
	// 登录设备的密码
	Password string `protobuf:"bytes,25,opt,name=password,proto3" json:"password,omitempty"`
	// 杂项配置
	MiscCfg *MiscCfg `protobuf:"bytes,27,opt,name=misc_cfg,json=miscCfg,proto3" json:"misc_cfg,omitempty"`
	// 扩声配置
	SpeechCfg *SpeechCfg `protobuf:"bytes,28,opt,name=speech_cfg,json=speechCfg,proto3" json:"speech_cfg,omitempty"`
	// 蓝牙配置
	BluetoothCfg *BluetoothCfg `protobuf:"bytes,29,opt,name=bluetooth_cfg,json=bluetoothCfg,proto3" json:"bluetooth_cfg,omitempty"`
	// 生产SN号
	Sn string `protobuf:"bytes,30,opt,name=sn,proto3" json:"sn,omitempty"`
	// 蓝牙白名单列表
	BluetoothWhitelist *BluetoothWhitelistPack `protobuf:"bytes,31,opt,name=bluetooth_whitelist,json=bluetoothWhitelist,proto3" json:"bluetooth_whitelist,omitempty"`
	// 与app id进行绑定
	AppIdBond string `protobuf:"bytes,32,opt,name=app_id_bond,json=appIdBond,proto3" json:"app_id_bond,omitempty"`
	// 报警输入数目
	AlarmInCount uint32 `protobuf:"varint,33,opt,name=alarm_in_count,json=alarmInCount,proto3" json:"alarm_in_count,omitempty"`
	// 音频矩阵
	AudioMatrix *AudioMatrix `protobuf:"bytes,34,opt,name=audio_matrix,json=audioMatrix,proto3" json:"audio_matrix,omitempty"`
	// 扩展板配置
	ExtendBoards *ExtendBoardPack `protobuf:"bytes,36,opt,name=extend_boards,json=extendBoards,proto3" json:"extend_boards,omitempty"`
	// 报警输出配置
	AlarmOutCfg     *AlarmOutCfg `protobuf:"bytes,37,opt,name=alarm_out_cfg,json=alarmOutCfg,proto3" json:"alarm_out_cfg,omitempty"`
	GatewayTenantId string       `protobuf:"bytes,38,opt,name=gateway_tenant_id,json=gatewayTenantId,proto3" json:"gateway_tenant_id,omitempty"`
	// 设备功能列表
	FeatureList *DeviceFeatureList `protobuf:"bytes,500,opt,name=feature_list,json=featureList,proto3" json:"feature_list,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{43}
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DeviceInfo) GetProductSerial() string {
	if x != nil {
		return x.ProductSerial
	}
	return ""
}

func (x *DeviceInfo) GetSwVersion() string {
	if x != nil {
		return x.SwVersion
	}
	return ""
}

func (x *DeviceInfo) GetPaType() uint32 {
	if x != nil {
		return x.PaType
	}
	return 0
}

func (x *DeviceInfo) GetTemperature() uint32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *DeviceInfo) GetTotalCapacity() uint32 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

func (x *DeviceInfo) GetAvailableCapacity() uint32 {
	if x != nil {
		return x.AvailableCapacity
	}
	return 0
}

func (x *DeviceInfo) GetEthMacAddr() string {
	if x != nil {
		return x.EthMacAddr
	}
	return ""
}

func (x *DeviceInfo) GetWifiMacAddr() string {
	if x != nil {
		return x.WifiMacAddr
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetDeviceAliase() string {
	if x != nil {
		return x.DeviceAliase
	}
	return ""
}

func (x *DeviceInfo) GetLoginClound() bool {
	if x != nil {
		return x.LoginClound
	}
	return false
}

func (x *DeviceInfo) GetNetcfg() *NetCfg {
	if x != nil {
		return x.Netcfg
	}
	return nil
}

func (x *DeviceInfo) GetInChannel() *ChannelPack {
	if x != nil {
		return x.InChannel
	}
	return nil
}

func (x *DeviceInfo) GetOutChannel() *ChannelPack {
	if x != nil {
		return x.OutChannel
	}
	return nil
}

func (x *DeviceInfo) GetRadioFreq() *RadioFreqPack {
	if x != nil {
		return x.RadioFreq
	}
	return nil
}

func (x *DeviceInfo) GetBonded() bool {
	if x != nil {
		return x.Bonded
	}
	return false
}

func (x *DeviceInfo) GetDeviceOwner() string {
	if x != nil {
		return x.DeviceOwner
	}
	return ""
}

func (x *DeviceInfo) GetDevicePower() *DevicePowerPack {
	if x != nil {
		return x.DevicePower
	}
	return nil
}

func (x *DeviceInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeviceInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeviceInfo) GetMiscCfg() *MiscCfg {
	if x != nil {
		return x.MiscCfg
	}
	return nil
}

func (x *DeviceInfo) GetSpeechCfg() *SpeechCfg {
	if x != nil {
		return x.SpeechCfg
	}
	return nil
}

func (x *DeviceInfo) GetBluetoothCfg() *BluetoothCfg {
	if x != nil {
		return x.BluetoothCfg
	}
	return nil
}

func (x *DeviceInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DeviceInfo) GetBluetoothWhitelist() *BluetoothWhitelistPack {
	if x != nil {
		return x.BluetoothWhitelist
	}
	return nil
}

func (x *DeviceInfo) GetAppIdBond() string {
	if x != nil {
		return x.AppIdBond
	}
	return ""
}

func (x *DeviceInfo) GetAlarmInCount() uint32 {
	if x != nil {
		return x.AlarmInCount
	}
	return 0
}

func (x *DeviceInfo) GetAudioMatrix() *AudioMatrix {
	if x != nil {
		return x.AudioMatrix
	}
	return nil
}

func (x *DeviceInfo) GetExtendBoards() *ExtendBoardPack {
	if x != nil {
		return x.ExtendBoards
	}
	return nil
}

func (x *DeviceInfo) GetAlarmOutCfg() *AlarmOutCfg {
	if x != nil {
		return x.AlarmOutCfg
	}
	return nil
}

func (x *DeviceInfo) GetGatewayTenantId() string {
	if x != nil {
		return x.GatewayTenantId
	}
	return ""
}

func (x *DeviceInfo) GetFeatureList() *DeviceFeatureList {
	if x != nil {
		return x.FeatureList
	}
	return nil
}

// 获取设备信息
type DeviceInfoGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *DeviceInfoGet) Reset() {
	*x = DeviceInfoGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoGet) ProtoMessage() {}

func (x *DeviceInfoGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoGet.ProtoReflect.Descriptor instead.
func (*DeviceInfoGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{44}
}

func (x *DeviceInfoGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DeviceInfoGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status      `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Info   *DeviceInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DeviceInfoGetReply) Reset() {
	*x = DeviceInfoGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoGetReply) ProtoMessage() {}

func (x *DeviceInfoGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoGetReply.ProtoReflect.Descriptor instead.
func (*DeviceInfoGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{45}
}

func (x *DeviceInfoGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *DeviceInfoGetReply) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// 设置设备信息
type DeviceInfoSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Info     *DeviceInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DeviceInfoSet) Reset() {
	*x = DeviceInfoSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoSet) ProtoMessage() {}

func (x *DeviceInfoSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoSet.ProtoReflect.Descriptor instead.
func (*DeviceInfoSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{46}
}

func (x *DeviceInfoSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfoSet) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeviceInfoSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DeviceInfoSetReply) Reset() {
	*x = DeviceInfoSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoSetReply) ProtoMessage() {}

func (x *DeviceInfoSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoSetReply.ProtoReflect.Descriptor instead.
func (*DeviceInfoSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{47}
}

func (x *DeviceInfoSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type IntelligentizeTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 智能任务名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 智能任务的唯一标识符
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 智能任务下task任务uuid列表   1,2,3
	TaskUuid string `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	// 任务创建时间
	CreateDate string `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	// 任务创建人
	CreateUser string `protobuf:"bytes,5,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	// 任务编辑人
	EditUser string `protobuf:"bytes,6,opt,name=edit_user,json=editUser,proto3" json:"edit_user,omitempty"`
	// 任务编辑时间
	EditDate string `protobuf:"bytes,7,opt,name=edit_date,json=editDate,proto3" json:"edit_date,omitempty"`
	// 当前智能模块所属预案目录
	Directory string `protobuf:"bytes,8,opt,name=directory,proto3" json:"directory,omitempty"`
	// 当前智能任务类型
	TaskType TaskType `protobuf:"varint,9,opt,name=task_type,json=taskType,proto3,enum=proto.TaskType" json:"task_type,omitempty"`
}

func (x *IntelligentizeTask) Reset() {
	*x = IntelligentizeTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelligentizeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelligentizeTask) ProtoMessage() {}

func (x *IntelligentizeTask) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelligentizeTask.ProtoReflect.Descriptor instead.
func (*IntelligentizeTask) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{48}
}

func (x *IntelligentizeTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IntelligentizeTask) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *IntelligentizeTask) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *IntelligentizeTask) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *IntelligentizeTask) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *IntelligentizeTask) GetEditUser() string {
	if x != nil {
		return x.EditUser
	}
	return ""
}

func (x *IntelligentizeTask) GetEditDate() string {
	if x != nil {
		return x.EditDate
	}
	return ""
}

func (x *IntelligentizeTask) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *IntelligentizeTask) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_SCHEDULE_TASK
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务所属用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 任务名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 任务的唯一标识符
	Uuid string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 任务优先级 (1、2、3)
	Priority int32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// 音源
	Source AudioSource `protobuf:"varint,5,opt,name=source,proto3,enum=proto.AudioSource" json:"source,omitempty"`
	// 音频文件列表
	Songs string `protobuf:"bytes,6,opt,name=songs,proto3" json:"songs,omitempty"`
	// 输入通道列表 (1,2)
	InChannel string `protobuf:"bytes,7,opt,name=in_channel,json=inChannel,proto3" json:"in_channel,omitempty"`
	// 输出通道列表 (1,2)
	OutChannel string `protobuf:"bytes,9,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
	// 任务开始时间 (2020-05-20 11:05:00)
	StartDate string `protobuf:"bytes,10,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// 任务结束时间
	EndDate string `protobuf:"bytes,11,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// 任务重复方式
	Repeat RepeatType `protobuf:"varint,12,opt,name=repeat,proto3,enum=proto.RepeatType" json:"repeat,omitempty"`
	// 一周中的哪几天重复
	Wday string `protobuf:"bytes,13,opt,name=wday,proto3" json:"wday,omitempty"`
	// 任务是否正在运行
	Running bool `protobuf:"varint,14,opt,name=running,proto3" json:"running,omitempty"`
	// 任务不执行的时间点
	IgnoreDate string `protobuf:"bytes,15,opt,name=ignore_date,json=ignoreDate,proto3" json:"ignore_date,omitempty"`
	// 任务仅允许手动执行
	ManualOnly bool `protobuf:"varint,16,opt,name=manual_only,json=manualOnly,proto3" json:"manual_only,omitempty"`
	// 网络拉流地址
	StreamPullUrl string `protobuf:"bytes,17,opt,name=stream_pull_url,json=streamPullUrl,proto3" json:"stream_pull_url,omitempty"`
	// 任务创建时间
	CreateDate string `protobuf:"bytes,18,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	// 音频播放循环次数
	CyclicTimes uint32 `protobuf:"varint,19,opt,name=cyclic_times,json=cyclicTimes,proto3" json:"cyclic_times,omitempty"`
	// 调音台总音量或者任务微调音量
	MasterVolume int32 `protobuf:"varint,20,opt,name=master_volume,json=masterVolume,proto3" json:"master_volume,omitempty"`
	// 任务类型
	TaskType TaskType `protobuf:"varint,21,opt,name=task_type,json=taskType,proto3,enum=proto.TaskType" json:"task_type,omitempty"`
	// 代理服务ip
	ProxyServerIp string `protobuf:"bytes,22,opt,name=proxy_server_ip,json=proxyServerIp,proto3" json:"proxy_server_ip,omitempty"`
	// 代理服务端口
	ProxyServerPort uint32 `protobuf:"varint,23,opt,name=proxy_server_port,json=proxyServerPort,proto3" json:"proxy_server_port,omitempty"`
	// 采样率
	Samplerate uint32 `protobuf:"varint,24,opt,name=samplerate,proto3" json:"samplerate,omitempty"`
	// 时延，即每包数据长度
	Latency uint32 `protobuf:"varint,25,opt,name=latency,proto3" json:"latency,omitempty"`
	// 语音音量
	VoiceVolume uint32 `protobuf:"varint,26,opt,name=voice_volume,json=voiceVolume,proto3" json:"voice_volume,omitempty"`
	// 音频音量
	SongVolume uint32 `protobuf:"varint,27,opt,name=song_volume,json=songVolume,proto3" json:"song_volume,omitempty"`
	// 文本
	Text string `protobuf:"bytes,28,opt,name=text,proto3" json:"text,omitempty"`
	// 任务创建人
	CreateUser string `protobuf:"bytes,29,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	// 任务编辑人
	EditUser string `protobuf:"bytes,30,opt,name=edit_user,json=editUser,proto3" json:"edit_user,omitempty"`
	// 任务编辑时间
	EditDate string `protobuf:"bytes,31,opt,name=edit_date,json=editDate,proto3" json:"edit_date,omitempty"`
	// 背景音源
	Background AudioSource `protobuf:"varint,32,opt,name=background,proto3,enum=proto.AudioSource" json:"background,omitempty"`
	// 任务持续播放时长
	Duration uint32 `protobuf:"varint,33,opt,name=duration,proto3" json:"duration,omitempty"`
	// 文字显示方式
	TextDisplayStyle TEXT_DISPLAY_STYLE `protobuf:"varint,34,opt,name=text_display_style,json=textDisplayStyle,proto3,enum=proto.TEXT_DISPLAY_STYLE" json:"text_display_style,omitempty"`
	// 文字显示速度
	TextDisplaySpeed TEXT_DISPLAY_SPEED `protobuf:"varint,35,opt,name=text_display_speed,json=textDisplaySpeed,proto3,enum=proto.TEXT_DISPLAY_SPEED" json:"text_display_speed,omitempty"`
	// 文字显示持续时间（分钟）
	TextDisplayDuration uint32 `protobuf:"varint,36,opt,name=text_display_duration,json=textDisplayDuration,proto3" json:"text_display_duration,omitempty"`
	// 任务所属智能任务
	IntelligentizeUuid string `protobuf:"bytes,37,opt,name=intelligentize_uuid,json=intelligentizeUuid,proto3" json:"intelligentize_uuid,omitempty"`
	// 任务播放时间
	PlayTime uint64 `protobuf:"varint,38,opt,name=play_time,json=playTime,proto3" json:"play_time,omitempty"`
	// 报警输入配置
	AlarmIn *AlarmIn `protobuf:"bytes,40,opt,name=alarm_in,json=alarmIn,proto3" json:"alarm_in,omitempty"`
	// 任务间隔时间
	Interval uint32 `protobuf:"varint,41,opt,name=interval,proto3" json:"interval,omitempty"`
	// 网络推流地址
	// udp://47.106.237.146:7105
	StreamPushUrl string `protobuf:"bytes,42,opt,name=stream_push_url,json=streamPushUrl,proto3" json:"stream_push_url,omitempty"`
	// 分区
	OutArea string `protobuf:"bytes,43,opt,name=out_area,json=outArea,proto3" json:"out_area,omitempty"`
	// 歌曲播放方式
	SongPlayType SongPlayType `protobuf:"varint,44,opt,name=song_play_type,json=songPlayType,proto3,enum=proto.SongPlayType" json:"song_play_type,omitempty"`
	PaStreamType PaStreamType `protobuf:"varint,45,opt,name=pa_stream_type,json=paStreamType,proto3,enum=proto.PaStreamType" json:"pa_stream_type,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{49}
}

func (x *Task) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Task) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Task) GetSource() AudioSource {
	if x != nil {
		return x.Source
	}
	return AudioSource_SONG
}

func (x *Task) GetSongs() string {
	if x != nil {
		return x.Songs
	}
	return ""
}

func (x *Task) GetInChannel() string {
	if x != nil {
		return x.InChannel
	}
	return ""
}

func (x *Task) GetOutChannel() string {
	if x != nil {
		return x.OutChannel
	}
	return ""
}

func (x *Task) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Task) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Task) GetRepeat() RepeatType {
	if x != nil {
		return x.Repeat
	}
	return RepeatType_REPEAT_NONE
}

func (x *Task) GetWday() string {
	if x != nil {
		return x.Wday
	}
	return ""
}

func (x *Task) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *Task) GetIgnoreDate() string {
	if x != nil {
		return x.IgnoreDate
	}
	return ""
}

func (x *Task) GetManualOnly() bool {
	if x != nil {
		return x.ManualOnly
	}
	return false
}

func (x *Task) GetStreamPullUrl() string {
	if x != nil {
		return x.StreamPullUrl
	}
	return ""
}

func (x *Task) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *Task) GetCyclicTimes() uint32 {
	if x != nil {
		return x.CyclicTimes
	}
	return 0
}

func (x *Task) GetMasterVolume() int32 {
	if x != nil {
		return x.MasterVolume
	}
	return 0
}

func (x *Task) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_SCHEDULE_TASK
}

func (x *Task) GetProxyServerIp() string {
	if x != nil {
		return x.ProxyServerIp
	}
	return ""
}

func (x *Task) GetProxyServerPort() uint32 {
	if x != nil {
		return x.ProxyServerPort
	}
	return 0
}

func (x *Task) GetSamplerate() uint32 {
	if x != nil {
		return x.Samplerate
	}
	return 0
}

func (x *Task) GetLatency() uint32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *Task) GetVoiceVolume() uint32 {
	if x != nil {
		return x.VoiceVolume
	}
	return 0
}

func (x *Task) GetSongVolume() uint32 {
	if x != nil {
		return x.SongVolume
	}
	return 0
}

func (x *Task) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Task) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *Task) GetEditUser() string {
	if x != nil {
		return x.EditUser
	}
	return ""
}

func (x *Task) GetEditDate() string {
	if x != nil {
		return x.EditDate
	}
	return ""
}

func (x *Task) GetBackground() AudioSource {
	if x != nil {
		return x.Background
	}
	return AudioSource_SONG
}

func (x *Task) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Task) GetTextDisplayStyle() TEXT_DISPLAY_STYLE {
	if x != nil {
		return x.TextDisplayStyle
	}
	return TEXT_DISPLAY_STYLE_STATIC
}

func (x *Task) GetTextDisplaySpeed() TEXT_DISPLAY_SPEED {
	if x != nil {
		return x.TextDisplaySpeed
	}
	return TEXT_DISPLAY_SPEED_LOW
}

func (x *Task) GetTextDisplayDuration() uint32 {
	if x != nil {
		return x.TextDisplayDuration
	}
	return 0
}

func (x *Task) GetIntelligentizeUuid() string {
	if x != nil {
		return x.IntelligentizeUuid
	}
	return ""
}

func (x *Task) GetPlayTime() uint64 {
	if x != nil {
		return x.PlayTime
	}
	return 0
}

func (x *Task) GetAlarmIn() *AlarmIn {
	if x != nil {
		return x.AlarmIn
	}
	return nil
}

func (x *Task) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Task) GetStreamPushUrl() string {
	if x != nil {
		return x.StreamPushUrl
	}
	return ""
}

func (x *Task) GetOutArea() string {
	if x != nil {
		return x.OutArea
	}
	return ""
}

func (x *Task) GetSongPlayType() SongPlayType {
	if x != nil {
		return x.SongPlayType
	}
	return SongPlayType_ORDER_PLAY
}

func (x *Task) GetPaStreamType() PaStreamType {
	if x != nil {
		return x.PaStreamType
	}
	return PaStreamType_LOCAL_LOW
}

// 任务开始
type TaskStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Task     *Task  `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskStart) Reset() {
	*x = TaskStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStart) ProtoMessage() {}

func (x *TaskStart) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStart.ProtoReflect.Descriptor instead.
func (*TaskStart) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{50}
}

func (x *TaskStart) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskStart) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskStartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskStartReply) Reset() {
	*x = TaskStartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStartReply) ProtoMessage() {}

func (x *TaskStartReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStartReply.ProtoReflect.Descriptor instead.
func (*TaskStartReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{51}
}

func (x *TaskStartReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *TaskStartReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 任务结束
type TaskStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Uuid     string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TaskType TaskType `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=proto.TaskType" json:"task_type,omitempty"`
}

func (x *TaskStop) Reset() {
	*x = TaskStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStop) ProtoMessage() {}

func (x *TaskStop) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStop.ProtoReflect.Descriptor instead.
func (*TaskStop) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{52}
}

func (x *TaskStop) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskStop) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskStop) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_SCHEDULE_TASK
}

type TaskStopReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskStopReply) Reset() {
	*x = TaskStopReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStopReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStopReply) ProtoMessage() {}

func (x *TaskStopReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStopReply.ProtoReflect.Descriptor instead.
func (*TaskStopReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{53}
}

func (x *TaskStopReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *TaskStopReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 获取任务列表
type TaskGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TaskGet) Reset() {
	*x = TaskGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGet) ProtoMessage() {}

func (x *TaskGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGet.ProtoReflect.Descriptor instead.
func (*TaskGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{54}
}

func (x *TaskGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TaskGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task []*Task `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskGetReply) Reset() {
	*x = TaskGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGetReply) ProtoMessage() {}

func (x *TaskGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGetReply.ProtoReflect.Descriptor instead.
func (*TaskGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{55}
}

func (x *TaskGetReply) GetTask() []*Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// 添加任务
type TaskAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Task     *Task  `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskAdd) Reset() {
	*x = TaskAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAdd) ProtoMessage() {}

func (x *TaskAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAdd.ProtoReflect.Descriptor instead.
func (*TaskAdd) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{56}
}

func (x *TaskAdd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskAdd) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	// 任务成功添加后返回任务的uuid
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskAddReply) Reset() {
	*x = TaskAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAddReply) ProtoMessage() {}

func (x *TaskAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAddReply.ProtoReflect.Descriptor instead.
func (*TaskAddReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{57}
}

func (x *TaskAddReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *TaskAddReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 编辑任务
type TaskEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Task     *Task  `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskEdit) Reset() {
	*x = TaskEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEdit) ProtoMessage() {}

func (x *TaskEdit) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEdit.ProtoReflect.Descriptor instead.
func (*TaskEdit) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{58}
}

func (x *TaskEdit) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskEdit) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskEditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskEditReply) Reset() {
	*x = TaskEditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEditReply) ProtoMessage() {}

func (x *TaskEditReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEditReply.ProtoReflect.Descriptor instead.
func (*TaskEditReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{59}
}

func (x *TaskEditReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 任务删除
type TaskDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskDelete) Reset() {
	*x = TaskDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDelete) ProtoMessage() {}

func (x *TaskDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDelete.ProtoReflect.Descriptor instead.
func (*TaskDelete) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{60}
}

func (x *TaskDelete) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskDelete) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type TaskDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskDeleteReply) Reset() {
	*x = TaskDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteReply) ProtoMessage() {}

func (x *TaskDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteReply.ProtoReflect.Descriptor instead.
func (*TaskDeleteReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{61}
}

func (x *TaskDeleteReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 任务忽略执行
type TaskIgnore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 任务uuid
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 排除执行的时间点
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// 忽略或者解除忽略执行
	Ignore bool `protobuf:"varint,4,opt,name=ignore,proto3" json:"ignore,omitempty"`
}

func (x *TaskIgnore) Reset() {
	*x = TaskIgnore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIgnore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIgnore) ProtoMessage() {}

func (x *TaskIgnore) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIgnore.ProtoReflect.Descriptor instead.
func (*TaskIgnore) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{62}
}

func (x *TaskIgnore) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskIgnore) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskIgnore) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TaskIgnore) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

type TaskIgnoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskIgnoreReply) Reset() {
	*x = TaskIgnoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIgnoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIgnoreReply) ProtoMessage() {}

func (x *TaskIgnoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIgnoreReply.ProtoReflect.Descriptor instead.
func (*TaskIgnoreReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{63}
}

func (x *TaskIgnoreReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 获取任务的忽略执行时间点
type TaskIgnoreDateGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 任务uuid
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TaskIgnoreDateGet) Reset() {
	*x = TaskIgnoreDateGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIgnoreDateGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIgnoreDateGet) ProtoMessage() {}

func (x *TaskIgnoreDateGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIgnoreDateGet.ProtoReflect.Descriptor instead.
func (*TaskIgnoreDateGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{64}
}

func (x *TaskIgnoreDateGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskIgnoreDateGet) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type TaskIgnoreDateGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	// 忽略执行的时间点（2019-09-08）
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *TaskIgnoreDateGetReply) Reset() {
	*x = TaskIgnoreDateGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIgnoreDateGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIgnoreDateGetReply) ProtoMessage() {}

func (x *TaskIgnoreDateGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIgnoreDateGetReply.ProtoReflect.Descriptor instead.
func (*TaskIgnoreDateGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{65}
}

func (x *TaskIgnoreDateGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *TaskIgnoreDateGetReply) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// 获取任务执行日志
type GetLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Type     LogType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.LogType" json:"type,omitempty"`
	// 任务的uuid
	TaskUuid string `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	// 请求日志条数
	Count uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// 日志起始位置
	Start uint32 `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *GetLog) Reset() {
	*x = GetLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLog) ProtoMessage() {}

func (x *GetLog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLog.ProtoReflect.Descriptor instead.
func (*GetLog) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{66}
}

func (x *GetLog) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetLog) GetType() LogType {
	if x != nil {
		return x.Type
	}
	return LogType_ALL
}

func (x *GetLog) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *GetLog) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetLog) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 日志内容
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{67}
}

func (x *Log) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status  `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Log    []*Log  `protobuf:"bytes,2,rep,name=log,proto3" json:"log,omitempty"`
	Type   LogType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.LogType" json:"type,omitempty"`
	// 日志总条数
	Total uint32 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	// 当前返回的日志条数
	Count uint32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	// 当前返回的日志起始位置
	Start uint32 `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *GetLogReply) Reset() {
	*x = GetLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogReply) ProtoMessage() {}

func (x *GetLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogReply.ProtoReflect.Descriptor instead.
func (*GetLogReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{68}
}

func (x *GetLogReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *GetLogReply) GetLog() []*Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *GetLogReply) GetType() LogType {
	if x != nil {
		return x.Type
	}
	return LogType_ALL
}

func (x *GetLogReply) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetLogReply) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetLogReply) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

// 获取歌曲列表
type SongGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SongGet) Reset() {
	*x = SongGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongGet) ProtoMessage() {}

func (x *SongGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongGet.ProtoReflect.Descriptor instead.
func (*SongGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{69}
}

func (x *SongGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Song struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 歌曲名
	Song string `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
	// 路径
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// 文件的播放时长(MS)
	Duration uint32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// 文件长度
	Length uint64 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Song) Reset() {
	*x = Song{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Song) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Song) ProtoMessage() {}

func (x *Song) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Song.ProtoReflect.Descriptor instead.
func (*Song) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{70}
}

func (x *Song) GetSong() string {
	if x != nil {
		return x.Song
	}
	return ""
}

func (x *Song) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Song) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Song) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type SongGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status    `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Songs  *SongPack `protobuf:"bytes,2,opt,name=songs,proto3" json:"songs,omitempty"`
}

func (x *SongGetReply) Reset() {
	*x = SongGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongGetReply) ProtoMessage() {}

func (x *SongGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongGetReply.ProtoReflect.Descriptor instead.
func (*SongGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{71}
}

func (x *SongGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *SongGetReply) GetSongs() *SongPack {
	if x != nil {
		return x.Songs
	}
	return nil
}

// 文件上传
type FileUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 文件名
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// 文件数据开始传送
	Start bool `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// 文件数据结束传送
	End bool `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// 文件数据
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// 是否u盘文件，如果是u盘文件，filename需要为全路径，start、end、data不需要赋值。
	Udisk    bool     `protobuf:"varint,6,opt,name=udisk,proto3" json:"udisk,omitempty"`
	Filetype FileType `protobuf:"varint,7,opt,name=filetype,proto3,enum=proto.FileType" json:"filetype,omitempty"`
}

func (x *FileUpload) Reset() {
	*x = FileUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUpload) ProtoMessage() {}

func (x *FileUpload) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUpload.ProtoReflect.Descriptor instead.
func (*FileUpload) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{72}
}

func (x *FileUpload) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FileUpload) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileUpload) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *FileUpload) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

func (x *FileUpload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileUpload) GetUdisk() bool {
	if x != nil {
		return x.Udisk
	}
	return false
}

func (x *FileUpload) GetFiletype() FileType {
	if x != nil {
		return x.Filetype
	}
	return FileType_FILE_SONG
}

type FileUploadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *FileUploadReply) Reset() {
	*x = FileUploadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadReply) ProtoMessage() {}

func (x *FileUploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadReply.ProtoReflect.Descriptor instead.
func (*FileUploadReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{73}
}

func (x *FileUploadReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 删除歌曲
type SongDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 歌曲路径
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SongDelete) Reset() {
	*x = SongDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongDelete) ProtoMessage() {}

func (x *SongDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongDelete.ProtoReflect.Descriptor instead.
func (*SongDelete) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{74}
}

func (x *SongDelete) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SongDelete) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SongDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SongDeleteReply) Reset() {
	*x = SongDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongDeleteReply) ProtoMessage() {}

func (x *SongDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongDeleteReply.ProtoReflect.Descriptor instead.
func (*SongDeleteReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{75}
}

func (x *SongDeleteReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 获取u盘歌曲列表
type UdiskSongGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UdiskSongGet) Reset() {
	*x = UdiskSongGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdiskSongGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdiskSongGet) ProtoMessage() {}

func (x *UdiskSongGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdiskSongGet.ProtoReflect.Descriptor instead.
func (*UdiskSongGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{76}
}

func (x *UdiskSongGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type UdiskSongGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status  `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Songs  []*Song `protobuf:"bytes,2,rep,name=songs,proto3" json:"songs,omitempty"`
}

func (x *UdiskSongGetReply) Reset() {
	*x = UdiskSongGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdiskSongGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdiskSongGetReply) ProtoMessage() {}

func (x *UdiskSongGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdiskSongGetReply.ProtoReflect.Descriptor instead.
func (*UdiskSongGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{77}
}

func (x *UdiskSongGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *UdiskSongGetReply) GetSongs() []*Song {
	if x != nil {
		return x.Songs
	}
	return nil
}

// 广播提示音
type PaNotificationTone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 广播提示音使能
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 广播开始提示音
	StartTone string `protobuf:"bytes,2,opt,name=start_tone,json=startTone,proto3" json:"start_tone,omitempty"`
	// 广播结束提示音
	EndTone string `protobuf:"bytes,3,opt,name=end_tone,json=endTone,proto3" json:"end_tone,omitempty"`
	// 广播提示音音量
	ToneVolume uint32 `protobuf:"varint,4,opt,name=tone_volume,json=toneVolume,proto3" json:"tone_volume,omitempty"`
}

func (x *PaNotificationTone) Reset() {
	*x = PaNotificationTone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaNotificationTone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaNotificationTone) ProtoMessage() {}

func (x *PaNotificationTone) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaNotificationTone.ProtoReflect.Descriptor instead.
func (*PaNotificationTone) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{78}
}

func (x *PaNotificationTone) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PaNotificationTone) GetStartTone() string {
	if x != nil {
		return x.StartTone
	}
	return ""
}

func (x *PaNotificationTone) GetEndTone() string {
	if x != nil {
		return x.EndTone
	}
	return ""
}

func (x *PaNotificationTone) GetToneVolume() uint32 {
	if x != nil {
		return x.ToneVolume
	}
	return 0
}

// 通道属性
type ChannelAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通道别名 - 共有属性
	Aliase string `protobuf:"bytes,1,opt,name=aliase,proto3" json:"aliase,omitempty"`
	// 呈现给用户的通道id号（1、2、3、4) - 共有属性
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 通道的音量等级（0~15) - 共有属性
	Volume uint32 `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	// 通道的真实id，对应硬件上的id - 共有属性
	Realid uint32 `protobuf:"varint,4,opt,name=realid,proto3" json:"realid,omitempty"`
	// 是否有负载 - 输出通道属性
	Load bool `protobuf:"varint,6,opt,name=load,proto3" json:"load,omitempty"`
	// 通道是否损坏 - 输出通道属性
	Broken bool `protobuf:"varint,7,opt,name=broken,proto3" json:"broken,omitempty"`
	// 通道是否切换到备用通道 - 输出通道属性
	Backup bool `protobuf:"varint,8,opt,name=backup,proto3" json:"backup,omitempty"`
	// 通道当前功率 - 输出通道属性
	Power float32 `protobuf:"fixed32,9,opt,name=power,proto3" json:"power,omitempty"`
	// 是否分配了功率（NXT2204第四通道） - 输出通道属性
	WithPower bool `protobuf:"varint,10,opt,name=with_power,json=withPower,proto3" json:"with_power,omitempty"`
	// rtsp端口 - 输入通道属性
	RtspPort uint32 `protobuf:"varint,11,opt,name=rtsp_port,json=rtspPort,proto3" json:"rtsp_port,omitempty"`
	// rtsp通道号 - 输入通道属性
	RtspCh uint32 `protobuf:"varint,12,opt,name=rtsp_ch,json=rtspCh,proto3" json:"rtsp_ch,omitempty"`
	// 忽略，不显示出来 - 共有属性
	Ignore bool `protobuf:"varint,13,opt,name=ignore,proto3" json:"ignore,omitempty"`
	// 是否静音 - 调音台通道属性
	Mute bool `protobuf:"varint,14,opt,name=mute,proto3" json:"mute,omitempty"`
	// 广播提示音 - 调音台通道属性
	PaNotificationTone *PaNotificationTone `protobuf:"bytes,15,opt,name=pa_notification_tone,json=paNotificationTone,proto3" json:"pa_notification_tone,omitempty"`
	// 广播流类型 - 调音台通道属性
	PaStreamType PaStreamType `protobuf:"varint,16,opt,name=pa_stream_type,json=paStreamType,proto3,enum=proto.PaStreamType" json:"pa_stream_type,omitempty"`
}

func (x *ChannelAttr) Reset() {
	*x = ChannelAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAttr) ProtoMessage() {}

func (x *ChannelAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAttr.ProtoReflect.Descriptor instead.
func (*ChannelAttr) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{79}
}

func (x *ChannelAttr) GetAliase() string {
	if x != nil {
		return x.Aliase
	}
	return ""
}

func (x *ChannelAttr) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelAttr) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ChannelAttr) GetRealid() uint32 {
	if x != nil {
		return x.Realid
	}
	return 0
}

func (x *ChannelAttr) GetLoad() bool {
	if x != nil {
		return x.Load
	}
	return false
}

func (x *ChannelAttr) GetBroken() bool {
	if x != nil {
		return x.Broken
	}
	return false
}

func (x *ChannelAttr) GetBackup() bool {
	if x != nil {
		return x.Backup
	}
	return false
}

func (x *ChannelAttr) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ChannelAttr) GetWithPower() bool {
	if x != nil {
		return x.WithPower
	}
	return false
}

func (x *ChannelAttr) GetRtspPort() uint32 {
	if x != nil {
		return x.RtspPort
	}
	return 0
}

func (x *ChannelAttr) GetRtspCh() uint32 {
	if x != nil {
		return x.RtspCh
	}
	return 0
}

func (x *ChannelAttr) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

func (x *ChannelAttr) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *ChannelAttr) GetPaNotificationTone() *PaNotificationTone {
	if x != nil {
		return x.PaNotificationTone
	}
	return nil
}

func (x *ChannelAttr) GetPaStreamType() PaStreamType {
	if x != nil {
		return x.PaStreamType
	}
	return PaStreamType_LOCAL_LOW
}

// 获取输出通道列表
type OutChannelGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *OutChannelGet) Reset() {
	*x = OutChannelGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutChannelGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutChannelGet) ProtoMessage() {}

func (x *OutChannelGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutChannelGet.ProtoReflect.Descriptor instead.
func (*OutChannelGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{80}
}

func (x *OutChannelGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type OutChannelGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*ChannelAttr `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *OutChannelGetReply) Reset() {
	*x = OutChannelGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutChannelGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutChannelGetReply) ProtoMessage() {}

func (x *OutChannelGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutChannelGetReply.ProtoReflect.Descriptor instead.
func (*OutChannelGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{81}
}

func (x *OutChannelGetReply) GetChannel() []*ChannelAttr {
	if x != nil {
		return x.Channel
	}
	return nil
}

// 输出通道编辑
type OutChannelEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Attr     *ChannelAttr `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *OutChannelEdit) Reset() {
	*x = OutChannelEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutChannelEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutChannelEdit) ProtoMessage() {}

func (x *OutChannelEdit) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutChannelEdit.ProtoReflect.Descriptor instead.
func (*OutChannelEdit) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{82}
}

func (x *OutChannelEdit) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OutChannelEdit) GetAttr() *ChannelAttr {
	if x != nil {
		return x.Attr
	}
	return nil
}

type OutChannelEditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *OutChannelEditReply) Reset() {
	*x = OutChannelEditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutChannelEditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutChannelEditReply) ProtoMessage() {}

func (x *OutChannelEditReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutChannelEditReply.ProtoReflect.Descriptor instead.
func (*OutChannelEditReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{83}
}

func (x *OutChannelEditReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 获取输入通道列表
type InChannelGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *InChannelGet) Reset() {
	*x = InChannelGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InChannelGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InChannelGet) ProtoMessage() {}

func (x *InChannelGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InChannelGet.ProtoReflect.Descriptor instead.
func (*InChannelGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{84}
}

func (x *InChannelGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type InChannelGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []*ChannelAttr `protobuf:"bytes,1,rep,name=channel,proto3" json:"channel,omitempty"`
}

func (x *InChannelGetReply) Reset() {
	*x = InChannelGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InChannelGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InChannelGetReply) ProtoMessage() {}

func (x *InChannelGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InChannelGetReply.ProtoReflect.Descriptor instead.
func (*InChannelGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{85}
}

func (x *InChannelGetReply) GetChannel() []*ChannelAttr {
	if x != nil {
		return x.Channel
	}
	return nil
}

// 输入通道编辑
type InChannelEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Attr     *ChannelAttr `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *InChannelEdit) Reset() {
	*x = InChannelEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InChannelEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InChannelEdit) ProtoMessage() {}

func (x *InChannelEdit) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InChannelEdit.ProtoReflect.Descriptor instead.
func (*InChannelEdit) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{86}
}

func (x *InChannelEdit) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InChannelEdit) GetAttr() *ChannelAttr {
	if x != nil {
		return x.Attr
	}
	return nil
}

type InChannelEditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *InChannelEditReply) Reset() {
	*x = InChannelEditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InChannelEditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InChannelEditReply) ProtoMessage() {}

func (x *InChannelEditReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InChannelEditReply.ProtoReflect.Descriptor instead.
func (*InChannelEditReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{87}
}

func (x *InChannelEditReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 调音台任务控制
type SoundConsoleTaskControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string                         `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Uuid     string                         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Command  SoundConsoleTaskControlCommand `protobuf:"varint,3,opt,name=command,proto3,enum=proto.SoundConsoleTaskControlCommand" json:"command,omitempty"`
	// 歌曲名
	Song string `protobuf:"bytes,4,opt,name=song,proto3" json:"song,omitempty"`
	// 拖动播放位置
	Position   uint32     `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	VolumeType VolumeType `protobuf:"varint,6,opt,name=volume_type,json=volumeType,proto3,enum=proto.VolumeType" json:"volume_type,omitempty"`
	Volume     uint32     `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *SoundConsoleTaskControl) Reset() {
	*x = SoundConsoleTaskControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundConsoleTaskControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundConsoleTaskControl) ProtoMessage() {}

func (x *SoundConsoleTaskControl) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundConsoleTaskControl.ProtoReflect.Descriptor instead.
func (*SoundConsoleTaskControl) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{88}
}

func (x *SoundConsoleTaskControl) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SoundConsoleTaskControl) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundConsoleTaskControl) GetCommand() SoundConsoleTaskControlCommand {
	if x != nil {
		return x.Command
	}
	return SoundConsoleTaskControlCommand_INVALID_COMMAND
}

func (x *SoundConsoleTaskControl) GetSong() string {
	if x != nil {
		return x.Song
	}
	return ""
}

func (x *SoundConsoleTaskControl) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SoundConsoleTaskControl) GetVolumeType() VolumeType {
	if x != nil {
		return x.VolumeType
	}
	return VolumeType_IN_1_VOLUME
}

func (x *SoundConsoleTaskControl) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// 调音台任务控制返回
type SoundConsoleTaskControlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SoundConsoleTaskControlReply) Reset() {
	*x = SoundConsoleTaskControlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundConsoleTaskControlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundConsoleTaskControlReply) ProtoMessage() {}

func (x *SoundConsoleTaskControlReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundConsoleTaskControlReply.ProtoReflect.Descriptor instead.
func (*SoundConsoleTaskControlReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{89}
}

func (x *SoundConsoleTaskControlReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SoundConsoleTaskFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 调音台任务uuid
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 输入1通道db值
	In_1Db int32 `protobuf:"varint,2,opt,name=in_1_db,json=in1Db,proto3" json:"in_1_db,omitempty"`
	// 输入2通道db值
	In_2Db int32 `protobuf:"varint,3,opt,name=in_2_db,json=in2Db,proto3" json:"in_2_db,omitempty"`
	// 输入3通道db值
	In_3Db int32 `protobuf:"varint,4,opt,name=in_3_db,json=in3Db,proto3" json:"in_3_db,omitempty"`
	// 输入4通道db值
	In_4Db int32 `protobuf:"varint,5,opt,name=in_4_db,json=in4Db,proto3" json:"in_4_db,omitempty"`
	// 歌曲db值
	SongDb int32 `protobuf:"varint,6,opt,name=song_db,json=songDb,proto3" json:"song_db,omitempty"`
	// app端mic db值
	VoiceDb int32 `protobuf:"varint,7,opt,name=voice_db,json=voiceDb,proto3" json:"voice_db,omitempty"`
	// app端背景音db值
	BackgroundDb int32 `protobuf:"varint,8,opt,name=background_db,json=backgroundDb,proto3" json:"background_db,omitempty"`
	// 调音台当前播放的歌曲
	Song string `protobuf:"bytes,9,opt,name=song,proto3" json:"song,omitempty"`
	// 歌曲的播放总时长
	Duration uint32 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	// 歌曲已经播放的时长
	Elapsed uint32 `protobuf:"varint,11,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
}

func (x *SoundConsoleTaskFeedback) Reset() {
	*x = SoundConsoleTaskFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundConsoleTaskFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundConsoleTaskFeedback) ProtoMessage() {}

func (x *SoundConsoleTaskFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundConsoleTaskFeedback.ProtoReflect.Descriptor instead.
func (*SoundConsoleTaskFeedback) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{90}
}

func (x *SoundConsoleTaskFeedback) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundConsoleTaskFeedback) GetIn_1Db() int32 {
	if x != nil {
		return x.In_1Db
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetIn_2Db() int32 {
	if x != nil {
		return x.In_2Db
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetIn_3Db() int32 {
	if x != nil {
		return x.In_3Db
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetIn_4Db() int32 {
	if x != nil {
		return x.In_4Db
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetSongDb() int32 {
	if x != nil {
		return x.SongDb
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetVoiceDb() int32 {
	if x != nil {
		return x.VoiceDb
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetBackgroundDb() int32 {
	if x != nil {
		return x.BackgroundDb
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetSong() string {
	if x != nil {
		return x.Song
	}
	return ""
}

func (x *SoundConsoleTaskFeedback) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SoundConsoleTaskFeedback) GetElapsed() uint32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

// 调音台音量
type SoundConsoleVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 输入1音量
	In_1Volume uint32 `protobuf:"varint,1,opt,name=in_1_volume,json=in1Volume,proto3" json:"in_1_volume,omitempty"`
	// 输入2音量
	In_2Volume uint32 `protobuf:"varint,2,opt,name=in_2_volume,json=in2Volume,proto3" json:"in_2_volume,omitempty"`
	// 输入3音量
	In_3Volume uint32 `protobuf:"varint,3,opt,name=in_3_volume,json=in3Volume,proto3" json:"in_3_volume,omitempty"`
	// 输入4音量
	In_4Volume uint32 `protobuf:"varint,4,opt,name=in_4_volume,json=in4Volume,proto3" json:"in_4_volume,omitempty"`
	// app的mic输入音量
	VoiceVolume uint32 `protobuf:"varint,5,opt,name=voice_volume,json=voiceVolume,proto3" json:"voice_volume,omitempty"`
	// app的背景音乐音量
	BackgroundVolume uint32 `protobuf:"varint,6,opt,name=background_volume,json=backgroundVolume,proto3" json:"background_volume,omitempty"`
	// 歌曲音量
	SongVolume uint32 `protobuf:"varint,7,opt,name=song_volume,json=songVolume,proto3" json:"song_volume,omitempty"`
	// 2001 mic输入音量
	MicrophoneVolume uint32 `protobuf:"varint,8,opt,name=microphone_volume,json=microphoneVolume,proto3" json:"microphone_volume,omitempty"`
	// 总音量
	MasterVolume uint32 `protobuf:"varint,9,opt,name=master_volume,json=masterVolume,proto3" json:"master_volume,omitempty"`
}

func (x *SoundConsoleVolume) Reset() {
	*x = SoundConsoleVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundConsoleVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundConsoleVolume) ProtoMessage() {}

func (x *SoundConsoleVolume) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundConsoleVolume.ProtoReflect.Descriptor instead.
func (*SoundConsoleVolume) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{91}
}

func (x *SoundConsoleVolume) GetIn_1Volume() uint32 {
	if x != nil {
		return x.In_1Volume
	}
	return 0
}

func (x *SoundConsoleVolume) GetIn_2Volume() uint32 {
	if x != nil {
		return x.In_2Volume
	}
	return 0
}

func (x *SoundConsoleVolume) GetIn_3Volume() uint32 {
	if x != nil {
		return x.In_3Volume
	}
	return 0
}

func (x *SoundConsoleVolume) GetIn_4Volume() uint32 {
	if x != nil {
		return x.In_4Volume
	}
	return 0
}

func (x *SoundConsoleVolume) GetVoiceVolume() uint32 {
	if x != nil {
		return x.VoiceVolume
	}
	return 0
}

func (x *SoundConsoleVolume) GetBackgroundVolume() uint32 {
	if x != nil {
		return x.BackgroundVolume
	}
	return 0
}

func (x *SoundConsoleVolume) GetSongVolume() uint32 {
	if x != nil {
		return x.SongVolume
	}
	return 0
}

func (x *SoundConsoleVolume) GetMicrophoneVolume() uint32 {
	if x != nil {
		return x.MicrophoneVolume
	}
	return 0
}

func (x *SoundConsoleVolume) GetMasterVolume() uint32 {
	if x != nil {
		return x.MasterVolume
	}
	return 0
}

type SoundConsoleScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 场景唯一识别号
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 场景所属用户
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// 场景名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 调音台音量
	Volume *SoundConsoleVolume `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
	// 选择的输入通道
	InChannel string `protobuf:"bytes,5,opt,name=in_channel,json=inChannel,proto3" json:"in_channel,omitempty"`
	// 选择的输出通道
	OutChannel string `protobuf:"bytes,6,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
	// 选择的歌曲列表
	Songs string `protobuf:"bytes,7,opt,name=songs,proto3" json:"songs,omitempty"`
	// 歌曲通道是否开启
	SongEnable bool `protobuf:"varint,8,opt,name=song_enable,json=songEnable,proto3" json:"song_enable,omitempty"`
	// app mic通道是否开启
	VoiceEnable bool `protobuf:"varint,9,opt,name=voice_enable,json=voiceEnable,proto3" json:"voice_enable,omitempty"`
	// app背景音乐是否开启
	BackgroundEnable bool `protobuf:"varint,10,opt,name=background_enable,json=backgroundEnable,proto3" json:"background_enable,omitempty"`
	// 是否当前场景
	Current bool `protobuf:"varint,11,opt,name=current,proto3" json:"current,omitempty"`
	// 调音台输入设备名称
	InputDevicName string `protobuf:"bytes,12,opt,name=input_devicName,json=inputDevicName,proto3" json:"input_devicName,omitempty"`
	// 2001 mic通道是否开启
	MicrophoneEnable bool `protobuf:"varint,13,opt,name=microphone_enable,json=microphoneEnable,proto3" json:"microphone_enable,omitempty"`
}

func (x *SoundConsoleScene) Reset() {
	*x = SoundConsoleScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundConsoleScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundConsoleScene) ProtoMessage() {}

func (x *SoundConsoleScene) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundConsoleScene.ProtoReflect.Descriptor instead.
func (*SoundConsoleScene) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{92}
}

func (x *SoundConsoleScene) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundConsoleScene) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SoundConsoleScene) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SoundConsoleScene) GetVolume() *SoundConsoleVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *SoundConsoleScene) GetInChannel() string {
	if x != nil {
		return x.InChannel
	}
	return ""
}

func (x *SoundConsoleScene) GetOutChannel() string {
	if x != nil {
		return x.OutChannel
	}
	return ""
}

func (x *SoundConsoleScene) GetSongs() string {
	if x != nil {
		return x.Songs
	}
	return ""
}

func (x *SoundConsoleScene) GetSongEnable() bool {
	if x != nil {
		return x.SongEnable
	}
	return false
}

func (x *SoundConsoleScene) GetVoiceEnable() bool {
	if x != nil {
		return x.VoiceEnable
	}
	return false
}

func (x *SoundConsoleScene) GetBackgroundEnable() bool {
	if x != nil {
		return x.BackgroundEnable
	}
	return false
}

func (x *SoundConsoleScene) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

func (x *SoundConsoleScene) GetInputDevicName() string {
	if x != nil {
		return x.InputDevicName
	}
	return ""
}

func (x *SoundConsoleScene) GetMicrophoneEnable() bool {
	if x != nil {
		return x.MicrophoneEnable
	}
	return false
}

// 电台
type RadioFreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 电台频率（比如10610）
	Freq uint32 `protobuf:"varint,1,opt,name=freq,proto3" json:"freq,omitempty"`
	// 电台名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 当前是否使用
	Used bool `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *RadioFreq) Reset() {
	*x = RadioFreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreq) ProtoMessage() {}

func (x *RadioFreq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreq.ProtoReflect.Descriptor instead.
func (*RadioFreq) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{93}
}

func (x *RadioFreq) GetFreq() uint32 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *RadioFreq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RadioFreq) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

// 获取电台列表
type RadioFreqGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *RadioFreqGet) Reset() {
	*x = RadioFreqGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqGet) ProtoMessage() {}

func (x *RadioFreqGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqGet.ProtoReflect.Descriptor instead.
func (*RadioFreqGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{94}
}

func (x *RadioFreqGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type RadioFreqGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status       `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Rf     []*RadioFreq `protobuf:"bytes,2,rep,name=rf,proto3" json:"rf,omitempty"`
}

func (x *RadioFreqGetReply) Reset() {
	*x = RadioFreqGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqGetReply) ProtoMessage() {}

func (x *RadioFreqGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqGetReply.ProtoReflect.Descriptor instead.
func (*RadioFreqGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{95}
}

func (x *RadioFreqGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *RadioFreqGetReply) GetRf() []*RadioFreq {
	if x != nil {
		return x.Rf
	}
	return nil
}

// 添加电台
type RadioFreqAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Rf       *RadioFreq `protobuf:"bytes,2,opt,name=rf,proto3" json:"rf,omitempty"`
}

func (x *RadioFreqAdd) Reset() {
	*x = RadioFreqAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqAdd) ProtoMessage() {}

func (x *RadioFreqAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqAdd.ProtoReflect.Descriptor instead.
func (*RadioFreqAdd) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{96}
}

func (x *RadioFreqAdd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RadioFreqAdd) GetRf() *RadioFreq {
	if x != nil {
		return x.Rf
	}
	return nil
}

type RadioFreqAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *RadioFreqAddReply) Reset() {
	*x = RadioFreqAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqAddReply) ProtoMessage() {}

func (x *RadioFreqAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqAddReply.ProtoReflect.Descriptor instead.
func (*RadioFreqAddReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{97}
}

func (x *RadioFreqAddReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 设置电台
type RadioFreqSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Rf       *RadioFreq `protobuf:"bytes,2,opt,name=rf,proto3" json:"rf,omitempty"`
}

func (x *RadioFreqSet) Reset() {
	*x = RadioFreqSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqSet) ProtoMessage() {}

func (x *RadioFreqSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqSet.ProtoReflect.Descriptor instead.
func (*RadioFreqSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{98}
}

func (x *RadioFreqSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RadioFreqSet) GetRf() *RadioFreq {
	if x != nil {
		return x.Rf
	}
	return nil
}

type RadioFreqSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *RadioFreqSetReply) Reset() {
	*x = RadioFreqSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqSetReply) ProtoMessage() {}

func (x *RadioFreqSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqSetReply.ProtoReflect.Descriptor instead.
func (*RadioFreqSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{99}
}

func (x *RadioFreqSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 删除电台
type RadioFreqDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作的用户名
	Username string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Rf       *RadioFreq `protobuf:"bytes,2,opt,name=rf,proto3" json:"rf,omitempty"`
}

func (x *RadioFreqDelete) Reset() {
	*x = RadioFreqDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqDelete) ProtoMessage() {}

func (x *RadioFreqDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqDelete.ProtoReflect.Descriptor instead.
func (*RadioFreqDelete) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{100}
}

func (x *RadioFreqDelete) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RadioFreqDelete) GetRf() *RadioFreq {
	if x != nil {
		return x.Rf
	}
	return nil
}

type RadioFreqDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *RadioFreqDeleteReply) Reset() {
	*x = RadioFreqDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioFreqDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioFreqDeleteReply) ProtoMessage() {}

func (x *RadioFreqDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioFreqDeleteReply.ProtoReflect.Descriptor instead.
func (*RadioFreqDeleteReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{101}
}

func (x *RadioFreqDeleteReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DeviceRestore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *DeviceRestore) Reset() {
	*x = DeviceRestore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRestore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRestore) ProtoMessage() {}

func (x *DeviceRestore) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRestore.ProtoReflect.Descriptor instead.
func (*DeviceRestore) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{102}
}

func (x *DeviceRestore) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DeviceRestoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DeviceRestoreReply) Reset() {
	*x = DeviceRestoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRestoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRestoreReply) ProtoMessage() {}

func (x *DeviceRestoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRestoreReply.ProtoReflect.Descriptor instead.
func (*DeviceRestoreReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{103}
}

func (x *DeviceRestoreReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 升级
type DeviceUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 固件url
	FirmwareUrl string `protobuf:"bytes,1,opt,name=firmware_url,json=firmwareUrl,proto3" json:"firmware_url,omitempty"`
}

func (x *DeviceUpgrade) Reset() {
	*x = DeviceUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUpgrade) ProtoMessage() {}

func (x *DeviceUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUpgrade.ProtoReflect.Descriptor instead.
func (*DeviceUpgrade) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{104}
}

func (x *DeviceUpgrade) GetFirmwareUrl() string {
	if x != nil {
		return x.FirmwareUrl
	}
	return ""
}

type DeviceUpgradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DeviceUpgradeReply) Reset() {
	*x = DeviceUpgradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUpgradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUpgradeReply) ProtoMessage() {}

func (x *DeviceUpgradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUpgradeReply.ProtoReflect.Descriptor instead.
func (*DeviceUpgradeReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{105}
}

func (x *DeviceUpgradeReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DevicePowerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Out_1Power DevicePower `protobuf:"varint,2,opt,name=out_1_power,json=out1Power,proto3,enum=proto.DevicePower" json:"out_1_power,omitempty"`
	Out_2Power DevicePower `protobuf:"varint,3,opt,name=out_2_power,json=out2Power,proto3,enum=proto.DevicePower" json:"out_2_power,omitempty"`
	Out_3Power DevicePower `protobuf:"varint,4,opt,name=out_3_power,json=out3Power,proto3,enum=proto.DevicePower" json:"out_3_power,omitempty"`
	Out_4Power DevicePower `protobuf:"varint,5,opt,name=out_4_power,json=out4Power,proto3,enum=proto.DevicePower" json:"out_4_power,omitempty"`
}

func (x *DevicePowerSet) Reset() {
	*x = DevicePowerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePowerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePowerSet) ProtoMessage() {}

func (x *DevicePowerSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePowerSet.ProtoReflect.Descriptor instead.
func (*DevicePowerSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{106}
}

func (x *DevicePowerSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DevicePowerSet) GetOut_1Power() DevicePower {
	if x != nil {
		return x.Out_1Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerSet) GetOut_2Power() DevicePower {
	if x != nil {
		return x.Out_2Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerSet) GetOut_3Power() DevicePower {
	if x != nil {
		return x.Out_3Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerSet) GetOut_4Power() DevicePower {
	if x != nil {
		return x.Out_4Power
	}
	return DevicePower_W_0
}

type DevicePowerSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DevicePowerSetReply) Reset() {
	*x = DevicePowerSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePowerSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePowerSetReply) ProtoMessage() {}

func (x *DevicePowerSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePowerSetReply.ProtoReflect.Descriptor instead.
func (*DevicePowerSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{107}
}

func (x *DevicePowerSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DevicePowerGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *DevicePowerGet) Reset() {
	*x = DevicePowerGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePowerGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePowerGet) ProtoMessage() {}

func (x *DevicePowerGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePowerGet.ProtoReflect.Descriptor instead.
func (*DevicePowerGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{108}
}

func (x *DevicePowerGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DevicePowerGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     Status      `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	TotalPower uint32      `protobuf:"varint,2,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
	Out_1Power DevicePower `protobuf:"varint,3,opt,name=out_1_power,json=out1Power,proto3,enum=proto.DevicePower" json:"out_1_power,omitempty"`
	Out_2Power DevicePower `protobuf:"varint,4,opt,name=out_2_power,json=out2Power,proto3,enum=proto.DevicePower" json:"out_2_power,omitempty"`
	Out_3Power DevicePower `protobuf:"varint,5,opt,name=out_3_power,json=out3Power,proto3,enum=proto.DevicePower" json:"out_3_power,omitempty"`
	Out_4Power DevicePower `protobuf:"varint,6,opt,name=out_4_power,json=out4Power,proto3,enum=proto.DevicePower" json:"out_4_power,omitempty"`
}

func (x *DevicePowerGetReply) Reset() {
	*x = DevicePowerGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePowerGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePowerGetReply) ProtoMessage() {}

func (x *DevicePowerGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePowerGetReply.ProtoReflect.Descriptor instead.
func (*DevicePowerGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{109}
}

func (x *DevicePowerGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *DevicePowerGetReply) GetTotalPower() uint32 {
	if x != nil {
		return x.TotalPower
	}
	return 0
}

func (x *DevicePowerGetReply) GetOut_1Power() DevicePower {
	if x != nil {
		return x.Out_1Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerGetReply) GetOut_2Power() DevicePower {
	if x != nil {
		return x.Out_2Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerGetReply) GetOut_3Power() DevicePower {
	if x != nil {
		return x.Out_3Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerGetReply) GetOut_4Power() DevicePower {
	if x != nil {
		return x.Out_4Power
	}
	return DevicePower_W_0
}

type DevicePowerPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPower uint32      `protobuf:"varint,1,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
	Out_1Power DevicePower `protobuf:"varint,2,opt,name=out_1_power,json=out1Power,proto3,enum=proto.DevicePower" json:"out_1_power,omitempty"`
	Out_2Power DevicePower `protobuf:"varint,3,opt,name=out_2_power,json=out2Power,proto3,enum=proto.DevicePower" json:"out_2_power,omitempty"`
	Out_3Power DevicePower `protobuf:"varint,4,opt,name=out_3_power,json=out3Power,proto3,enum=proto.DevicePower" json:"out_3_power,omitempty"`
	Out_4Power DevicePower `protobuf:"varint,5,opt,name=out_4_power,json=out4Power,proto3,enum=proto.DevicePower" json:"out_4_power,omitempty"`
}

func (x *DevicePowerPack) Reset() {
	*x = DevicePowerPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePowerPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePowerPack) ProtoMessage() {}

func (x *DevicePowerPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePowerPack.ProtoReflect.Descriptor instead.
func (*DevicePowerPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{110}
}

func (x *DevicePowerPack) GetTotalPower() uint32 {
	if x != nil {
		return x.TotalPower
	}
	return 0
}

func (x *DevicePowerPack) GetOut_1Power() DevicePower {
	if x != nil {
		return x.Out_1Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerPack) GetOut_2Power() DevicePower {
	if x != nil {
		return x.Out_2Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerPack) GetOut_3Power() DevicePower {
	if x != nil {
		return x.Out_3Power
	}
	return DevicePower_W_0
}

func (x *DevicePowerPack) GetOut_4Power() DevicePower {
	if x != nil {
		return x.Out_4Power
	}
	return DevicePower_W_0
}

type TaskSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Type     TaskSyncType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.TaskSyncType" json:"type,omitempty"`
	TaskUuid string       `protobuf:"bytes,3,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
}

func (x *TaskSync) Reset() {
	*x = TaskSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSync) ProtoMessage() {}

func (x *TaskSync) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSync.ProtoReflect.Descriptor instead.
func (*TaskSync) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{111}
}

func (x *TaskSync) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskSync) GetType() TaskSyncType {
	if x != nil {
		return x.Type
	}
	return TaskSyncType_ADD
}

func (x *TaskSync) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

type TaskSyncReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskSyncReply) Reset() {
	*x = TaskSyncReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSyncReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSyncReply) ProtoMessage() {}

func (x *TaskSyncReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSyncReply.ProtoReflect.Descriptor instead.
func (*TaskSyncReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{112}
}

func (x *TaskSyncReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type TaskSyncStatusGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	TaskUuid string `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
}

func (x *TaskSyncStatusGet) Reset() {
	*x = TaskSyncStatusGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSyncStatusGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSyncStatusGet) ProtoMessage() {}

func (x *TaskSyncStatusGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSyncStatusGet.ProtoReflect.Descriptor instead.
func (*TaskSyncStatusGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{113}
}

func (x *TaskSyncStatusGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskSyncStatusGet) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

type TaskSyncStatusGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  TaskSyncStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.TaskSyncStatus" json:"status,omitempty"`
	Comment string         `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *TaskSyncStatusGetReply) Reset() {
	*x = TaskSyncStatusGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSyncStatusGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSyncStatusGetReply) ProtoMessage() {}

func (x *TaskSyncStatusGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSyncStatusGetReply.ProtoReflect.Descriptor instead.
func (*TaskSyncStatusGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{114}
}

func (x *TaskSyncStatusGetReply) GetStatus() TaskSyncStatus {
	if x != nil {
		return x.Status
	}
	return TaskSyncStatus_SYNC_DONE
}

func (x *TaskSyncStatusGetReply) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// 用于上云的时候APP请求设备任务状态
type TaskStatusGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TaskStatusGet) Reset() {
	*x = TaskStatusGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusGet) ProtoMessage() {}

func (x *TaskStatusGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusGet.ProtoReflect.Descriptor instead.
func (*TaskStatusGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{115}
}

func (x *TaskStatusGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type TaskStatusGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskStatusGetReply) Reset() {
	*x = TaskStatusGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusGetReply) ProtoMessage() {}

func (x *TaskStatusGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusGetReply.ProtoReflect.Descriptor instead.
func (*TaskStatusGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{116}
}

func (x *TaskStatusGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SubscribePublish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Subscribe bool   `protobuf:"varint,3,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
}

func (x *SubscribePublish) Reset() {
	*x = SubscribePublish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePublish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePublish) ProtoMessage() {}

func (x *SubscribePublish) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePublish.ProtoReflect.Descriptor instead.
func (*SubscribePublish) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{117}
}

func (x *SubscribePublish) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SubscribePublish) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SubscribePublish) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

type SubscribePublishReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SubscribePublishReply) Reset() {
	*x = SubscribePublishReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePublishReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePublishReply) ProtoMessage() {}

func (x *SubscribePublishReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePublishReply.ProtoReflect.Descriptor instead.
func (*SubscribePublishReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{118}
}

func (x *SubscribePublishReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{119}
}

func (x *Identity) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Identity) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type TaskAddOutChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	TaskUuid   string `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	OutChannel string `protobuf:"bytes,3,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
}

func (x *TaskAddOutChannel) Reset() {
	*x = TaskAddOutChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAddOutChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAddOutChannel) ProtoMessage() {}

func (x *TaskAddOutChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAddOutChannel.ProtoReflect.Descriptor instead.
func (*TaskAddOutChannel) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{120}
}

func (x *TaskAddOutChannel) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskAddOutChannel) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *TaskAddOutChannel) GetOutChannel() string {
	if x != nil {
		return x.OutChannel
	}
	return ""
}

type TaskAddOutChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskAddOutChannelReply) Reset() {
	*x = TaskAddOutChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAddOutChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAddOutChannelReply) ProtoMessage() {}

func (x *TaskAddOutChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAddOutChannelReply.ProtoReflect.Descriptor instead.
func (*TaskAddOutChannelReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{121}
}

func (x *TaskAddOutChannelReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type TaskDeleteOutChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	TaskUuid   string `protobuf:"bytes,2,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	OutChannel string `protobuf:"bytes,3,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
}

func (x *TaskDeleteOutChannel) Reset() {
	*x = TaskDeleteOutChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleteOutChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteOutChannel) ProtoMessage() {}

func (x *TaskDeleteOutChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteOutChannel.ProtoReflect.Descriptor instead.
func (*TaskDeleteOutChannel) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{122}
}

func (x *TaskDeleteOutChannel) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskDeleteOutChannel) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *TaskDeleteOutChannel) GetOutChannel() string {
	if x != nil {
		return x.OutChannel
	}
	return ""
}

type TaskDeleteOutChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskDeleteOutChannelReply) Reset() {
	*x = TaskDeleteOutChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleteOutChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteOutChannelReply) ProtoMessage() {}

func (x *TaskDeleteOutChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteOutChannelReply.ProtoReflect.Descriptor instead.
func (*TaskDeleteOutChannelReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{123}
}

func (x *TaskDeleteOutChannelReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SongDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Songs    string `protobuf:"bytes,2,opt,name=songs,proto3" json:"songs,omitempty"`
	Uuid     string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SongDownload) Reset() {
	*x = SongDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongDownload) ProtoMessage() {}

func (x *SongDownload) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongDownload.ProtoReflect.Descriptor instead.
func (*SongDownload) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{124}
}

func (x *SongDownload) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SongDownload) GetSongs() string {
	if x != nil {
		return x.Songs
	}
	return ""
}

func (x *SongDownload) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SongDownloadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SongDownloadReply) Reset() {
	*x = SongDownloadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongDownloadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongDownloadReply) ProtoMessage() {}

func (x *SongDownloadReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongDownloadReply.ProtoReflect.Descriptor instead.
func (*SongDownloadReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{125}
}

func (x *SongDownloadReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SongDownloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SongDownloadStatus) Reset() {
	*x = SongDownloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongDownloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongDownloadStatus) ProtoMessage() {}

func (x *SongDownloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongDownloadStatus.ProtoReflect.Descriptor instead.
func (*SongDownloadStatus) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{126}
}

func (x *SongDownloadStatus) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *SongDownloadStatus) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SongDownloadComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song string `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *SongDownloadComplete) Reset() {
	*x = SongDownloadComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SongDownloadComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SongDownloadComplete) ProtoMessage() {}

func (x *SongDownloadComplete) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SongDownloadComplete.ProtoReflect.Descriptor instead.
func (*SongDownloadComplete) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{127}
}

func (x *SongDownloadComplete) GetSong() string {
	if x != nil {
		return x.Song
	}
	return ""
}

type StereoCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	StereoEnable bool   `protobuf:"varint,2,opt,name=stereo_enable,json=stereoEnable,proto3" json:"stereo_enable,omitempty"`
}

func (x *StereoCfgSet) Reset() {
	*x = StereoCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StereoCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StereoCfgSet) ProtoMessage() {}

func (x *StereoCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StereoCfgSet.ProtoReflect.Descriptor instead.
func (*StereoCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{128}
}

func (x *StereoCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *StereoCfgSet) GetStereoEnable() bool {
	if x != nil {
		return x.StereoEnable
	}
	return false
}

type StereoCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *StereoCfgSetReply) Reset() {
	*x = StereoCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StereoCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StereoCfgSetReply) ProtoMessage() {}

func (x *StereoCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StereoCfgSetReply.ProtoReflect.Descriptor instead.
func (*StereoCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{129}
}

func (x *StereoCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type LedCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	LedEnable bool   `protobuf:"varint,2,opt,name=led_enable,json=ledEnable,proto3" json:"led_enable,omitempty"`
}

func (x *LedCfgSet) Reset() {
	*x = LedCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedCfgSet) ProtoMessage() {}

func (x *LedCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedCfgSet.ProtoReflect.Descriptor instead.
func (*LedCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{130}
}

func (x *LedCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LedCfgSet) GetLedEnable() bool {
	if x != nil {
		return x.LedEnable
	}
	return false
}

type LedCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *LedCfgSetReply) Reset() {
	*x = LedCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedCfgSetReply) ProtoMessage() {}

func (x *LedCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedCfgSetReply.ProtoReflect.Descriptor instead.
func (*LedCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{131}
}

func (x *LedCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type WirelessCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username        string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	WirelessDisable bool   `protobuf:"varint,2,opt,name=wireless_disable,json=wirelessDisable,proto3" json:"wireless_disable,omitempty"`
}

func (x *WirelessCfgSet) Reset() {
	*x = WirelessCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessCfgSet) ProtoMessage() {}

func (x *WirelessCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessCfgSet.ProtoReflect.Descriptor instead.
func (*WirelessCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{132}
}

func (x *WirelessCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WirelessCfgSet) GetWirelessDisable() bool {
	if x != nil {
		return x.WirelessDisable
	}
	return false
}

type WirelessCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *WirelessCfgSetReply) Reset() {
	*x = WirelessCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessCfgSetReply) ProtoMessage() {}

func (x *WirelessCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessCfgSetReply.ProtoReflect.Descriptor instead.
func (*WirelessCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{133}
}

func (x *WirelessCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type AmpCheckCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username       string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AmpCheckEnable bool   `protobuf:"varint,2,opt,name=amp_check_enable,json=ampCheckEnable,proto3" json:"amp_check_enable,omitempty"`
}

func (x *AmpCheckCfgSet) Reset() {
	*x = AmpCheckCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmpCheckCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmpCheckCfgSet) ProtoMessage() {}

func (x *AmpCheckCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmpCheckCfgSet.ProtoReflect.Descriptor instead.
func (*AmpCheckCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{134}
}

func (x *AmpCheckCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AmpCheckCfgSet) GetAmpCheckEnable() bool {
	if x != nil {
		return x.AmpCheckEnable
	}
	return false
}

type AmpCheckCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *AmpCheckCfgSetReply) Reset() {
	*x = AmpCheckCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmpCheckCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmpCheckCfgSetReply) ProtoMessage() {}

func (x *AmpCheckCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmpCheckCfgSetReply.ProtoReflect.Descriptor instead.
func (*AmpCheckCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{135}
}

func (x *AmpCheckCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type MiscCfgGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *MiscCfgGet) Reset() {
	*x = MiscCfgGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscCfgGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscCfgGet) ProtoMessage() {}

func (x *MiscCfgGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscCfgGet.ProtoReflect.Descriptor instead.
func (*MiscCfgGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{136}
}

func (x *MiscCfgGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type MiscCfgGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status   `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	MiscCfg *MiscCfg `protobuf:"bytes,2,opt,name=misc_cfg,json=miscCfg,proto3" json:"misc_cfg,omitempty"`
}

func (x *MiscCfgGetReply) Reset() {
	*x = MiscCfgGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscCfgGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscCfgGetReply) ProtoMessage() {}

func (x *MiscCfgGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscCfgGetReply.ProtoReflect.Descriptor instead.
func (*MiscCfgGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{137}
}

func (x *MiscCfgGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *MiscCfgGetReply) GetMiscCfg() *MiscCfg {
	if x != nil {
		return x.MiscCfg
	}
	return nil
}

type SpeechCfgGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SpeechCfgGet) Reset() {
	*x = SpeechCfgGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechCfgGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechCfgGet) ProtoMessage() {}

func (x *SpeechCfgGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechCfgGet.ProtoReflect.Descriptor instead.
func (*SpeechCfgGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{138}
}

func (x *SpeechCfgGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SpeechCfgGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    Status     `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	SpeechCfg *SpeechCfg `protobuf:"bytes,2,opt,name=speech_cfg,json=speechCfg,proto3" json:"speech_cfg,omitempty"`
}

func (x *SpeechCfgGetReply) Reset() {
	*x = SpeechCfgGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechCfgGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechCfgGetReply) ProtoMessage() {}

func (x *SpeechCfgGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechCfgGetReply.ProtoReflect.Descriptor instead.
func (*SpeechCfgGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{139}
}

func (x *SpeechCfgGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *SpeechCfgGetReply) GetSpeechCfg() *SpeechCfg {
	if x != nil {
		return x.SpeechCfg
	}
	return nil
}

type SpeechCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	SpeechCfg *SpeechCfg `protobuf:"bytes,2,opt,name=speech_cfg,json=speechCfg,proto3" json:"speech_cfg,omitempty"`
}

func (x *SpeechCfgSet) Reset() {
	*x = SpeechCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechCfgSet) ProtoMessage() {}

func (x *SpeechCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechCfgSet.ProtoReflect.Descriptor instead.
func (*SpeechCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{140}
}

func (x *SpeechCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SpeechCfgSet) GetSpeechCfg() *SpeechCfg {
	if x != nil {
		return x.SpeechCfg
	}
	return nil
}

type SpeechCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SpeechCfgSetReply) Reset() {
	*x = SpeechCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechCfgSetReply) ProtoMessage() {}

func (x *SpeechCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechCfgSetReply.ProtoReflect.Descriptor instead.
func (*SpeechCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{141}
}

func (x *SpeechCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DeviceAliaseSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	DeviceAliase string `protobuf:"bytes,2,opt,name=device_aliase,json=deviceAliase,proto3" json:"device_aliase,omitempty"`
}

func (x *DeviceAliaseSet) Reset() {
	*x = DeviceAliaseSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAliaseSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAliaseSet) ProtoMessage() {}

func (x *DeviceAliaseSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAliaseSet.ProtoReflect.Descriptor instead.
func (*DeviceAliaseSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{142}
}

func (x *DeviceAliaseSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceAliaseSet) GetDeviceAliase() string {
	if x != nil {
		return x.DeviceAliase
	}
	return ""
}

type DeviceAliaseSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DeviceAliaseSetReply) Reset() {
	*x = DeviceAliaseSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAliaseSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAliaseSetReply) ProtoMessage() {}

func (x *DeviceAliaseSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAliaseSetReply.ProtoReflect.Descriptor instead.
func (*DeviceAliaseSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{143}
}

func (x *DeviceAliaseSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type BluetoothWhitelistPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelist []*BluetoothWhitelist `protobuf:"bytes,1,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
}

func (x *BluetoothWhitelistPack) Reset() {
	*x = BluetoothWhitelistPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistPack) ProtoMessage() {}

func (x *BluetoothWhitelistPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistPack.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{144}
}

func (x *BluetoothWhitelistPack) GetWhitelist() []*BluetoothWhitelist {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

// 蓝牙连接白名单
type BluetoothWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 蓝牙名
	BluetoothName string `protobuf:"bytes,1,opt,name=bluetooth_name,json=bluetoothName,proto3" json:"bluetooth_name,omitempty"`
	// 蓝牙地址
	BluetoothAddr string `protobuf:"bytes,2,opt,name=bluetooth_addr,json=bluetoothAddr,proto3" json:"bluetooth_addr,omitempty"`
}

func (x *BluetoothWhitelist) Reset() {
	*x = BluetoothWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelist) ProtoMessage() {}

func (x *BluetoothWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelist.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelist) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{145}
}

func (x *BluetoothWhitelist) GetBluetoothName() string {
	if x != nil {
		return x.BluetoothName
	}
	return ""
}

func (x *BluetoothWhitelist) GetBluetoothAddr() string {
	if x != nil {
		return x.BluetoothAddr
	}
	return ""
}

type BluetoothWhitelistGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *BluetoothWhitelistGet) Reset() {
	*x = BluetoothWhitelistGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistGet) ProtoMessage() {}

func (x *BluetoothWhitelistGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistGet.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{146}
}

func (x *BluetoothWhitelistGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type BluetoothWhitelistGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    Status                `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Whitelist []*BluetoothWhitelist `protobuf:"bytes,2,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
}

func (x *BluetoothWhitelistGetReply) Reset() {
	*x = BluetoothWhitelistGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistGetReply) ProtoMessage() {}

func (x *BluetoothWhitelistGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistGetReply.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{147}
}

func (x *BluetoothWhitelistGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *BluetoothWhitelistGetReply) GetWhitelist() []*BluetoothWhitelist {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

type BluetoothWhitelistDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string              `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Whitelist *BluetoothWhitelist `protobuf:"bytes,2,opt,name=whitelist,proto3" json:"whitelist,omitempty"`
}

func (x *BluetoothWhitelistDelete) Reset() {
	*x = BluetoothWhitelistDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistDelete) ProtoMessage() {}

func (x *BluetoothWhitelistDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistDelete.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistDelete) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{148}
}

func (x *BluetoothWhitelistDelete) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BluetoothWhitelistDelete) GetWhitelist() *BluetoothWhitelist {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

type BluetoothWhitelistDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *BluetoothWhitelistDeleteReply) Reset() {
	*x = BluetoothWhitelistDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistDeleteReply) ProtoMessage() {}

func (x *BluetoothWhitelistDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistDeleteReply.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistDeleteReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{149}
}

func (x *BluetoothWhitelistDeleteReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type BluetoothWhitelistAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string              `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Whitelist *BluetoothWhitelist `protobuf:"bytes,2,opt,name=whitelist,proto3" json:"whitelist,omitempty"`
}

func (x *BluetoothWhitelistAdd) Reset() {
	*x = BluetoothWhitelistAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistAdd) ProtoMessage() {}

func (x *BluetoothWhitelistAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistAdd.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistAdd) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{150}
}

func (x *BluetoothWhitelistAdd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BluetoothWhitelistAdd) GetWhitelist() *BluetoothWhitelist {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

type BluetoothWhitelistAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *BluetoothWhitelistAddReply) Reset() {
	*x = BluetoothWhitelistAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothWhitelistAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothWhitelistAddReply) ProtoMessage() {}

func (x *BluetoothWhitelistAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothWhitelistAddReply.ProtoReflect.Descriptor instead.
func (*BluetoothWhitelistAddReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{151}
}

func (x *BluetoothWhitelistAddReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

// 蓝牙配置
type BluetoothCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 蓝牙播放器使能
	BluetoothPlayerEnable bool `protobuf:"varint,1,opt,name=bluetooth_player_enable,json=bluetoothPlayerEnable,proto3" json:"bluetooth_player_enable,omitempty"`
	// 白名单使能
	WhitelistEnable bool `protobuf:"varint,2,opt,name=whitelist_enable,json=whitelistEnable,proto3" json:"whitelist_enable,omitempty"`
	// 播放区域
	PlayArea string `protobuf:"bytes,3,opt,name=play_area,json=playArea,proto3" json:"play_area,omitempty"`
	// 连接密码 默认628592
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// 蓝牙音量
	BluetoothVolume string `protobuf:"bytes,5,opt,name=bluetooth_volume,json=bluetoothVolume,proto3" json:"bluetooth_volume,omitempty"`
	// 蓝牙延迟
	BluetoothDelay uint32 `protobuf:"varint,6,opt,name=bluetooth_delay,json=bluetoothDelay,proto3" json:"bluetooth_delay,omitempty"`
}

func (x *BluetoothCfg) Reset() {
	*x = BluetoothCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothCfg) ProtoMessage() {}

func (x *BluetoothCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothCfg.ProtoReflect.Descriptor instead.
func (*BluetoothCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{152}
}

func (x *BluetoothCfg) GetBluetoothPlayerEnable() bool {
	if x != nil {
		return x.BluetoothPlayerEnable
	}
	return false
}

func (x *BluetoothCfg) GetWhitelistEnable() bool {
	if x != nil {
		return x.WhitelistEnable
	}
	return false
}

func (x *BluetoothCfg) GetPlayArea() string {
	if x != nil {
		return x.PlayArea
	}
	return ""
}

func (x *BluetoothCfg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BluetoothCfg) GetBluetoothVolume() string {
	if x != nil {
		return x.BluetoothVolume
	}
	return ""
}

func (x *BluetoothCfg) GetBluetoothDelay() uint32 {
	if x != nil {
		return x.BluetoothDelay
	}
	return 0
}

type BluetoothCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string        `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	BluetoothCfg *BluetoothCfg `protobuf:"bytes,2,opt,name=bluetooth_cfg,json=bluetoothCfg,proto3" json:"bluetooth_cfg,omitempty"`
}

func (x *BluetoothCfgSet) Reset() {
	*x = BluetoothCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothCfgSet) ProtoMessage() {}

func (x *BluetoothCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothCfgSet.ProtoReflect.Descriptor instead.
func (*BluetoothCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{153}
}

func (x *BluetoothCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BluetoothCfgSet) GetBluetoothCfg() *BluetoothCfg {
	if x != nil {
		return x.BluetoothCfg
	}
	return nil
}

type BluetoothCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *BluetoothCfgSetReply) Reset() {
	*x = BluetoothCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothCfgSetReply) ProtoMessage() {}

func (x *BluetoothCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothCfgSetReply.ProtoReflect.Descriptor instead.
func (*BluetoothCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{154}
}

func (x *BluetoothCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type BluetoothCfgGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *BluetoothCfgGet) Reset() {
	*x = BluetoothCfgGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothCfgGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothCfgGet) ProtoMessage() {}

func (x *BluetoothCfgGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothCfgGet.ProtoReflect.Descriptor instead.
func (*BluetoothCfgGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{155}
}

func (x *BluetoothCfgGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type BluetoothCfgGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       Status        `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	BluetoothCfg *BluetoothCfg `protobuf:"bytes,2,opt,name=bluetooth_cfg,json=bluetoothCfg,proto3" json:"bluetooth_cfg,omitempty"`
}

func (x *BluetoothCfgGetReply) Reset() {
	*x = BluetoothCfgGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothCfgGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothCfgGetReply) ProtoMessage() {}

func (x *BluetoothCfgGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothCfgGetReply.ProtoReflect.Descriptor instead.
func (*BluetoothCfgGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{156}
}

func (x *BluetoothCfgGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

func (x *BluetoothCfgGetReply) GetBluetoothCfg() *BluetoothCfg {
	if x != nil {
		return x.BluetoothCfg
	}
	return nil
}

type PresetAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 预案名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 预案目录
	Directory string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	// 是否当前预案
	Current bool `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *PresetAttr) Reset() {
	*x = PresetAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetAttr) ProtoMessage() {}

func (x *PresetAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetAttr.ProtoReflect.Descriptor instead.
func (*PresetAttr) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{157}
}

func (x *PresetAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PresetAttr) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *PresetAttr) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

type PresetPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset []*PresetAttr `protobuf:"bytes,1,rep,name=preset,proto3" json:"preset,omitempty"`
}

func (x *PresetPack) Reset() {
	*x = PresetPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetPack) ProtoMessage() {}

func (x *PresetPack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetPack.ProtoReflect.Descriptor instead.
func (*PresetPack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{158}
}

func (x *PresetPack) GetPreset() []*PresetAttr {
	if x != nil {
		return x.Preset
	}
	return nil
}

type TransferServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	ServiceIp  string `protobuf:"bytes,2,opt,name=service_ip,json=serviceIp,proto3" json:"service_ip,omitempty"`
}

func (x *TransferServer) Reset() {
	*x = TransferServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferServer) ProtoMessage() {}

func (x *TransferServer) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferServer.ProtoReflect.Descriptor instead.
func (*TransferServer) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{159}
}

func (x *TransferServer) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *TransferServer) GetServiceIp() string {
	if x != nil {
		return x.ServiceIp
	}
	return ""
}

type TenantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presetpack *PresetPack `protobuf:"bytes,1,opt,name=presetpack,proto3" json:"presetpack,omitempty"`
}

func (x *TenantInfo) Reset() {
	*x = TenantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantInfo) ProtoMessage() {}

func (x *TenantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantInfo.ProtoReflect.Descriptor instead.
func (*TenantInfo) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{160}
}

func (x *TenantInfo) GetPresetpack() *PresetPack {
	if x != nil {
		return x.Presetpack
	}
	return nil
}

type ConsoleAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 场景uuid
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 是否当前场景
	Current bool `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ConsoleAttr) Reset() {
	*x = ConsoleAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsoleAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleAttr) ProtoMessage() {}

func (x *ConsoleAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleAttr.ProtoReflect.Descriptor instead.
func (*ConsoleAttr) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{161}
}

func (x *ConsoleAttr) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ConsoleAttr) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

type ConsolePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Console []*ConsoleAttr `protobuf:"bytes,1,rep,name=console,proto3" json:"console,omitempty"`
}

func (x *ConsolePack) Reset() {
	*x = ConsolePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsolePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsolePack) ProtoMessage() {}

func (x *ConsolePack) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsolePack.ProtoReflect.Descriptor instead.
func (*ConsolePack) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{162}
}

func (x *ConsolePack) GetConsole() []*ConsoleAttr {
	if x != nil {
		return x.Console
	}
	return nil
}

type ConsoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consolepack *ConsolePack `protobuf:"bytes,1,opt,name=consolepack,proto3" json:"consolepack,omitempty"`
}

func (x *ConsoleInfo) Reset() {
	*x = ConsoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleInfo) ProtoMessage() {}

func (x *ConsoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleInfo.ProtoReflect.Descriptor instead.
func (*ConsoleInfo) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{163}
}

func (x *ConsoleInfo) GetConsolepack() *ConsolePack {
	if x != nil {
		return x.Consolepack
	}
	return nil
}

// 预案切换
type TaskPresetSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// 预案目录
	PresetDirectory string `protobuf:"bytes,2,opt,name=preset_directory,json=presetDirectory,proto3" json:"preset_directory,omitempty"`
	// 预案名称
	PresetName string `protobuf:"bytes,3,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
}

func (x *TaskPresetSwitch) Reset() {
	*x = TaskPresetSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPresetSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPresetSwitch) ProtoMessage() {}

func (x *TaskPresetSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPresetSwitch.ProtoReflect.Descriptor instead.
func (*TaskPresetSwitch) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{164}
}

func (x *TaskPresetSwitch) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskPresetSwitch) GetPresetDirectory() string {
	if x != nil {
		return x.PresetDirectory
	}
	return ""
}

func (x *TaskPresetSwitch) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

type TaskPresetSwitchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TaskPresetSwitchReply) Reset() {
	*x = TaskPresetSwitchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPresetSwitchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPresetSwitchReply) ProtoMessage() {}

func (x *TaskPresetSwitchReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPresetSwitchReply.ProtoReflect.Descriptor instead.
func (*TaskPresetSwitchReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{165}
}

func (x *TaskPresetSwitchReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type TransferServerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferServer *TransferServer `protobuf:"bytes,1,opt,name=transfer_server,json=transferServer,proto3" json:"transfer_server,omitempty"`
}

func (x *TransferServerSet) Reset() {
	*x = TransferServerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferServerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferServerSet) ProtoMessage() {}

func (x *TransferServerSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferServerSet.ProtoReflect.Descriptor instead.
func (*TransferServerSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{166}
}

func (x *TransferServerSet) GetTransferServer() *TransferServer {
	if x != nil {
		return x.TransferServer
	}
	return nil
}

type TransferServerSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *TransferServerSetReply) Reset() {
	*x = TransferServerSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferServerSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferServerSetReply) ProtoMessage() {}

func (x *TransferServerSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferServerSetReply.ProtoReflect.Descriptor instead.
func (*TransferServerSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{167}
}

func (x *TransferServerSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type AppLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   string `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	Login   bool   `protobuf:"varint,2,opt,name=login,proto3" json:"login,omitempty"`
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AppLogin) Reset() {
	*x = AppLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLogin) ProtoMessage() {}

func (x *AppLogin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLogin.ProtoReflect.Descriptor instead.
func (*AppLogin) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{168}
}

func (x *AppLogin) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppLogin) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

func (x *AppLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type DeviceLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备名称
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 1:上线/0:下线
	Login bool `protobuf:"varint,2,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *DeviceLogin) Reset() {
	*x = DeviceLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLogin) ProtoMessage() {}

func (x *DeviceLogin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLogin.ProtoReflect.Descriptor instead.
func (*DeviceLogin) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{169}
}

func (x *DeviceLogin) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceLogin) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

type DeviceInfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string      `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Info       *DeviceInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DeviceInfoUpdate) Reset() {
	*x = DeviceInfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoUpdate) ProtoMessage() {}

func (x *DeviceInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoUpdate.ProtoReflect.Descriptor instead.
func (*DeviceInfoUpdate) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{170}
}

func (x *DeviceInfoUpdate) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoUpdate) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeviceReboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *DeviceReboot) Reset() {
	*x = DeviceReboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceReboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceReboot) ProtoMessage() {}

func (x *DeviceReboot) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceReboot.ProtoReflect.Descriptor instead.
func (*DeviceReboot) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{171}
}

func (x *DeviceReboot) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DeviceRebootReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DeviceRebootReply) Reset() {
	*x = DeviceRebootReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRebootReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRebootReply) ProtoMessage() {}

func (x *DeviceRebootReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRebootReply.ProtoReflect.Descriptor instead.
func (*DeviceRebootReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{172}
}

func (x *DeviceRebootReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type KeyPress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      Key  `protobuf:"varint,1,opt,name=id,proto3,enum=proto.Key" json:"id,omitempty"`
	Pressed bool `protobuf:"varint,2,opt,name=pressed,proto3" json:"pressed,omitempty"`
}

func (x *KeyPress) Reset() {
	*x = KeyPress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPress) ProtoMessage() {}

func (x *KeyPress) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPress.ProtoReflect.Descriptor instead.
func (*KeyPress) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{173}
}

func (x *KeyPress) GetId() Key {
	if x != nil {
		return x.Id
	}
	return Key_KEY_PAGING
}

func (x *KeyPress) GetPressed() bool {
	if x != nil {
		return x.Pressed
	}
	return false
}

type WriteSn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *WriteSn) Reset() {
	*x = WriteSn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteSn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSn) ProtoMessage() {}

func (x *WriteSn) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSn.ProtoReflect.Descriptor instead.
func (*WriteSn) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{174}
}

func (x *WriteSn) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

type WriteSnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *WriteSnReply) Reset() {
	*x = WriteSnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteSnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSnReply) ProtoMessage() {}

func (x *WriteSnReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSnReply.ProtoReflect.Descriptor instead.
func (*WriteSnReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{175}
}

func (x *WriteSnReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type LedBoardControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string            `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Id       LedBoardControlId `protobuf:"varint,2,opt,name=id,proto3,enum=proto.LedBoardControlId" json:"id,omitempty"`
}

func (x *LedBoardControl) Reset() {
	*x = LedBoardControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedBoardControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedBoardControl) ProtoMessage() {}

func (x *LedBoardControl) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedBoardControl.ProtoReflect.Descriptor instead.
func (*LedBoardControl) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{176}
}

func (x *LedBoardControl) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LedBoardControl) GetId() LedBoardControlId {
	if x != nil {
		return x.Id
	}
	return LedBoardControlId_UPGRADE
}

type LedBoardControlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *LedBoardControlReply) Reset() {
	*x = LedBoardControlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedBoardControlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedBoardControlReply) ProtoMessage() {}

func (x *LedBoardControlReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedBoardControlReply.ProtoReflect.Descriptor instead.
func (*LedBoardControlReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{177}
}

func (x *LedBoardControlReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type AppIdBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Bond     bool   `protobuf:"varint,2,opt,name=bond,proto3" json:"bond,omitempty"`
	AppId    string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppIdBond) Reset() {
	*x = AppIdBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIdBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIdBond) ProtoMessage() {}

func (x *AppIdBond) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIdBond.ProtoReflect.Descriptor instead.
func (*AppIdBond) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{178}
}

func (x *AppIdBond) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AppIdBond) GetBond() bool {
	if x != nil {
		return x.Bond
	}
	return false
}

func (x *AppIdBond) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppIdBondReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *AppIdBondReply) Reset() {
	*x = AppIdBondReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIdBondReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIdBondReply) ProtoMessage() {}

func (x *AppIdBondReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIdBondReply.ProtoReflect.Descriptor instead.
func (*AppIdBondReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{179}
}

func (x *AppIdBondReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DeviceTimeGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceTimeGetReply) Reset() {
	*x = DeviceTimeGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTimeGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTimeGetReply) ProtoMessage() {}

func (x *DeviceTimeGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTimeGetReply.ProtoReflect.Descriptor instead.
func (*DeviceTimeGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{180}
}

func (x *DeviceTimeGetReply) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type JoinTenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *JoinTenant) Reset() {
	*x = JoinTenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTenant) ProtoMessage() {}

func (x *JoinTenant) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTenant.ProtoReflect.Descriptor instead.
func (*JoinTenant) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{181}
}

func (x *JoinTenant) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JoinTenant) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type JoinTenantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *JoinTenantReply) Reset() {
	*x = JoinTenantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTenantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTenantReply) ProtoMessage() {}

func (x *JoinTenantReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTenantReply.ProtoReflect.Descriptor instead.
func (*JoinTenantReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{182}
}

func (x *JoinTenantReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type DebugConnectionCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Enable   bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *DebugConnectionCfgSet) Reset() {
	*x = DebugConnectionCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugConnectionCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugConnectionCfgSet) ProtoMessage() {}

func (x *DebugConnectionCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugConnectionCfgSet.ProtoReflect.Descriptor instead.
func (*DebugConnectionCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{183}
}

func (x *DebugConnectionCfgSet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DebugConnectionCfgSet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type DebugConnectionCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *DebugConnectionCfgSetReply) Reset() {
	*x = DebugConnectionCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugConnectionCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugConnectionCfgSetReply) ProtoMessage() {}

func (x *DebugConnectionCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugConnectionCfgSetReply.ProtoReflect.Descriptor instead.
func (*DebugConnectionCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{184}
}

func (x *DebugConnectionCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SpeakerVolumeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *SpeakerVolume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *SpeakerVolumeSet) Reset() {
	*x = SpeakerVolumeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerVolumeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerVolumeSet) ProtoMessage() {}

func (x *SpeakerVolumeSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerVolumeSet.ProtoReflect.Descriptor instead.
func (*SpeakerVolumeSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{185}
}

func (x *SpeakerVolumeSet) GetVolume() *SpeakerVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type SpeakerVolumeSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SpeakerVolumeSetReply) Reset() {
	*x = SpeakerVolumeSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerVolumeSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerVolumeSetReply) ProtoMessage() {}

func (x *SpeakerVolumeSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerVolumeSetReply.ProtoReflect.Descriptor instead.
func (*SpeakerVolumeSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{186}
}

func (x *SpeakerVolumeSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SpeakerVolumeGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *SpeakerVolume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *SpeakerVolumeGetReply) Reset() {
	*x = SpeakerVolumeGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerVolumeGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerVolumeGetReply) ProtoMessage() {}

func (x *SpeakerVolumeGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerVolumeGetReply.ProtoReflect.Descriptor instead.
func (*SpeakerVolumeGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{187}
}

func (x *SpeakerVolumeGetReply) GetVolume() *SpeakerVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type EqCfgSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EqCfg *EqCfg `protobuf:"bytes,1,opt,name=eq_cfg,json=eqCfg,proto3" json:"eq_cfg,omitempty"`
}

func (x *EqCfgSet) Reset() {
	*x = EqCfgSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqCfgSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqCfgSet) ProtoMessage() {}

func (x *EqCfgSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqCfgSet.ProtoReflect.Descriptor instead.
func (*EqCfgSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{188}
}

func (x *EqCfgSet) GetEqCfg() *EqCfg {
	if x != nil {
		return x.EqCfg
	}
	return nil
}

type EqCfgSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *EqCfgSetReply) Reset() {
	*x = EqCfgSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqCfgSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqCfgSetReply) ProtoMessage() {}

func (x *EqCfgSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqCfgSetReply.ProtoReflect.Descriptor instead.
func (*EqCfgSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{189}
}

func (x *EqCfgSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type UChannelSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UChannel int32 `protobuf:"varint,1,opt,name=u_channel,json=uChannel,proto3" json:"u_channel,omitempty"`
}

func (x *UChannelSet) Reset() {
	*x = UChannelSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UChannelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UChannelSet) ProtoMessage() {}

func (x *UChannelSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UChannelSet.ProtoReflect.Descriptor instead.
func (*UChannelSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{190}
}

func (x *UChannelSet) GetUChannel() int32 {
	if x != nil {
		return x.UChannel
	}
	return 0
}

type UChannelSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *UChannelSetReply) Reset() {
	*x = UChannelSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UChannelSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UChannelSetReply) ProtoMessage() {}

func (x *UChannelSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UChannelSetReply.ProtoReflect.Descriptor instead.
func (*UChannelSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{191}
}

func (x *UChannelSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type HowlingSuppressionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 移频百分比 0~100
	FreqShift int32 `protobuf:"varint,2,opt,name=freq_shift,json=freqShift,proto3" json:"freq_shift,omitempty"`
}

func (x *HowlingSuppressionSet) Reset() {
	*x = HowlingSuppressionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HowlingSuppressionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HowlingSuppressionSet) ProtoMessage() {}

func (x *HowlingSuppressionSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HowlingSuppressionSet.ProtoReflect.Descriptor instead.
func (*HowlingSuppressionSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{192}
}

func (x *HowlingSuppressionSet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *HowlingSuppressionSet) GetFreqShift() int32 {
	if x != nil {
		return x.FreqShift
	}
	return 0
}

type HowlingSuppressionSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *HowlingSuppressionSetReply) Reset() {
	*x = HowlingSuppressionSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HowlingSuppressionSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HowlingSuppressionSetReply) ProtoMessage() {}

func (x *HowlingSuppressionSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HowlingSuppressionSetReply.ProtoReflect.Descriptor instead.
func (*HowlingSuppressionSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{193}
}

func (x *HowlingSuppressionSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type AudioMixSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *AudioMixSet) Reset() {
	*x = AudioMixSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMixSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMixSet) ProtoMessage() {}

func (x *AudioMixSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMixSet.ProtoReflect.Descriptor instead.
func (*AudioMixSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{194}
}

func (x *AudioMixSet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type AudioMixSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *AudioMixSetReply) Reset() {
	*x = AudioMixSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMixSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMixSetReply) ProtoMessage() {}

func (x *AudioMixSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMixSetReply.ProtoReflect.Descriptor instead.
func (*AudioMixSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{195}
}

func (x *AudioMixSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type AudioSuppressionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *AudioSuppressionSet) Reset() {
	*x = AudioSuppressionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSuppressionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSuppressionSet) ProtoMessage() {}

func (x *AudioSuppressionSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSuppressionSet.ProtoReflect.Descriptor instead.
func (*AudioSuppressionSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{196}
}

func (x *AudioSuppressionSet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type AudioSuppressionSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *AudioSuppressionSetReply) Reset() {
	*x = AudioSuppressionSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSuppressionSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSuppressionSetReply) ProtoMessage() {}

func (x *AudioSuppressionSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSuppressionSetReply.ProtoReflect.Descriptor instead.
func (*AudioSuppressionSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{197}
}

func (x *AudioSuppressionSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type PaReinitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *PaReinitSet) Reset() {
	*x = PaReinitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaReinitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaReinitSet) ProtoMessage() {}

func (x *PaReinitSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaReinitSet.ProtoReflect.Descriptor instead.
func (*PaReinitSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{198}
}

func (x *PaReinitSet) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type PaReinitSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *PaReinitSetReply) Reset() {
	*x = PaReinitSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaReinitSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaReinitSetReply) ProtoMessage() {}

func (x *PaReinitSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaReinitSetReply.ProtoReflect.Descriptor instead.
func (*PaReinitSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{199}
}

func (x *PaReinitSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type LowShelfCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 频点
	Fc int32 `protobuf:"varint,1,opt,name=fc,proto3" json:"fc,omitempty"`
	// 增益
	Gain int32 `protobuf:"varint,2,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *LowShelfCfg) Reset() {
	*x = LowShelfCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowShelfCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowShelfCfg) ProtoMessage() {}

func (x *LowShelfCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowShelfCfg.ProtoReflect.Descriptor instead.
func (*LowShelfCfg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{200}
}

func (x *LowShelfCfg) GetFc() int32 {
	if x != nil {
		return x.Fc
	}
	return 0
}

func (x *LowShelfCfg) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

type LowShelfSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cfg *LowShelfCfg `protobuf:"bytes,1,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *LowShelfSet) Reset() {
	*x = LowShelfSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowShelfSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowShelfSet) ProtoMessage() {}

func (x *LowShelfSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowShelfSet.ProtoReflect.Descriptor instead.
func (*LowShelfSet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{201}
}

func (x *LowShelfSet) GetCfg() *LowShelfCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type LowShelfSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *LowShelfSetReply) Reset() {
	*x = LowShelfSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowShelfSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowShelfSetReply) ProtoMessage() {}

func (x *LowShelfSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowShelfSetReply.ProtoReflect.Descriptor instead.
func (*LowShelfSetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{202}
}

func (x *LowShelfSetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type FirmwareDownloadProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress int32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *FirmwareDownloadProgress) Reset() {
	*x = FirmwareDownloadProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareDownloadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareDownloadProgress) ProtoMessage() {}

func (x *FirmwareDownloadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareDownloadProgress.ProtoReflect.Descriptor instead.
func (*FirmwareDownloadProgress) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{203}
}

func (x *FirmwareDownloadProgress) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type SpeakerChannelStatusGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Start    bool   `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *SpeakerChannelStatusGet) Reset() {
	*x = SpeakerChannelStatusGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerChannelStatusGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerChannelStatusGet) ProtoMessage() {}

func (x *SpeakerChannelStatusGet) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerChannelStatusGet.ProtoReflect.Descriptor instead.
func (*SpeakerChannelStatusGet) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{204}
}

func (x *SpeakerChannelStatusGet) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SpeakerChannelStatusGet) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

type SpeakerChannelStatusGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *SpeakerChannelStatusGetReply) Reset() {
	*x = SpeakerChannelStatusGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerChannelStatusGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerChannelStatusGetReply) ProtoMessage() {}

func (x *SpeakerChannelStatusGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerChannelStatusGetReply.ProtoReflect.Descriptor instead.
func (*SpeakerChannelStatusGetReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{205}
}

func (x *SpeakerChannelStatusGetReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type SpeakerChannelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SpeakerChannelStatus) Reset() {
	*x = SpeakerChannelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerChannelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerChannelStatus) ProtoMessage() {}

func (x *SpeakerChannelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerChannelStatus.ProtoReflect.Descriptor instead.
func (*SpeakerChannelStatus) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{206}
}

func (x *SpeakerChannelStatus) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpeakerChannelStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DeviceAdvertiseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备名
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 设备别名
	DeviceAliase string `protobuf:"bytes,2,opt,name=device_aliase,json=deviceAliase,proto3" json:"device_aliase,omitempty"`
	// 产品名
	ProductName string `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// 网络配置信息
	Netcfg *NetCfg `protobuf:"bytes,4,opt,name=netcfg,proto3" json:"netcfg,omitempty"`
	// 输出通道
	OutChannel *ChannelPack `protobuf:"bytes,5,opt,name=out_channel,json=outChannel,proto3" json:"out_channel,omitempty"`
	// 设备所属租户
	TenantId string `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *DeviceAdvertiseData) Reset() {
	*x = DeviceAdvertiseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAdvertiseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAdvertiseData) ProtoMessage() {}

func (x *DeviceAdvertiseData) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAdvertiseData.ProtoReflect.Descriptor instead.
func (*DeviceAdvertiseData) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{207}
}

func (x *DeviceAdvertiseData) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceAdvertiseData) GetDeviceAliase() string {
	if x != nil {
		return x.DeviceAliase
	}
	return ""
}

func (x *DeviceAdvertiseData) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DeviceAdvertiseData) GetNetcfg() *NetCfg {
	if x != nil {
		return x.Netcfg
	}
	return nil
}

func (x *DeviceAdvertiseData) GetOutChannel() *ChannelPack {
	if x != nil {
		return x.OutChannel
	}
	return nil
}

func (x *DeviceAdvertiseData) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type FactoryTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    FactoryTestId `protobuf:"varint,1,opt,name=id,proto3,enum=proto.FactoryTestId" json:"id,omitempty"`
	Start bool          `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	Text  string        `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// 文字显示方式
	TextDisplayStyle TEXT_DISPLAY_STYLE `protobuf:"varint,4,opt,name=text_display_style,json=textDisplayStyle,proto3,enum=proto.TEXT_DISPLAY_STYLE" json:"text_display_style,omitempty"`
	// 文字显示速度
	TextDisplaySpeed TEXT_DISPLAY_SPEED `protobuf:"varint,5,opt,name=text_display_speed,json=textDisplaySpeed,proto3,enum=proto.TEXT_DISPLAY_SPEED" json:"text_display_speed,omitempty"`
	// 文字显示持续时间（分钟）
	TextDisplayDuration uint32 `protobuf:"varint,6,opt,name=text_display_duration,json=textDisplayDuration,proto3" json:"text_display_duration,omitempty"`
	BackupChannel       bool   `protobuf:"varint,7,opt,name=backup_channel,json=backupChannel,proto3" json:"backup_channel,omitempty"`
}

func (x *FactoryTest) Reset() {
	*x = FactoryTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryTest) ProtoMessage() {}

func (x *FactoryTest) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryTest.ProtoReflect.Descriptor instead.
func (*FactoryTest) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{208}
}

func (x *FactoryTest) GetId() FactoryTestId {
	if x != nil {
		return x.Id
	}
	return FactoryTestId_LAN_TEST
}

func (x *FactoryTest) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *FactoryTest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FactoryTest) GetTextDisplayStyle() TEXT_DISPLAY_STYLE {
	if x != nil {
		return x.TextDisplayStyle
	}
	return TEXT_DISPLAY_STYLE_STATIC
}

func (x *FactoryTest) GetTextDisplaySpeed() TEXT_DISPLAY_SPEED {
	if x != nil {
		return x.TextDisplaySpeed
	}
	return TEXT_DISPLAY_SPEED_LOW
}

func (x *FactoryTest) GetTextDisplayDuration() uint32 {
	if x != nil {
		return x.TextDisplayDuration
	}
	return 0
}

func (x *FactoryTest) GetBackupChannel() bool {
	if x != nil {
		return x.BackupChannel
	}
	return false
}

type FactoryTestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *FactoryTestReply) Reset() {
	*x = FactoryTestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryTestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryTestReply) ProtoMessage() {}

func (x *FactoryTestReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryTestReply.ProtoReflect.Descriptor instead.
func (*FactoryTestReply) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{209}
}

func (x *FactoryTestReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_SUCCEED
}

type PbMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息字
	Id MsgId `protobuf:"varint,1,opt,name=id,proto3,enum=proto.MsgId" json:"id,omitempty"`
	// 消息内容
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 消息来源
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// 消息目标
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// 消息是否转发
	Transfer bool `protobuf:"varint,5,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// 转发目标
	TransferTarget string `protobuf:"bytes,6,opt,name=transfer_target,json=transferTarget,proto3" json:"transfer_target,omitempty"`
}

func (x *PbMsg) Reset() {
	*x = PbMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmsg_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbMsg) ProtoMessage() {}

func (x *PbMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmsg_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbMsg.ProtoReflect.Descriptor instead.
func (*PbMsg) Descriptor() ([]byte, []int) {
	return file_pbmsg_proto_rawDescGZIP(), []int{210}
}

func (x *PbMsg) GetId() MsgId {
	if x != nil {
		return x.Id
	}
	return MsgId_INVALID_ID
}

func (x *PbMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PbMsg) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PbMsg) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PbMsg) GetTransfer() bool {
	if x != nil {
		return x.Transfer
	}
	return false
}

func (x *PbMsg) GetTransferTarget() string {
	if x != nil {
		return x.TransferTarget
	}
	return ""
}

var File_pbmsg_proto protoreflect.FileDescriptor

var file_pbmsg_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x62, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7e, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x58, 0x0a, 0x07, 0x44, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x25, 0x0a, 0x07, 0x44, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x68, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x06,
	0x4e, 0x63, 0x73, 0x43, 0x66, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x69,
	0x70, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0xb6, 0x08, 0x0a, 0x06, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6e, 0x65,
	0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6e, 0x73, 0x32, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x68, 0x63, 0x70, 0x49, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x68, 0x63, 0x70, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x68, 0x63, 0x70, 0x44, 0x6e, 0x73, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69,
	0x66, 0x69, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x41, 0x70, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x70, 0x5f,
	0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x41, 0x70,
	0x49, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x70, 0x5f, 0x6e, 0x65,
	0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x66,
	0x69, 0x41, 0x70, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69,
	0x66, 0x69, 0x5f, 0x69, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x66,
	0x69, 0x49, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x6e,
	0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69,
	0x66, 0x69, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x66,
	0x69, 0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69,
	0x66, 0x69, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x64,
	0x6e, 0x73, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x44,
	0x6e, 0x73, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x74, 0x73, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x71, 0x74, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x06, 0x6e, 0x63, 0x73, 0x63, 0x66, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x63, 0x73, 0x43, 0x66, 0x67, 0x52, 0x06,
	0x6e, 0x63, 0x73, 0x63, 0x66, 0x67, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x69, 0x70, 0x63, 0x66, 0x67,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x70, 0x43, 0x66, 0x67, 0x52, 0x06, 0x73, 0x69, 0x70, 0x63, 0x66, 0x67, 0x22, 0x27, 0x0a,
	0x09, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67,
	0x22, 0x48, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x66, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x65, 0x74, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0x37, 0x0a, 0x0e, 0x4e, 0x65,
	0x74, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x09, 0x4e, 0x63, 0x73, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03,
	0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x63, 0x73, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0x37, 0x0a,
	0x0e, 0x4e, 0x63, 0x73, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x22, 0x45, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x42, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x69, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x13, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22,
	0x31, 0x0a, 0x0d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x50, 0x61, 0x63, 0x6b,
	0x12, 0x20, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x52, 0x02,
	0x72, 0x66, 0x22, 0x2d, 0x0a, 0x08, 0x53, 0x6f, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x21,
	0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67,
	0x73, 0x22, 0xd1, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x41, 0x72, 0x65, 0x61, 0x22, 0xaf, 0x05, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x66,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77,
	0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x71, 0x5f, 0x63, 0x66,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x71, 0x43, 0x66, 0x67, 0x52, 0x05, 0x65, 0x71, 0x43, 0x66, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x6f, 0x77,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f,
	0x77, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x72, 0x65, 0x71, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x6d, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x4d, 0x69, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x12,
	0x36, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x66, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x66, 0x67, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x53,
	0x68, 0x65, 0x6c, 0x66, 0x43, 0x66, 0x67, 0x12, 0x3e, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0b, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a,
	0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x13, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x63, 0x66, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22,
	0x52, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x03, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x52, 0x03,
	0x63, 0x66, 0x67, 0x22, 0x3c, 0x0a, 0x13, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43,
	0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x4c, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x59, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x11, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x22, 0x66, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x3f, 0x0a, 0x16, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb7, 0x09, 0x0a,
	0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68,
	0x61, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x2e,
	0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61,
	0x73, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x17, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x41, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x61,
	0x64, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x66, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x66, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x65, 0x78, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x66, 0x67,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x43, 0x66, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x43, 0x66, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x71, 0x74, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x71, 0x74, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e,
	0x65, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x75, 0x74, 0x31, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x75, 0x74, 0x31,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x75,
	0x74, 0x32, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x75, 0x74, 0x32, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x05, 0x45, 0x71, 0x43, 0x66, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x71, 0x5f,
	0x37, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x71, 0x37, 0x35, 0x12, 0x15,
	0x0a, 0x06, 0x65, 0x71, 0x5f, 0x31, 0x32, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x71, 0x31, 0x32, 0x35, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x71, 0x5f, 0x32, 0x35, 0x30, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x71, 0x32, 0x35, 0x30, 0x12, 0x15, 0x0a, 0x06,
	0x65, 0x71, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x71,
	0x35, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x71, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x71, 0x31, 0x30, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x71, 0x5f, 0x32, 0x30, 0x30, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65,
	0x71, 0x32, 0x30, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x71, 0x5f, 0x34, 0x30, 0x30, 0x30,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x71, 0x34, 0x30, 0x30, 0x30, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x71, 0x5f, 0x38, 0x30, 0x30, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x65, 0x71, 0x38, 0x30, 0x30, 0x30, 0x22, 0xba, 0x0b, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x69, 0x66, 0x69, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x63, 0x66, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x43,
	0x66, 0x67, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x63, 0x66, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61,
	0x63, 0x6b, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x09, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73,
	0x63, 0x43, 0x66, 0x67, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x63, 0x43, 0x66, 0x67, 0x12, 0x2f, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x43, 0x66, 0x67, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x12, 0x38,
	0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x63, 0x66, 0x67, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x52, 0x0c, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x4e, 0x0a, 0x13, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x12, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x66, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x52, 0x0b, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x62, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x0c, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x64,
	0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x64, 0x61, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x6c, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x69,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x69,
	0x7a, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e,
	0x52, 0x07, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x4b, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x4a, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x22, 0x46, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x49, 0x0a, 0x0c, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0x36, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x68, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22, 0x38, 0x0a, 0x0f, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x22, 0x1f, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x25, 0x0a,
	0x07, 0x53, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x04, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x0c, 0x53, 0x6f, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x52,
	0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x64, 0x69, 0x73, 0x6b, 0x12,
	0x2b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x53, 0x6f, 0x6e, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x38, 0x0a, 0x0f, 0x53, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a,
	0x0a, 0x0c, 0x55, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x55, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x6f, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f,
	0x6e, 0x67, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x50, 0x61,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6e, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x74, 0x73, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x74, 0x73, 0x70, 0x43, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x61, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6e, 0x65, 0x52,
	0x12, 0x70, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b,
	0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x4f,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x54, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x3c, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x41, 0x0a, 0x11, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x53, 0x0a, 0x0d, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x17, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x45, 0x0a,
	0x1c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x18, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x31, 0x5f, 0x64, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x31, 0x44, 0x62, 0x12, 0x16, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x32, 0x5f, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x32, 0x44, 0x62, 0x12, 0x16, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x33, 0x5f, 0x64, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x33, 0x44, 0x62, 0x12, 0x16, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x34, 0x5f, 0x64, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x34, 0x44, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x62,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x44, 0x62, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x62, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x12, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x31, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x31, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x32, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x32, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x33, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x33, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x34, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x34, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x22, 0xc1, 0x03, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x09, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46,
	0x72, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22,
	0x2a, 0x0a, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x46, 0x72, 0x65, 0x71, 0x52, 0x02, 0x72, 0x66, 0x22, 0x4c, 0x0a, 0x0c, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46,
	0x72, 0x65, 0x71, 0x52, 0x02, 0x72, 0x66, 0x22, 0x3a, 0x0a, 0x11, 0x52, 0x61, 0x64, 0x69, 0x6f,
	0x46, 0x72, 0x65, 0x71, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71,
	0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x52, 0x02, 0x72,
	0x66, 0x22, 0x3a, 0x0a, 0x11, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a,
	0x0f, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x02,
	0x72, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x52, 0x02, 0x72, 0x66, 0x22, 0x3d,
	0x0a, 0x14, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x3b, 0x0a, 0x12, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x31,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x31, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x5f, 0x32, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x32, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x33, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x33, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x34, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x34, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x31, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x31, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x32,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x32, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x5f, 0x33, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x33, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x34, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x34, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f,
	0x31, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x31, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x5f, 0x32, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x32, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x33, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x33, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x34, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x34, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c,
	0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x16,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x2b, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x12,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x3e,
	0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x41,
	0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x6d, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x3f, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x70, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x0c, 0x53, 0x6f, 0x6e, 0x67, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x0a,
	0x11, 0x53, 0x6f, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x12, 0x53, 0x6f, 0x6e,
	0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x6f,
	0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x4f, 0x0a, 0x0c, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f,
	0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x72, 0x65,
	0x6f, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x09, 0x4c, 0x65, 0x64, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x4c,
	0x65, 0x64, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x0e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3c, 0x0a,
	0x13, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x0e, 0x41,
	0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6d, 0x70,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x41, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x28, 0x0a, 0x0a, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x4d,
	0x69, 0x73, 0x63, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x63, 0x66,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x69, 0x73, 0x63, 0x43, 0x66, 0x67, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x63, 0x43, 0x66, 0x67,
	0x22, 0x2a, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x11,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x52, 0x09,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x22, 0x5b, 0x0a, 0x0c, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f,
	0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x43, 0x66, 0x67, 0x22, 0x3a, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x52, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x16, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x12,
	0x37, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x12, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x22, 0x33, 0x0a, 0x15,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x7c, 0x0a, 0x1a, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x6f, 0x0a, 0x18, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x46, 0x0a, 0x1d, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x1a, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x0c,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x12, 0x36, 0x0a, 0x17,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x62,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x67, 0x0a, 0x0f,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x62,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x52, 0x0c, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x43, 0x66, 0x67, 0x22, 0x3d, 0x0a, 0x14, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x0f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x14, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x43, 0x66, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f,
	0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x52, 0x0c,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x43, 0x66, 0x67, 0x22, 0x58, 0x0a, 0x0a,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22,
	0x50, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x70, 0x22, 0x3f, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x70, 0x61,
	0x63, 0x6b, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x22, 0x7a, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a,
	0x15, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x3f, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x5a, 0x0a, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x40, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x22, 0x19, 0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x22, 0x35, 0x0a, 0x0c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x4c, 0x65, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x14,
	0x4c, 0x65, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x45, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0f, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x43, 0x0a, 0x1a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2c, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x2f,
	0x0a, 0x08, 0x45, 0x71, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x71,
	0x5f, 0x63, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x71, 0x43, 0x66, 0x67, 0x52, 0x05, 0x65, 0x71, 0x43, 0x66, 0x67, 0x22,
	0x36, 0x0a, 0x0d, 0x45, 0x71, 0x43, 0x66, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x0b, 0x55, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x10, 0x55, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e,
	0x0a, 0x15, 0x48, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x53, 0x68, 0x69, 0x66, 0x74, 0x22, 0x43,
	0x0a, 0x1a, 0x48, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x69, 0x78, 0x53,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x4d, 0x69, 0x78, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x50, 0x61, 0x52, 0x65, 0x69,
	0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x39,
	0x0a, 0x10, 0x50, 0x61, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x4c, 0x6f, 0x77,
	0x53, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x66, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x22, 0x33, 0x0a, 0x0b,
	0x4c, 0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x63,
	0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66,
	0x67, 0x22, 0x39, 0x0a, 0x10, 0x4c, 0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x18,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x22, 0x45, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3e, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6e, 0x65, 0x74,
	0x63, 0x66, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x63, 0x66, 0x67,
	0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x65, 0x78, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x39, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x05, 0x50,
	0x62, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2a, 0xaf, 0x22, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0xdc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xdd, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x48,
	0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0xde, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xdf, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xe0, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xe1,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xe2, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xe3, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xe4, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xe5, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xe6, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0xe7, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xe8, 0x01, 0x12, 0x0e, 0x0a,
	0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0xe9, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xea, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0xeb, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0xec, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0xed, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xee, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xef, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf0,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0xf1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf2, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0xf3, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xf4, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xf5, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf6,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xf7, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xf8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0xff, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0x80, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x81, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x82,
	0x02, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x83, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x84, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x55,
	0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x85, 0x02,
	0x12, 0x19, 0x0a, 0x14, 0x55, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x86, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x4f,
	0x55, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x87,
	0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x88, 0x02, 0x12, 0x15, 0x0a,
	0x10, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x89, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x8a,
	0x02, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x47, 0x45, 0x54, 0x10, 0x8b, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x8c,
	0x02, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x10, 0x8d, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x8e, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x10, 0x93, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x94, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x53,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x95, 0x02, 0x12, 0x13, 0x0a,
	0x0e, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0xa6, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xa7, 0x02, 0x12, 0x13, 0x0a,
	0x0e, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0xa8, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xa9, 0x02, 0x12, 0x13, 0x0a,
	0x0e, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0xaa, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xab, 0x02, 0x12, 0x16, 0x0a,
	0x11, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0xac, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xad, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xae, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xaf, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xb0, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xb1, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0xb2, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xb3, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xb4, 0x02, 0x12, 0x1b, 0x0a, 0x16,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xb5, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xb6, 0x02,
	0x12, 0x1b, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xb7, 0x02, 0x12, 0x0e, 0x0a,
	0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xb8, 0x02, 0x12, 0x14, 0x0a,
	0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xb9, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xba, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xbb, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0xbc, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xbd, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xbe, 0x02, 0x12, 0x15, 0x0a, 0x10,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xbf, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0xc0, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xc1,
	0x02, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xc2, 0x02, 0x12, 0x1f, 0x0a, 0x1a,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xc3, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0xc4, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xc5, 0x02, 0x12,
	0x12, 0x0a, 0x0d, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0xc6, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xc7, 0x02, 0x12, 0x19, 0x0a,
	0x14, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xc8, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x54, 0x45, 0x52,
	0x45, 0x4f, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xc9, 0x02, 0x12, 0x19, 0x0a,
	0x14, 0x53, 0x54, 0x45, 0x52, 0x45, 0x4f, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xca, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xcb, 0x02,
	0x12, 0x1c, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xcc, 0x02, 0x12, 0x19,
	0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xcd, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xce, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xcf,
	0x02, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0xd0, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xd1, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xd2, 0x02,
	0x12, 0x19, 0x0a, 0x14, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xd3, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xd4, 0x02,
	0x12, 0x19, 0x0a, 0x14, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xd5, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x4d,
	0x49, 0x53, 0x43, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xd6, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0xd7, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x4d, 0x50, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xd8, 0x02, 0x12,
	0x1c, 0x0a, 0x17, 0x41, 0x4d, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x46, 0x47,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xd9, 0x02, 0x12, 0x16, 0x0a,
	0x11, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47,
	0x45, 0x54, 0x10, 0xda, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f,
	0x54, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xdb, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48,
	0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xdc, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42,
	0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xdd, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x4c, 0x55,
	0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x47, 0x45, 0x54, 0x10, 0xde, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x4c, 0x55, 0x45, 0x54,
	0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xdf, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42,
	0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0xe0, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x4c, 0x55,
	0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xe1, 0x02, 0x12, 0x1f, 0x0a,
	0x1a, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xe2, 0x02, 0x12, 0x25,
	0x0a, 0x20, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x57, 0x48, 0x49, 0x54,
	0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xe3, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0xe4, 0x02, 0x12, 0x1d,
	0x0a, 0x18, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xe5, 0x02, 0x12, 0x0e, 0x0a,
	0x09, 0x41, 0x50, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xe6, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0xe7,
	0x02, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xe8, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0xe9, 0x02, 0x12, 0x11, 0x0a,
	0x0c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xea, 0x02,
	0x12, 0x17, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xeb, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x4b, 0x45, 0x59,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0xec, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x53, 0x4e, 0x10, 0xed, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xee, 0x02, 0x12, 0x16, 0x0a,
	0x11, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0xef, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0xf0, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x10, 0xf1, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf2, 0x02, 0x12, 0x19, 0x0a,
	0x14, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f, 0x43, 0x46,
	0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xf3, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf4, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0xf5, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x41,
	0x54, 0x52, 0x49, 0x58, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xf6, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xf7, 0x02, 0x12, 0x1b, 0x0a, 0x16,
	0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf8, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xf9, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xfa, 0x02, 0x12, 0x15, 0x0a,
	0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53,
	0x45, 0x10, 0xfb, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xfc,
	0x02, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xfd, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0xfe, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x5f,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xff, 0x02, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x80, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x81, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x82, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x83, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x41,
	0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x84, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x4c, 0x41,
	0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x85,
	0x03, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43,
	0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x86, 0x03, 0x12,
	0x17, 0x0a, 0x12, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x87, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x50, 0x45, 0x41,
	0x4b, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0x88, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x50, 0x45, 0x41, 0x4b,
	0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x89, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x8a, 0x03, 0x12,
	0x0f, 0x0a, 0x0a, 0x45, 0x51, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x8b, 0x03,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x51, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0x8c, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x8d, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x55,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0x8e, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x48, 0x4f, 0x57, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x8f, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x48, 0x4f, 0x57, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0x90, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x4d, 0x49, 0x58, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x91, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x49, 0x58, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0x92, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x93, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x94, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x10, 0x95, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x4e, 0x43, 0x53, 0x5f, 0x43, 0x46, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x96, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x4e, 0x43, 0x53, 0x5f, 0x43, 0x46,
	0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x97, 0x03, 0x12, 0x1f,
	0x0a, 0x1a, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x98, 0x03, 0x12,
	0x25, 0x0a, 0x20, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0x99, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x9a, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x5f, 0x52, 0x45, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x9b, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x5f, 0x52, 0x45,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x9c,
	0x03, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x9d, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x48, 0x45,
	0x4c, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x9e, 0x03, 0x12,
	0x18, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x9f, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xa0, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x4f, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0xa1, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0xf4, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10,
	0xf5, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0xf6, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x46,
	0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xf7, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x46, 0x47,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xf8, 0x03, 0x2a, 0xad, 0x02,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x0e, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x19, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x19, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a,
	0x09, 0x41, 0x52, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xfb, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x10, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a,
	0x09, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xf9, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18,
	0x0a, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0xf7, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x55, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x55, 0x4e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0x25, 0x0a,
	0x0c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x45, 0x50, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x10, 0x01, 0x2a, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x14, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x47, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x2a, 0x94, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x31, 0x32, 0x35, 0x57, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x32, 0x35, 0x30, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x33, 0x36, 0x30, 0x57, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x35, 0x30, 0x30, 0x57, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x37, 0x32, 0x30, 0x57, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x57, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x31, 0x35, 0x30, 0x30, 0x57, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0x01, 0x2a, 0x61,
	0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x04, 0x2a, 0x5c, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49,
	0x58, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0xff, 0x01, 0x2a,
	0xca, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f,
	0x49, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0a, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x58, 0x43, 0x39, 0x30, 0x30, 0x30, 0x5f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x58, 0x43, 0x39, 0x30, 0x30, 0x30, 0x5f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x49, 0x4e, 0x4b, 0x5f,
	0x4e, 0x4f, 0x49, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0f, 0x2a, 0x3c, 0x0a, 0x12,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x12, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a,
	0x45, 0x0a, 0x0c, 0x53, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x4f, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41,
	0x53, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x53, 0x4f, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x0c, 0x50, 0x61, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x2a, 0xbf, 0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x31, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x32,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f,
	0x33, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x34, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x4f, 0x4e, 0x47, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x35,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f,
	0x36, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x09, 0x2a, 0xb9, 0x01, 0x0a, 0x1e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x45, 0x50, 0x41,
	0x4c, 0x49, 0x56, 0x45, 0x10, 0x08, 0x2a, 0x49, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x5f, 0x45, 0x49, 0x47, 0x48, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x57, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x57, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x5f, 0x31, 0x10,
	0x04, 0x2a, 0x2d, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x49, 0x54, 0x10, 0x02,
	0x2a, 0x40, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x64, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x45, 0x59,
	0x5f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4b,
	0x45, 0x59, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x2a, 0x35, 0x0a, 0x11, 0x4c, 0x65, 0x64, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a,
	0xd8, 0x06, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x31, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x32,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x33, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x34, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49, 0x43, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x31,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x5f, 0x32, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x41,
	0x52, 0x4d, 0x5f, 0x33, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x34, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x54, 0x43, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x31, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x32, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x0e, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x33, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x34,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x11, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x12, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x13, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x45,
	0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x17,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45,
	0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x31, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x32, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x1b,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x33,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x34, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x31, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f,
	0x32, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x5f, 0x41,
	0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x33, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x20, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x34, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x22,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x24, 0x12, 0x1f,
	0x0a, 0x1b, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x25, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x26, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f,
	0x4c, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x27, 0x42, 0x2d, 0x48, 0x03, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pbmsg_proto_rawDescOnce sync.Once
	file_pbmsg_proto_rawDescData = file_pbmsg_proto_rawDesc
)

func file_pbmsg_proto_rawDescGZIP() []byte {
	file_pbmsg_proto_rawDescOnce.Do(func() {
		file_pbmsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbmsg_proto_rawDescData)
	})
	return file_pbmsg_proto_rawDescData
}

var file_pbmsg_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_pbmsg_proto_msgTypes = make([]protoimpl.MessageInfo, 211)
var file_pbmsg_proto_goTypes = []any{
	(MsgId)(0),                            // 0: proto.MsgId
	(Status)(0),                           // 1: proto.Status
	(BoardBtnType)(0),                     // 2: proto.BoardBtnType
	(AlarmInStatus)(0),                    // 3: proto.AlarmInStatus
	(AlarmInTriggerMethod)(0),             // 4: proto.AlarmInTriggerMethod
	(ChannelPower)(0),                     // 5: proto.ChannelPower
	(RepeatType)(0),                       // 6: proto.RepeatType
	(AudioSource)(0),                      // 7: proto.AudioSource
	(TaskType)(0),                         // 8: proto.TaskType
	(TEXT_DISPLAY_STYLE)(0),               // 9: proto.TEXT_DISPLAY_STYLE
	(TEXT_DISPLAY_SPEED)(0),               // 10: proto.TEXT_DISPLAY_SPEED
	(SongPlayType)(0),                     // 11: proto.SongPlayType
	(LogType)(0),                          // 12: proto.LogType
	(FileType)(0),                         // 13: proto.FileType
	(PaStreamType)(0),                     // 14: proto.PaStreamType
	(VolumeType)(0),                       // 15: proto.VolumeType
	(SoundConsoleTaskControlCommand)(0),   // 16: proto.SoundConsoleTaskControlCommand
	(DevicePower)(0),                      // 17: proto.DevicePower
	(TaskSyncType)(0),                     // 18: proto.TaskSyncType
	(TaskSyncStatus)(0),                   // 19: proto.TaskSyncStatus
	(Key)(0),                              // 20: proto.Key
	(LedBoardControlId)(0),                // 21: proto.LedBoardControlId
	(FactoryTestId)(0),                    // 22: proto.FactoryTestId
	(*UserLogin)(nil),                     // 23: proto.UserLogin
	(*UserLoginReply)(nil),                // 24: proto.UserLoginReply
	(*DateSet)(nil),                       // 25: proto.DateSet
	(*DateSetReply)(nil),                  // 26: proto.DateSetReply
	(*DateGet)(nil),                       // 27: proto.DateGet
	(*DateGetReply)(nil),                  // 28: proto.DateGetReply
	(*NcsCfg)(nil),                        // 29: proto.NcsCfg
	(*SipCfg)(nil),                        // 30: proto.SipCfg
	(*NetCfg)(nil),                        // 31: proto.NetCfg
	(*NetCfgGet)(nil),                     // 32: proto.NetCfgGet
	(*NetCfgGetReply)(nil),                // 33: proto.NetCfgGetReply
	(*NetCfgSet)(nil),                     // 34: proto.NetCfgSet
	(*NetCfgSetReply)(nil),                // 35: proto.NetCfgSetReply
	(*NcsCfgSet)(nil),                     // 36: proto.NcsCfgSet
	(*NcsCfgSetReply)(nil),                // 37: proto.NcsCfgSetReply
	(*ExtendBoardPack)(nil),               // 38: proto.ExtendBoardPack
	(*ExtendBoard)(nil),                   // 39: proto.ExtendBoard
	(*BoardAttr)(nil),                     // 40: proto.BoardAttr
	(*ExtendBoardGet)(nil),                // 41: proto.ExtendBoardGet
	(*ExtendBoardGetReply)(nil),           // 42: proto.ExtendBoardGetReply
	(*ExtendBoardSet)(nil),                // 43: proto.ExtendBoardSet
	(*ExtendBoardSetReply)(nil),           // 44: proto.ExtendBoardSetReply
	(*ChannelPack)(nil),                   // 45: proto.ChannelPack
	(*SoundConsoleScenePack)(nil),         // 46: proto.SoundConsoleScenePack
	(*RadioFreqPack)(nil),                 // 47: proto.RadioFreqPack
	(*SongPack)(nil),                      // 48: proto.SongPack
	(*SpeechCfg)(nil),                     // 49: proto.SpeechCfg
	(*MiscCfg)(nil),                       // 50: proto.MiscCfg
	(*AlarmIn)(nil),                       // 51: proto.AlarmIn
	(*AlarmOutCfg)(nil),                   // 52: proto.AlarmOutCfg
	(*AlarmOutCfgGet)(nil),                // 53: proto.AlarmOutCfgGet
	(*AlarmOutCfgGetReply)(nil),           // 54: proto.AlarmOutCfgGetReply
	(*AlarmOutCfgSet)(nil),                // 55: proto.AlarmOutCfgSet
	(*AlarmOutCfgSetReply)(nil),           // 56: proto.AlarmOutCfgSetReply
	(*AudioRoute)(nil),                    // 57: proto.AudioRoute
	(*AudioMatrix)(nil),                   // 58: proto.AudioMatrix
	(*AudioMatrixCfgGet)(nil),             // 59: proto.AudioMatrixCfgGet
	(*AudioMatrixCfgGetReply)(nil),        // 60: proto.AudioMatrixCfgGetReply
	(*AudioMatrixCfgSet)(nil),             // 61: proto.AudioMatrixCfgSet
	(*AudioMatrixCfgSetReply)(nil),        // 62: proto.AudioMatrixCfgSetReply
	(*DeviceFeatureList)(nil),             // 63: proto.DeviceFeatureList
	(*SpeakerVolume)(nil),                 // 64: proto.SpeakerVolume
	(*EqCfg)(nil),                         // 65: proto.EqCfg
	(*DeviceInfo)(nil),                    // 66: proto.DeviceInfo
	(*DeviceInfoGet)(nil),                 // 67: proto.DeviceInfoGet
	(*DeviceInfoGetReply)(nil),            // 68: proto.DeviceInfoGetReply
	(*DeviceInfoSet)(nil),                 // 69: proto.DeviceInfoSet
	(*DeviceInfoSetReply)(nil),            // 70: proto.DeviceInfoSetReply
	(*IntelligentizeTask)(nil),            // 71: proto.IntelligentizeTask
	(*Task)(nil),                          // 72: proto.Task
	(*TaskStart)(nil),                     // 73: proto.TaskStart
	(*TaskStartReply)(nil),                // 74: proto.TaskStartReply
	(*TaskStop)(nil),                      // 75: proto.TaskStop
	(*TaskStopReply)(nil),                 // 76: proto.TaskStopReply
	(*TaskGet)(nil),                       // 77: proto.TaskGet
	(*TaskGetReply)(nil),                  // 78: proto.TaskGetReply
	(*TaskAdd)(nil),                       // 79: proto.TaskAdd
	(*TaskAddReply)(nil),                  // 80: proto.TaskAddReply
	(*TaskEdit)(nil),                      // 81: proto.TaskEdit
	(*TaskEditReply)(nil),                 // 82: proto.TaskEditReply
	(*TaskDelete)(nil),                    // 83: proto.TaskDelete
	(*TaskDeleteReply)(nil),               // 84: proto.TaskDeleteReply
	(*TaskIgnore)(nil),                    // 85: proto.TaskIgnore
	(*TaskIgnoreReply)(nil),               // 86: proto.TaskIgnoreReply
	(*TaskIgnoreDateGet)(nil),             // 87: proto.TaskIgnoreDateGet
	(*TaskIgnoreDateGetReply)(nil),        // 88: proto.TaskIgnoreDateGetReply
	(*GetLog)(nil),                        // 89: proto.GetLog
	(*Log)(nil),                           // 90: proto.Log
	(*GetLogReply)(nil),                   // 91: proto.GetLogReply
	(*SongGet)(nil),                       // 92: proto.SongGet
	(*Song)(nil),                          // 93: proto.Song
	(*SongGetReply)(nil),                  // 94: proto.SongGetReply
	(*FileUpload)(nil),                    // 95: proto.FileUpload
	(*FileUploadReply)(nil),               // 96: proto.FileUploadReply
	(*SongDelete)(nil),                    // 97: proto.SongDelete
	(*SongDeleteReply)(nil),               // 98: proto.SongDeleteReply
	(*UdiskSongGet)(nil),                  // 99: proto.UdiskSongGet
	(*UdiskSongGetReply)(nil),             // 100: proto.UdiskSongGetReply
	(*PaNotificationTone)(nil),            // 101: proto.PaNotificationTone
	(*ChannelAttr)(nil),                   // 102: proto.ChannelAttr
	(*OutChannelGet)(nil),                 // 103: proto.OutChannelGet
	(*OutChannelGetReply)(nil),            // 104: proto.OutChannelGetReply
	(*OutChannelEdit)(nil),                // 105: proto.OutChannelEdit
	(*OutChannelEditReply)(nil),           // 106: proto.OutChannelEditReply
	(*InChannelGet)(nil),                  // 107: proto.InChannelGet
	(*InChannelGetReply)(nil),             // 108: proto.InChannelGetReply
	(*InChannelEdit)(nil),                 // 109: proto.InChannelEdit
	(*InChannelEditReply)(nil),            // 110: proto.InChannelEditReply
	(*SoundConsoleTaskControl)(nil),       // 111: proto.SoundConsoleTaskControl
	(*SoundConsoleTaskControlReply)(nil),  // 112: proto.SoundConsoleTaskControlReply
	(*SoundConsoleTaskFeedback)(nil),      // 113: proto.SoundConsoleTaskFeedback
	(*SoundConsoleVolume)(nil),            // 114: proto.SoundConsoleVolume
	(*SoundConsoleScene)(nil),             // 115: proto.SoundConsoleScene
	(*RadioFreq)(nil),                     // 116: proto.RadioFreq
	(*RadioFreqGet)(nil),                  // 117: proto.RadioFreqGet
	(*RadioFreqGetReply)(nil),             // 118: proto.RadioFreqGetReply
	(*RadioFreqAdd)(nil),                  // 119: proto.RadioFreqAdd
	(*RadioFreqAddReply)(nil),             // 120: proto.RadioFreqAddReply
	(*RadioFreqSet)(nil),                  // 121: proto.RadioFreqSet
	(*RadioFreqSetReply)(nil),             // 122: proto.RadioFreqSetReply
	(*RadioFreqDelete)(nil),               // 123: proto.RadioFreqDelete
	(*RadioFreqDeleteReply)(nil),          // 124: proto.RadioFreqDeleteReply
	(*DeviceRestore)(nil),                 // 125: proto.DeviceRestore
	(*DeviceRestoreReply)(nil),            // 126: proto.DeviceRestoreReply
	(*DeviceUpgrade)(nil),                 // 127: proto.DeviceUpgrade
	(*DeviceUpgradeReply)(nil),            // 128: proto.DeviceUpgradeReply
	(*DevicePowerSet)(nil),                // 129: proto.DevicePowerSet
	(*DevicePowerSetReply)(nil),           // 130: proto.DevicePowerSetReply
	(*DevicePowerGet)(nil),                // 131: proto.DevicePowerGet
	(*DevicePowerGetReply)(nil),           // 132: proto.DevicePowerGetReply
	(*DevicePowerPack)(nil),               // 133: proto.DevicePowerPack
	(*TaskSync)(nil),                      // 134: proto.TaskSync
	(*TaskSyncReply)(nil),                 // 135: proto.TaskSyncReply
	(*TaskSyncStatusGet)(nil),             // 136: proto.TaskSyncStatusGet
	(*TaskSyncStatusGetReply)(nil),        // 137: proto.TaskSyncStatusGetReply
	(*TaskStatusGet)(nil),                 // 138: proto.TaskStatusGet
	(*TaskStatusGetReply)(nil),            // 139: proto.TaskStatusGetReply
	(*SubscribePublish)(nil),              // 140: proto.SubscribePublish
	(*SubscribePublishReply)(nil),         // 141: proto.SubscribePublishReply
	(*Identity)(nil),                      // 142: proto.Identity
	(*TaskAddOutChannel)(nil),             // 143: proto.TaskAddOutChannel
	(*TaskAddOutChannelReply)(nil),        // 144: proto.TaskAddOutChannelReply
	(*TaskDeleteOutChannel)(nil),          // 145: proto.TaskDeleteOutChannel
	(*TaskDeleteOutChannelReply)(nil),     // 146: proto.TaskDeleteOutChannelReply
	(*SongDownload)(nil),                  // 147: proto.SongDownload
	(*SongDownloadReply)(nil),             // 148: proto.SongDownloadReply
	(*SongDownloadStatus)(nil),            // 149: proto.SongDownloadStatus
	(*SongDownloadComplete)(nil),          // 150: proto.SongDownloadComplete
	(*StereoCfgSet)(nil),                  // 151: proto.StereoCfgSet
	(*StereoCfgSetReply)(nil),             // 152: proto.StereoCfgSetReply
	(*LedCfgSet)(nil),                     // 153: proto.LedCfgSet
	(*LedCfgSetReply)(nil),                // 154: proto.LedCfgSetReply
	(*WirelessCfgSet)(nil),                // 155: proto.WirelessCfgSet
	(*WirelessCfgSetReply)(nil),           // 156: proto.WirelessCfgSetReply
	(*AmpCheckCfgSet)(nil),                // 157: proto.AmpCheckCfgSet
	(*AmpCheckCfgSetReply)(nil),           // 158: proto.AmpCheckCfgSetReply
	(*MiscCfgGet)(nil),                    // 159: proto.MiscCfgGet
	(*MiscCfgGetReply)(nil),               // 160: proto.MiscCfgGetReply
	(*SpeechCfgGet)(nil),                  // 161: proto.SpeechCfgGet
	(*SpeechCfgGetReply)(nil),             // 162: proto.SpeechCfgGetReply
	(*SpeechCfgSet)(nil),                  // 163: proto.SpeechCfgSet
	(*SpeechCfgSetReply)(nil),             // 164: proto.SpeechCfgSetReply
	(*DeviceAliaseSet)(nil),               // 165: proto.DeviceAliaseSet
	(*DeviceAliaseSetReply)(nil),          // 166: proto.DeviceAliaseSetReply
	(*BluetoothWhitelistPack)(nil),        // 167: proto.BluetoothWhitelistPack
	(*BluetoothWhitelist)(nil),            // 168: proto.BluetoothWhitelist
	(*BluetoothWhitelistGet)(nil),         // 169: proto.BluetoothWhitelistGet
	(*BluetoothWhitelistGetReply)(nil),    // 170: proto.BluetoothWhitelistGetReply
	(*BluetoothWhitelistDelete)(nil),      // 171: proto.BluetoothWhitelistDelete
	(*BluetoothWhitelistDeleteReply)(nil), // 172: proto.BluetoothWhitelistDeleteReply
	(*BluetoothWhitelistAdd)(nil),         // 173: proto.BluetoothWhitelistAdd
	(*BluetoothWhitelistAddReply)(nil),    // 174: proto.BluetoothWhitelistAddReply
	(*BluetoothCfg)(nil),                  // 175: proto.BluetoothCfg
	(*BluetoothCfgSet)(nil),               // 176: proto.BluetoothCfgSet
	(*BluetoothCfgSetReply)(nil),          // 177: proto.BluetoothCfgSetReply
	(*BluetoothCfgGet)(nil),               // 178: proto.BluetoothCfgGet
	(*BluetoothCfgGetReply)(nil),          // 179: proto.BluetoothCfgGetReply
	(*PresetAttr)(nil),                    // 180: proto.PresetAttr
	(*PresetPack)(nil),                    // 181: proto.PresetPack
	(*TransferServer)(nil),                // 182: proto.TransferServer
	(*TenantInfo)(nil),                    // 183: proto.TenantInfo
	(*ConsoleAttr)(nil),                   // 184: proto.ConsoleAttr
	(*ConsolePack)(nil),                   // 185: proto.ConsolePack
	(*ConsoleInfo)(nil),                   // 186: proto.ConsoleInfo
	(*TaskPresetSwitch)(nil),              // 187: proto.TaskPresetSwitch
	(*TaskPresetSwitchReply)(nil),         // 188: proto.TaskPresetSwitchReply
	(*TransferServerSet)(nil),             // 189: proto.TransferServerSet
	(*TransferServerSetReply)(nil),        // 190: proto.TransferServerSetReply
	(*AppLogin)(nil),                      // 191: proto.AppLogin
	(*DeviceLogin)(nil),                   // 192: proto.DeviceLogin
	(*DeviceInfoUpdate)(nil),              // 193: proto.DeviceInfoUpdate
	(*DeviceReboot)(nil),                  // 194: proto.DeviceReboot
	(*DeviceRebootReply)(nil),             // 195: proto.DeviceRebootReply
	(*KeyPress)(nil),                      // 196: proto.KeyPress
	(*WriteSn)(nil),                       // 197: proto.WriteSn
	(*WriteSnReply)(nil),                  // 198: proto.WriteSnReply
	(*LedBoardControl)(nil),               // 199: proto.LedBoardControl
	(*LedBoardControlReply)(nil),          // 200: proto.LedBoardControlReply
	(*AppIdBond)(nil),                     // 201: proto.AppIdBond
	(*AppIdBondReply)(nil),                // 202: proto.AppIdBondReply
	(*DeviceTimeGetReply)(nil),            // 203: proto.DeviceTimeGetReply
	(*JoinTenant)(nil),                    // 204: proto.JoinTenant
	(*JoinTenantReply)(nil),               // 205: proto.JoinTenantReply
	(*DebugConnectionCfgSet)(nil),         // 206: proto.DebugConnectionCfgSet
	(*DebugConnectionCfgSetReply)(nil),    // 207: proto.DebugConnectionCfgSetReply
	(*SpeakerVolumeSet)(nil),              // 208: proto.SpeakerVolumeSet
	(*SpeakerVolumeSetReply)(nil),         // 209: proto.SpeakerVolumeSetReply
	(*SpeakerVolumeGetReply)(nil),         // 210: proto.SpeakerVolumeGetReply
	(*EqCfgSet)(nil),                      // 211: proto.EqCfgSet
	(*EqCfgSetReply)(nil),                 // 212: proto.EqCfgSetReply
	(*UChannelSet)(nil),                   // 213: proto.UChannelSet
	(*UChannelSetReply)(nil),              // 214: proto.UChannelSetReply
	(*HowlingSuppressionSet)(nil),         // 215: proto.HowlingSuppressionSet
	(*HowlingSuppressionSetReply)(nil),    // 216: proto.HowlingSuppressionSetReply
	(*AudioMixSet)(nil),                   // 217: proto.AudioMixSet
	(*AudioMixSetReply)(nil),              // 218: proto.AudioMixSetReply
	(*AudioSuppressionSet)(nil),           // 219: proto.AudioSuppressionSet
	(*AudioSuppressionSetReply)(nil),      // 220: proto.AudioSuppressionSetReply
	(*PaReinitSet)(nil),                   // 221: proto.PaReinitSet
	(*PaReinitSetReply)(nil),              // 222: proto.PaReinitSetReply
	(*LowShelfCfg)(nil),                   // 223: proto.LowShelfCfg
	(*LowShelfSet)(nil),                   // 224: proto.LowShelfSet
	(*LowShelfSetReply)(nil),              // 225: proto.LowShelfSetReply
	(*FirmwareDownloadProgress)(nil),      // 226: proto.FirmwareDownloadProgress
	(*SpeakerChannelStatusGet)(nil),       // 227: proto.SpeakerChannelStatusGet
	(*SpeakerChannelStatusGetReply)(nil),  // 228: proto.SpeakerChannelStatusGetReply
	(*SpeakerChannelStatus)(nil),          // 229: proto.SpeakerChannelStatus
	(*DeviceAdvertiseData)(nil),           // 230: proto.DeviceAdvertiseData
	(*FactoryTest)(nil),                   // 231: proto.FactoryTest
	(*FactoryTestReply)(nil),              // 232: proto.FactoryTestReply
	(*PbMsg)(nil),                         // 233: proto.PbMsg
}
var file_pbmsg_proto_depIdxs = []int32{
	1,   // 0: proto.UserLoginReply.status:type_name -> proto.Status
	1,   // 1: proto.DateSetReply.status:type_name -> proto.Status
	1,   // 2: proto.DateGetReply.status:type_name -> proto.Status
	29,  // 3: proto.NetCfg.ncscfg:type_name -> proto.NcsCfg
	30,  // 4: proto.NetCfg.sipcfg:type_name -> proto.SipCfg
	1,   // 5: proto.NetCfgGetReply.status:type_name -> proto.Status
	31,  // 6: proto.NetCfgGetReply.cfg:type_name -> proto.NetCfg
	31,  // 7: proto.NetCfgSet.cfg:type_name -> proto.NetCfg
	1,   // 8: proto.NetCfgSetReply.status:type_name -> proto.Status
	29,  // 9: proto.NcsCfgSet.cfg:type_name -> proto.NcsCfg
	1,   // 10: proto.NcsCfgSetReply.status:type_name -> proto.Status
	39,  // 11: proto.ExtendBoardPack.extend_board:type_name -> proto.ExtendBoard
	40,  // 12: proto.ExtendBoard.board:type_name -> proto.BoardAttr
	2,   // 13: proto.BoardAttr.type:type_name -> proto.BoardBtnType
	1,   // 14: proto.ExtendBoardGetReply.status:type_name -> proto.Status
	38,  // 15: proto.ExtendBoardGetReply.extend_boards:type_name -> proto.ExtendBoardPack
	38,  // 16: proto.ExtendBoardSet.extend_boards:type_name -> proto.ExtendBoardPack
	1,   // 17: proto.ExtendBoardSetReply.status:type_name -> proto.Status
	102, // 18: proto.ChannelPack.channel:type_name -> proto.ChannelAttr
	115, // 19: proto.SoundConsoleScenePack.scene:type_name -> proto.SoundConsoleScene
	116, // 20: proto.RadioFreqPack.rf:type_name -> proto.RadioFreq
	93,  // 21: proto.SongPack.songs:type_name -> proto.Song
	64,  // 22: proto.MiscCfg.speaker_volume:type_name -> proto.SpeakerVolume
	65,  // 23: proto.MiscCfg.eq_cfg:type_name -> proto.EqCfg
	223, // 24: proto.MiscCfg.low_shelf_cfg:type_name -> proto.LowShelfCfg
	182, // 25: proto.MiscCfg.transfer_server:type_name -> proto.TransferServer
	3,   // 26: proto.AlarmIn.trigger_status:type_name -> proto.AlarmInStatus
	4,   // 27: proto.AlarmIn.trigger_method:type_name -> proto.AlarmInTriggerMethod
	1,   // 28: proto.AlarmOutCfgGetReply.status:type_name -> proto.Status
	52,  // 29: proto.AlarmOutCfgGetReply.cfg:type_name -> proto.AlarmOutCfg
	52,  // 30: proto.AlarmOutCfgSet.cfg:type_name -> proto.AlarmOutCfg
	1,   // 31: proto.AlarmOutCfgSetReply.status:type_name -> proto.Status
	57,  // 32: proto.AudioMatrix.audio_route:type_name -> proto.AudioRoute
	1,   // 33: proto.AudioMatrixCfgGetReply.status:type_name -> proto.Status
	58,  // 34: proto.AudioMatrixCfgGetReply.audio_matrix:type_name -> proto.AudioMatrix
	58,  // 35: proto.AudioMatrixCfgSet.audio_matrix:type_name -> proto.AudioMatrix
	1,   // 36: proto.AudioMatrixCfgSetReply.status:type_name -> proto.Status
	31,  // 37: proto.DeviceInfo.netcfg:type_name -> proto.NetCfg
	45,  // 38: proto.DeviceInfo.in_channel:type_name -> proto.ChannelPack
	45,  // 39: proto.DeviceInfo.out_channel:type_name -> proto.ChannelPack
	47,  // 40: proto.DeviceInfo.radio_freq:type_name -> proto.RadioFreqPack
	133, // 41: proto.DeviceInfo.device_power:type_name -> proto.DevicePowerPack
	50,  // 42: proto.DeviceInfo.misc_cfg:type_name -> proto.MiscCfg
	49,  // 43: proto.DeviceInfo.speech_cfg:type_name -> proto.SpeechCfg
	175, // 44: proto.DeviceInfo.bluetooth_cfg:type_name -> proto.BluetoothCfg
	167, // 45: proto.DeviceInfo.bluetooth_whitelist:type_name -> proto.BluetoothWhitelistPack
	58,  // 46: proto.DeviceInfo.audio_matrix:type_name -> proto.AudioMatrix
	38,  // 47: proto.DeviceInfo.extend_boards:type_name -> proto.ExtendBoardPack
	52,  // 48: proto.DeviceInfo.alarm_out_cfg:type_name -> proto.AlarmOutCfg
	63,  // 49: proto.DeviceInfo.feature_list:type_name -> proto.DeviceFeatureList
	1,   // 50: proto.DeviceInfoGetReply.status:type_name -> proto.Status
	66,  // 51: proto.DeviceInfoGetReply.info:type_name -> proto.DeviceInfo
	66,  // 52: proto.DeviceInfoSet.info:type_name -> proto.DeviceInfo
	1,   // 53: proto.DeviceInfoSetReply.status:type_name -> proto.Status
	8,   // 54: proto.IntelligentizeTask.task_type:type_name -> proto.TaskType
	7,   // 55: proto.Task.source:type_name -> proto.AudioSource
	6,   // 56: proto.Task.repeat:type_name -> proto.RepeatType
	8,   // 57: proto.Task.task_type:type_name -> proto.TaskType
	7,   // 58: proto.Task.background:type_name -> proto.AudioSource
	9,   // 59: proto.Task.text_display_style:type_name -> proto.TEXT_DISPLAY_STYLE
	10,  // 60: proto.Task.text_display_speed:type_name -> proto.TEXT_DISPLAY_SPEED
	51,  // 61: proto.Task.alarm_in:type_name -> proto.AlarmIn
	11,  // 62: proto.Task.song_play_type:type_name -> proto.SongPlayType
	14,  // 63: proto.Task.pa_stream_type:type_name -> proto.PaStreamType
	72,  // 64: proto.TaskStart.task:type_name -> proto.Task
	1,   // 65: proto.TaskStartReply.status:type_name -> proto.Status
	8,   // 66: proto.TaskStop.task_type:type_name -> proto.TaskType
	1,   // 67: proto.TaskStopReply.status:type_name -> proto.Status
	72,  // 68: proto.TaskGetReply.task:type_name -> proto.Task
	72,  // 69: proto.TaskAdd.task:type_name -> proto.Task
	1,   // 70: proto.TaskAddReply.status:type_name -> proto.Status
	72,  // 71: proto.TaskEdit.task:type_name -> proto.Task
	1,   // 72: proto.TaskEditReply.status:type_name -> proto.Status
	1,   // 73: proto.TaskDeleteReply.status:type_name -> proto.Status
	1,   // 74: proto.TaskIgnoreReply.status:type_name -> proto.Status
	1,   // 75: proto.TaskIgnoreDateGetReply.status:type_name -> proto.Status
	12,  // 76: proto.GetLog.type:type_name -> proto.LogType
	1,   // 77: proto.GetLogReply.status:type_name -> proto.Status
	90,  // 78: proto.GetLogReply.log:type_name -> proto.Log
	12,  // 79: proto.GetLogReply.type:type_name -> proto.LogType
	1,   // 80: proto.SongGetReply.status:type_name -> proto.Status
	48,  // 81: proto.SongGetReply.songs:type_name -> proto.SongPack
	13,  // 82: proto.FileUpload.filetype:type_name -> proto.FileType
	1,   // 83: proto.FileUploadReply.status:type_name -> proto.Status
	1,   // 84: proto.SongDeleteReply.status:type_name -> proto.Status
	1,   // 85: proto.UdiskSongGetReply.status:type_name -> proto.Status
	93,  // 86: proto.UdiskSongGetReply.songs:type_name -> proto.Song
	101, // 87: proto.ChannelAttr.pa_notification_tone:type_name -> proto.PaNotificationTone
	14,  // 88: proto.ChannelAttr.pa_stream_type:type_name -> proto.PaStreamType
	102, // 89: proto.OutChannelGetReply.channel:type_name -> proto.ChannelAttr
	102, // 90: proto.OutChannelEdit.attr:type_name -> proto.ChannelAttr
	1,   // 91: proto.OutChannelEditReply.status:type_name -> proto.Status
	102, // 92: proto.InChannelGetReply.channel:type_name -> proto.ChannelAttr
	102, // 93: proto.InChannelEdit.attr:type_name -> proto.ChannelAttr
	1,   // 94: proto.InChannelEditReply.status:type_name -> proto.Status
	16,  // 95: proto.SoundConsoleTaskControl.command:type_name -> proto.SoundConsoleTaskControlCommand
	15,  // 96: proto.SoundConsoleTaskControl.volume_type:type_name -> proto.VolumeType
	1,   // 97: proto.SoundConsoleTaskControlReply.status:type_name -> proto.Status
	114, // 98: proto.SoundConsoleScene.volume:type_name -> proto.SoundConsoleVolume
	1,   // 99: proto.RadioFreqGetReply.status:type_name -> proto.Status
	116, // 100: proto.RadioFreqGetReply.rf:type_name -> proto.RadioFreq
	116, // 101: proto.RadioFreqAdd.rf:type_name -> proto.RadioFreq
	1,   // 102: proto.RadioFreqAddReply.status:type_name -> proto.Status
	116, // 103: proto.RadioFreqSet.rf:type_name -> proto.RadioFreq
	1,   // 104: proto.RadioFreqSetReply.status:type_name -> proto.Status
	116, // 105: proto.RadioFreqDelete.rf:type_name -> proto.RadioFreq
	1,   // 106: proto.RadioFreqDeleteReply.status:type_name -> proto.Status
	1,   // 107: proto.DeviceRestoreReply.status:type_name -> proto.Status
	1,   // 108: proto.DeviceUpgradeReply.status:type_name -> proto.Status
	17,  // 109: proto.DevicePowerSet.out_1_power:type_name -> proto.DevicePower
	17,  // 110: proto.DevicePowerSet.out_2_power:type_name -> proto.DevicePower
	17,  // 111: proto.DevicePowerSet.out_3_power:type_name -> proto.DevicePower
	17,  // 112: proto.DevicePowerSet.out_4_power:type_name -> proto.DevicePower
	1,   // 113: proto.DevicePowerSetReply.status:type_name -> proto.Status
	1,   // 114: proto.DevicePowerGetReply.status:type_name -> proto.Status
	17,  // 115: proto.DevicePowerGetReply.out_1_power:type_name -> proto.DevicePower
	17,  // 116: proto.DevicePowerGetReply.out_2_power:type_name -> proto.DevicePower
	17,  // 117: proto.DevicePowerGetReply.out_3_power:type_name -> proto.DevicePower
	17,  // 118: proto.DevicePowerGetReply.out_4_power:type_name -> proto.DevicePower
	17,  // 119: proto.DevicePowerPack.out_1_power:type_name -> proto.DevicePower
	17,  // 120: proto.DevicePowerPack.out_2_power:type_name -> proto.DevicePower
	17,  // 121: proto.DevicePowerPack.out_3_power:type_name -> proto.DevicePower
	17,  // 122: proto.DevicePowerPack.out_4_power:type_name -> proto.DevicePower
	18,  // 123: proto.TaskSync.type:type_name -> proto.TaskSyncType
	1,   // 124: proto.TaskSyncReply.status:type_name -> proto.Status
	19,  // 125: proto.TaskSyncStatusGetReply.status:type_name -> proto.TaskSyncStatus
	1,   // 126: proto.TaskStatusGetReply.status:type_name -> proto.Status
	1,   // 127: proto.SubscribePublishReply.status:type_name -> proto.Status
	1,   // 128: proto.TaskAddOutChannelReply.status:type_name -> proto.Status
	1,   // 129: proto.TaskDeleteOutChannelReply.status:type_name -> proto.Status
	1,   // 130: proto.SongDownloadReply.status:type_name -> proto.Status
	1,   // 131: proto.SongDownloadStatus.status:type_name -> proto.Status
	1,   // 132: proto.StereoCfgSetReply.status:type_name -> proto.Status
	1,   // 133: proto.LedCfgSetReply.status:type_name -> proto.Status
	1,   // 134: proto.WirelessCfgSetReply.status:type_name -> proto.Status
	1,   // 135: proto.AmpCheckCfgSetReply.status:type_name -> proto.Status
	1,   // 136: proto.MiscCfgGetReply.status:type_name -> proto.Status
	50,  // 137: proto.MiscCfgGetReply.misc_cfg:type_name -> proto.MiscCfg
	1,   // 138: proto.SpeechCfgGetReply.status:type_name -> proto.Status
	49,  // 139: proto.SpeechCfgGetReply.speech_cfg:type_name -> proto.SpeechCfg
	49,  // 140: proto.SpeechCfgSet.speech_cfg:type_name -> proto.SpeechCfg
	1,   // 141: proto.SpeechCfgSetReply.status:type_name -> proto.Status
	1,   // 142: proto.DeviceAliaseSetReply.status:type_name -> proto.Status
	168, // 143: proto.BluetoothWhitelistPack.whitelist:type_name -> proto.BluetoothWhitelist
	1,   // 144: proto.BluetoothWhitelistGetReply.status:type_name -> proto.Status
	168, // 145: proto.BluetoothWhitelistGetReply.whitelist:type_name -> proto.BluetoothWhitelist
	168, // 146: proto.BluetoothWhitelistDelete.whitelist:type_name -> proto.BluetoothWhitelist
	1,   // 147: proto.BluetoothWhitelistDeleteReply.status:type_name -> proto.Status
	168, // 148: proto.BluetoothWhitelistAdd.whitelist:type_name -> proto.BluetoothWhitelist
	1,   // 149: proto.BluetoothWhitelistAddReply.status:type_name -> proto.Status
	175, // 150: proto.BluetoothCfgSet.bluetooth_cfg:type_name -> proto.BluetoothCfg
	1,   // 151: proto.BluetoothCfgSetReply.status:type_name -> proto.Status
	1,   // 152: proto.BluetoothCfgGetReply.status:type_name -> proto.Status
	175, // 153: proto.BluetoothCfgGetReply.bluetooth_cfg:type_name -> proto.BluetoothCfg
	180, // 154: proto.PresetPack.preset:type_name -> proto.PresetAttr
	181, // 155: proto.TenantInfo.presetpack:type_name -> proto.PresetPack
	184, // 156: proto.ConsolePack.console:type_name -> proto.ConsoleAttr
	185, // 157: proto.ConsoleInfo.consolepack:type_name -> proto.ConsolePack
	1,   // 158: proto.TaskPresetSwitchReply.status:type_name -> proto.Status
	182, // 159: proto.TransferServerSet.transfer_server:type_name -> proto.TransferServer
	1,   // 160: proto.TransferServerSetReply.status:type_name -> proto.Status
	66,  // 161: proto.DeviceInfoUpdate.info:type_name -> proto.DeviceInfo
	1,   // 162: proto.DeviceRebootReply.status:type_name -> proto.Status
	20,  // 163: proto.KeyPress.id:type_name -> proto.Key
	1,   // 164: proto.WriteSnReply.status:type_name -> proto.Status
	21,  // 165: proto.LedBoardControl.id:type_name -> proto.LedBoardControlId
	1,   // 166: proto.LedBoardControlReply.status:type_name -> proto.Status
	1,   // 167: proto.AppIdBondReply.status:type_name -> proto.Status
	1,   // 168: proto.JoinTenantReply.status:type_name -> proto.Status
	1,   // 169: proto.DebugConnectionCfgSetReply.status:type_name -> proto.Status
	64,  // 170: proto.SpeakerVolumeSet.volume:type_name -> proto.SpeakerVolume
	1,   // 171: proto.SpeakerVolumeSetReply.status:type_name -> proto.Status
	64,  // 172: proto.SpeakerVolumeGetReply.volume:type_name -> proto.SpeakerVolume
	65,  // 173: proto.EqCfgSet.eq_cfg:type_name -> proto.EqCfg
	1,   // 174: proto.EqCfgSetReply.status:type_name -> proto.Status
	1,   // 175: proto.UChannelSetReply.status:type_name -> proto.Status
	1,   // 176: proto.HowlingSuppressionSetReply.status:type_name -> proto.Status
	1,   // 177: proto.AudioMixSetReply.status:type_name -> proto.Status
	1,   // 178: proto.AudioSuppressionSetReply.status:type_name -> proto.Status
	1,   // 179: proto.PaReinitSetReply.status:type_name -> proto.Status
	223, // 180: proto.LowShelfSet.cfg:type_name -> proto.LowShelfCfg
	1,   // 181: proto.LowShelfSetReply.status:type_name -> proto.Status
	1,   // 182: proto.SpeakerChannelStatusGetReply.status:type_name -> proto.Status
	31,  // 183: proto.DeviceAdvertiseData.netcfg:type_name -> proto.NetCfg
	45,  // 184: proto.DeviceAdvertiseData.out_channel:type_name -> proto.ChannelPack
	22,  // 185: proto.FactoryTest.id:type_name -> proto.FactoryTestId
	9,   // 186: proto.FactoryTest.text_display_style:type_name -> proto.TEXT_DISPLAY_STYLE
	10,  // 187: proto.FactoryTest.text_display_speed:type_name -> proto.TEXT_DISPLAY_SPEED
	1,   // 188: proto.FactoryTestReply.status:type_name -> proto.Status
	0,   // 189: proto.PbMsg.id:type_name -> proto.MsgId
	190, // [190:190] is the sub-list for method output_type
	190, // [190:190] is the sub-list for method input_type
	190, // [190:190] is the sub-list for extension type_name
	190, // [190:190] is the sub-list for extension extendee
	0,   // [0:190] is the sub-list for field type_name
}

func init() { file_pbmsg_proto_init() }
func file_pbmsg_proto_init() {
	if File_pbmsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbmsg_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UserLoginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DateSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DateGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DateGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NcsCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SipCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NetCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NetCfgGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NetCfgGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NetCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*NetCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*NcsCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*NcsCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendBoardPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*BoardAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendBoardGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendBoardGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendBoardSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ExtendBoardSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SoundConsoleScenePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SongPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SpeechCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MiscCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmOutCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmOutCfgGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmOutCfgGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmOutCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AlarmOutCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*AudioRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMatrixCfgGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMatrixCfgGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMatrixCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMatrixCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceFeatureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*EqCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfoGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfoGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfoSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfoSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*IntelligentizeTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStopReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*TaskGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*TaskGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*TaskAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*TaskAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*TaskEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*TaskEditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*TaskDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*TaskDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*TaskIgnore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*TaskIgnoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*TaskIgnoreDateGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*TaskIgnoreDateGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*GetLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*GetLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*SongGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*Song); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*SongGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*FileUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*FileUploadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*SongDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*SongDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*UdiskSongGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*UdiskSongGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*PaNotificationTone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*OutChannelGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*OutChannelGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*OutChannelEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*OutChannelEditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*InChannelGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*InChannelGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*InChannelEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*InChannelEditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*SoundConsoleTaskControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*SoundConsoleTaskControlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*SoundConsoleTaskFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*SoundConsoleVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*SoundConsoleScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*RadioFreqDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRestore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRestoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceUpgradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*DevicePowerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*DevicePowerSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*DevicePowerGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*DevicePowerGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*DevicePowerPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSyncReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSyncStatusGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSyncStatusGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStatusGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStatusGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribePublish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribePublishReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*TaskAddOutChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*TaskAddOutChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*TaskDeleteOutChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*TaskDeleteOutChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*SongDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*SongDownloadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*SongDownloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*SongDownloadComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*StereoCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*StereoCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*LedCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*LedCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*WirelessCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*WirelessCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*AmpCheckCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*AmpCheckCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*MiscCfgGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*MiscCfgGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*SpeechCfgGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*SpeechCfgGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*SpeechCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*SpeechCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceAliaseSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceAliaseSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothWhitelistAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothCfgGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*BluetoothCfgGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*PresetAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*PresetPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*TransferServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*TenantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*ConsoleAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*ConsolePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*ConsoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*TaskPresetSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*TaskPresetSwitchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*TransferServerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*TransferServerSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*AppLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceReboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRebootReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*KeyPress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*WriteSn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*WriteSnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*LedBoardControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*LedBoardControlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[178].Exporter = func(v any, i int) any {
			switch v := v.(*AppIdBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[179].Exporter = func(v any, i int) any {
			switch v := v.(*AppIdBondReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[180].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceTimeGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*JoinTenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*JoinTenantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*DebugConnectionCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*DebugConnectionCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerVolumeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerVolumeSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerVolumeGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*EqCfgSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[189].Exporter = func(v any, i int) any {
			switch v := v.(*EqCfgSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*UChannelSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*UChannelSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*HowlingSuppressionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[193].Exporter = func(v any, i int) any {
			switch v := v.(*HowlingSuppressionSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[194].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMixSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[195].Exporter = func(v any, i int) any {
			switch v := v.(*AudioMixSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[196].Exporter = func(v any, i int) any {
			switch v := v.(*AudioSuppressionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[197].Exporter = func(v any, i int) any {
			switch v := v.(*AudioSuppressionSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[198].Exporter = func(v any, i int) any {
			switch v := v.(*PaReinitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[199].Exporter = func(v any, i int) any {
			switch v := v.(*PaReinitSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[200].Exporter = func(v any, i int) any {
			switch v := v.(*LowShelfCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[201].Exporter = func(v any, i int) any {
			switch v := v.(*LowShelfSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[202].Exporter = func(v any, i int) any {
			switch v := v.(*LowShelfSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[203].Exporter = func(v any, i int) any {
			switch v := v.(*FirmwareDownloadProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[204].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerChannelStatusGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[205].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerChannelStatusGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[206].Exporter = func(v any, i int) any {
			switch v := v.(*SpeakerChannelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[207].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceAdvertiseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[208].Exporter = func(v any, i int) any {
			switch v := v.(*FactoryTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[209].Exporter = func(v any, i int) any {
			switch v := v.(*FactoryTestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmsg_proto_msgTypes[210].Exporter = func(v any, i int) any {
			switch v := v.(*PbMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbmsg_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   211,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbmsg_proto_goTypes,
		DependencyIndexes: file_pbmsg_proto_depIdxs,
		EnumInfos:         file_pbmsg_proto_enumTypes,
		MessageInfos:      file_pbmsg_proto_msgTypes,
	}.Build()
	File_pbmsg_proto = out.File
	file_pbmsg_proto_rawDesc = nil
	file_pbmsg_proto_goTypes = nil
	file_pbmsg_proto_depIdxs = nil
}
